/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package latest

import (
	"encoding/json"
	"fmt"
)

// ListPeeringConnections200Response - struct for ListPeeringConnections200Response
type ListPeeringConnections200Response struct {
	PaginatedAWSPeerVpc *PaginatedAWSPeerVpc
	PaginatedAzurePeerNetwork *PaginatedAzurePeerNetwork
	PaginatedGCPPeerVpc *PaginatedGCPPeerVpc
}

// PaginatedAWSPeerVpcAsListPeeringConnections200Response is a convenience function that returns PaginatedAWSPeerVpc wrapped in ListPeeringConnections200Response
func PaginatedAWSPeerVpcAsListPeeringConnections200Response(v *PaginatedAWSPeerVpc) ListPeeringConnections200Response {
	return ListPeeringConnections200Response{
		PaginatedAWSPeerVpc: v,
	}
}

// PaginatedAzurePeerNetworkAsListPeeringConnections200Response is a convenience function that returns PaginatedAzurePeerNetwork wrapped in ListPeeringConnections200Response
func PaginatedAzurePeerNetworkAsListPeeringConnections200Response(v *PaginatedAzurePeerNetwork) ListPeeringConnections200Response {
	return ListPeeringConnections200Response{
		PaginatedAzurePeerNetwork: v,
	}
}

// PaginatedGCPPeerVpcAsListPeeringConnections200Response is a convenience function that returns PaginatedGCPPeerVpc wrapped in ListPeeringConnections200Response
func PaginatedGCPPeerVpcAsListPeeringConnections200Response(v *PaginatedGCPPeerVpc) ListPeeringConnections200Response {
	return ListPeeringConnections200Response{
		PaginatedGCPPeerVpc: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ListPeeringConnections200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PaginatedAWSPeerVpc
	err = json.Unmarshal(data, &dst.PaginatedAWSPeerVpc)
	if err == nil {
		jsonPaginatedAWSPeerVpc, _ := json.Marshal(dst.PaginatedAWSPeerVpc)
		if string(jsonPaginatedAWSPeerVpc) == "{}" { // empty struct
			dst.PaginatedAWSPeerVpc = nil
		} else {
			match++
		}
	} else {
		dst.PaginatedAWSPeerVpc = nil
	}

	// try to unmarshal data into PaginatedAzurePeerNetwork
	err = json.Unmarshal(data, &dst.PaginatedAzurePeerNetwork)
	if err == nil {
		jsonPaginatedAzurePeerNetwork, _ := json.Marshal(dst.PaginatedAzurePeerNetwork)
		if string(jsonPaginatedAzurePeerNetwork) == "{}" { // empty struct
			dst.PaginatedAzurePeerNetwork = nil
		} else {
			match++
		}
	} else {
		dst.PaginatedAzurePeerNetwork = nil
	}

	// try to unmarshal data into PaginatedGCPPeerVpc
	err = json.Unmarshal(data, &dst.PaginatedGCPPeerVpc)
	if err == nil {
		jsonPaginatedGCPPeerVpc, _ := json.Marshal(dst.PaginatedGCPPeerVpc)
		if string(jsonPaginatedGCPPeerVpc) == "{}" { // empty struct
			dst.PaginatedGCPPeerVpc = nil
		} else {
			match++
		}
	} else {
		dst.PaginatedGCPPeerVpc = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PaginatedAWSPeerVpc = nil
		dst.PaginatedAzurePeerNetwork = nil
		dst.PaginatedGCPPeerVpc = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ListPeeringConnections200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ListPeeringConnections200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListPeeringConnections200Response) MarshalJSON() ([]byte, error) {
	if src.PaginatedAWSPeerVpc != nil {
		return json.Marshal(&src.PaginatedAWSPeerVpc)
	}

	if src.PaginatedAzurePeerNetwork != nil {
		return json.Marshal(&src.PaginatedAzurePeerNetwork)
	}

	if src.PaginatedGCPPeerVpc != nil {
		return json.Marshal(&src.PaginatedGCPPeerVpc)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ListPeeringConnections200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PaginatedAWSPeerVpc != nil {
		return obj.PaginatedAWSPeerVpc
	}

	if obj.PaginatedAzurePeerNetwork != nil {
		return obj.PaginatedAzurePeerNetwork
	}

	if obj.PaginatedGCPPeerVpc != nil {
		return obj.PaginatedGCPPeerVpc
	}

	// all schemas are nil
	return nil
}

type NullableListPeeringConnections200Response struct {
	value *ListPeeringConnections200Response
	isSet bool
}

func (v NullableListPeeringConnections200Response) Get() *ListPeeringConnections200Response {
	return v.value
}

func (v *NullableListPeeringConnections200Response) Set(val *ListPeeringConnections200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListPeeringConnections200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListPeeringConnections200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPeeringConnections200Response(val *ListPeeringConnections200Response) *NullableListPeeringConnections200Response {
	return &NullableListPeeringConnections200Response{value: val, isSet: true}
}

func (v NullableListPeeringConnections200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPeeringConnections200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


