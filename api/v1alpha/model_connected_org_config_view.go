/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// ConnectedOrgConfigView struct for ConnectedOrgConfigView
type ConnectedOrgConfigView struct {
	// Approved domains that restrict users who can join the organization based on their email address.
	DomainAllowList []string `json:"domainAllowList,omitempty"`
	// Value that indicates whether domain restriction is enabled for this connected org.
	DomainRestrictionEnabled bool `json:"domainRestrictionEnabled"`
	// Unique 20-hexadecimal digit string that identifies the identity provider that this connected org config is associated with.
	IdentityProviderId string `json:"identityProviderId"`
	// Unique 24-hexadecimal digit string that identifies the connected organization configuration.
	OrgId string `json:"orgId"`
	// Atlas roles that are granted to a user in this organization after authenticating.
	PostAuthRoleGrants []string `json:"postAuthRoleGrants,omitempty"`
	// Role mappings that are configured in this organization.
	RoleMappings []RoleMappingView `json:"roleMappings,omitempty"`
	// List that contains the users who have an email address that doesn't match any domain on the allowed list.
	UserConflicts []FederatedUserView `json:"userConflicts,omitempty"`
}

// NewConnectedOrgConfigView instantiates a new ConnectedOrgConfigView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectedOrgConfigView() *ConnectedOrgConfigView {
	this := ConnectedOrgConfigView{}
	return &this
}

// NewConnectedOrgConfigViewWithDefaults instantiates a new ConnectedOrgConfigView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectedOrgConfigViewWithDefaults() *ConnectedOrgConfigView {
	this := ConnectedOrgConfigView{}
	return &this
}

// GetDomainAllowList returns the DomainAllowList field value if set, zero value otherwise.
func (o *ConnectedOrgConfigView) GetDomainAllowList() []string {
	if o == nil || o.DomainAllowList == nil {
		var ret []string
		return ret
	}
	return o.DomainAllowList
}

// GetDomainAllowListOk returns a tuple with the DomainAllowList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedOrgConfigView) GetDomainAllowListOk() ([]string, bool) {
	if o == nil || o.DomainAllowList == nil {
		return nil, false
	}
	return o.DomainAllowList, true
}

// HasDomainAllowList returns a boolean if a field has been set.
func (o *ConnectedOrgConfigView) HasDomainAllowList() bool {
	if o != nil && o.DomainAllowList != nil {
		return true
	}

	return false
}

// SetDomainAllowList gets a reference to the given []string and assigns it to the DomainAllowList field.
func (o *ConnectedOrgConfigView) SetDomainAllowList(v []string) {
	o.DomainAllowList = v
}

// GetDomainRestrictionEnabled returns the DomainRestrictionEnabled field value
func (o *ConnectedOrgConfigView) GetDomainRestrictionEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DomainRestrictionEnabled
}

// GetDomainRestrictionEnabledOk returns a tuple with the DomainRestrictionEnabled field value
// and a boolean to check if the value has been set.
func (o *ConnectedOrgConfigView) GetDomainRestrictionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainRestrictionEnabled, true
}

// SetDomainRestrictionEnabled sets field value
func (o *ConnectedOrgConfigView) SetDomainRestrictionEnabled(v bool) {
	o.DomainRestrictionEnabled = v
}

// GetIdentityProviderId returns the IdentityProviderId field value
func (o *ConnectedOrgConfigView) GetIdentityProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentityProviderId
}

// GetIdentityProviderIdOk returns a tuple with the IdentityProviderId field value
// and a boolean to check if the value has been set.
func (o *ConnectedOrgConfigView) GetIdentityProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityProviderId, true
}

// SetIdentityProviderId sets field value
func (o *ConnectedOrgConfigView) SetIdentityProviderId(v string) {
	o.IdentityProviderId = v
}

// GetOrgId returns the OrgId field value
func (o *ConnectedOrgConfigView) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *ConnectedOrgConfigView) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *ConnectedOrgConfigView) SetOrgId(v string) {
	o.OrgId = v
}

// GetPostAuthRoleGrants returns the PostAuthRoleGrants field value if set, zero value otherwise.
func (o *ConnectedOrgConfigView) GetPostAuthRoleGrants() []string {
	if o == nil || o.PostAuthRoleGrants == nil {
		var ret []string
		return ret
	}
	return o.PostAuthRoleGrants
}

// GetPostAuthRoleGrantsOk returns a tuple with the PostAuthRoleGrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedOrgConfigView) GetPostAuthRoleGrantsOk() ([]string, bool) {
	if o == nil || o.PostAuthRoleGrants == nil {
		return nil, false
	}
	return o.PostAuthRoleGrants, true
}

// HasPostAuthRoleGrants returns a boolean if a field has been set.
func (o *ConnectedOrgConfigView) HasPostAuthRoleGrants() bool {
	if o != nil && o.PostAuthRoleGrants != nil {
		return true
	}

	return false
}

// SetPostAuthRoleGrants gets a reference to the given []string and assigns it to the PostAuthRoleGrants field.
func (o *ConnectedOrgConfigView) SetPostAuthRoleGrants(v []string) {
	o.PostAuthRoleGrants = v
}

// GetRoleMappings returns the RoleMappings field value if set, zero value otherwise.
func (o *ConnectedOrgConfigView) GetRoleMappings() []RoleMappingView {
	if o == nil || o.RoleMappings == nil {
		var ret []RoleMappingView
		return ret
	}
	return o.RoleMappings
}

// GetRoleMappingsOk returns a tuple with the RoleMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedOrgConfigView) GetRoleMappingsOk() ([]RoleMappingView, bool) {
	if o == nil || o.RoleMappings == nil {
		return nil, false
	}
	return o.RoleMappings, true
}

// HasRoleMappings returns a boolean if a field has been set.
func (o *ConnectedOrgConfigView) HasRoleMappings() bool {
	if o != nil && o.RoleMappings != nil {
		return true
	}

	return false
}

// SetRoleMappings gets a reference to the given []RoleMappingView and assigns it to the RoleMappings field.
func (o *ConnectedOrgConfigView) SetRoleMappings(v []RoleMappingView) {
	o.RoleMappings = v
}

// GetUserConflicts returns the UserConflicts field value if set, zero value otherwise.
func (o *ConnectedOrgConfigView) GetUserConflicts() []FederatedUserView {
	if o == nil || o.UserConflicts == nil {
		var ret []FederatedUserView
		return ret
	}
	return o.UserConflicts
}

// GetUserConflictsOk returns a tuple with the UserConflicts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedOrgConfigView) GetUserConflictsOk() ([]FederatedUserView, bool) {
	if o == nil || o.UserConflicts == nil {
		return nil, false
	}
	return o.UserConflicts, true
}

// HasUserConflicts returns a boolean if a field has been set.
func (o *ConnectedOrgConfigView) HasUserConflicts() bool {
	if o != nil && o.UserConflicts != nil {
		return true
	}

	return false
}

// SetUserConflicts gets a reference to the given []FederatedUserView and assigns it to the UserConflicts field.
func (o *ConnectedOrgConfigView) SetUserConflicts(v []FederatedUserView) {
	o.UserConflicts = v
}

func (o ConnectedOrgConfigView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DomainAllowList != nil {
		toSerialize["domainAllowList"] = o.DomainAllowList
	}
	if true {
		toSerialize["domainRestrictionEnabled"] = o.DomainRestrictionEnabled
	}
	if true {
		toSerialize["identityProviderId"] = o.IdentityProviderId
	}
	if true {
		toSerialize["orgId"] = o.OrgId
	}
	if o.PostAuthRoleGrants != nil {
		toSerialize["postAuthRoleGrants"] = o.PostAuthRoleGrants
	}
	if o.RoleMappings != nil {
		toSerialize["roleMappings"] = o.RoleMappings
	}
	if o.UserConflicts != nil {
		toSerialize["userConflicts"] = o.UserConflicts
	}
	return json.Marshal(toSerialize)
}

type NullableConnectedOrgConfigView struct {
	value *ConnectedOrgConfigView
	isSet bool
}

func (v NullableConnectedOrgConfigView) Get() *ConnectedOrgConfigView {
	return v.value
}

func (v *NullableConnectedOrgConfigView) Set(val *ConnectedOrgConfigView) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectedOrgConfigView) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectedOrgConfigView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectedOrgConfigView(val *ConnectedOrgConfigView) *NullableConnectedOrgConfigView {
	return &NullableConnectedOrgConfigView{value: val, isSet: true}
}

func (v NullableConnectedOrgConfigView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectedOrgConfigView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


