/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// AlertConfigAuditTypeView Unique identifier of event type.
type AlertConfigAuditTypeView string

// List of AlertConfigAuditTypeView
const (
	ALERTCONFIGAUDITTYPEVIEW_DISABLED_AUDIT AlertConfigAuditTypeView = "ALERT_CONFIG_DISABLED_AUDIT"
	ALERTCONFIGAUDITTYPEVIEW_ENABLED_AUDIT AlertConfigAuditTypeView = "ALERT_CONFIG_ENABLED_AUDIT"
	ALERTCONFIGAUDITTYPEVIEW_ADDED_AUDIT AlertConfigAuditTypeView = "ALERT_CONFIG_ADDED_AUDIT"
	ALERTCONFIGAUDITTYPEVIEW_DELETED_AUDIT AlertConfigAuditTypeView = "ALERT_CONFIG_DELETED_AUDIT"
	ALERTCONFIGAUDITTYPEVIEW_CHANGED_AUDIT AlertConfigAuditTypeView = "ALERT_CONFIG_CHANGED_AUDIT"
)

// All allowed values of AlertConfigAuditTypeView enum
var AllowedAlertConfigAuditTypeViewEnumValues = []AlertConfigAuditTypeView{
	"ALERT_CONFIG_DISABLED_AUDIT",
	"ALERT_CONFIG_ENABLED_AUDIT",
	"ALERT_CONFIG_ADDED_AUDIT",
	"ALERT_CONFIG_DELETED_AUDIT",
	"ALERT_CONFIG_CHANGED_AUDIT",
}

func (v *AlertConfigAuditTypeView) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertConfigAuditTypeView(value)
	for _, existing := range AllowedAlertConfigAuditTypeViewEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertConfigAuditTypeView", value)
}

// NewAlertConfigAuditTypeViewFromValue returns a pointer to a valid AlertConfigAuditTypeView
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertConfigAuditTypeViewFromValue(v string) (*AlertConfigAuditTypeView, error) {
	ev := AlertConfigAuditTypeView(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertConfigAuditTypeView: valid values are %v", v, AllowedAlertConfigAuditTypeViewEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertConfigAuditTypeView) IsValid() bool {
	for _, existing := range AllowedAlertConfigAuditTypeViewEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertConfigAuditTypeView value
func (v AlertConfigAuditTypeView) Ptr() *AlertConfigAuditTypeView {
	return &v
}

type NullableAlertConfigAuditTypeView struct {
	value *AlertConfigAuditTypeView
	isSet bool
}

func (v NullableAlertConfigAuditTypeView) Get() *AlertConfigAuditTypeView {
	return v.value
}

func (v *NullableAlertConfigAuditTypeView) Set(val *AlertConfigAuditTypeView) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertConfigAuditTypeView) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertConfigAuditTypeView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertConfigAuditTypeView(val *AlertConfigAuditTypeView) *NullableAlertConfigAuditTypeView {
	return &NullableAlertConfigAuditTypeView{value: val, isSet: true}
}

func (v NullableAlertConfigAuditTypeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertConfigAuditTypeView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

