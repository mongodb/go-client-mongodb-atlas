/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// ApiGroupInvitationUpdateRequestView struct for ApiGroupInvitationUpdateRequestView
type ApiGroupInvitationUpdateRequestView struct {
	// One or more organization or project level roles to assign to the MongoDB Cloud user.
	Roles []string `json:"roles,omitempty"`
}

// NewApiGroupInvitationUpdateRequestView instantiates a new ApiGroupInvitationUpdateRequestView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiGroupInvitationUpdateRequestView() *ApiGroupInvitationUpdateRequestView {
	this := ApiGroupInvitationUpdateRequestView{}
	return &this
}

// NewApiGroupInvitationUpdateRequestViewWithDefaults instantiates a new ApiGroupInvitationUpdateRequestView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiGroupInvitationUpdateRequestViewWithDefaults() *ApiGroupInvitationUpdateRequestView {
	this := ApiGroupInvitationUpdateRequestView{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *ApiGroupInvitationUpdateRequestView) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiGroupInvitationUpdateRequestView) GetRolesOk() ([]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *ApiGroupInvitationUpdateRequestView) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *ApiGroupInvitationUpdateRequestView) SetRoles(v []string) {
	o.Roles = v
}

func (o ApiGroupInvitationUpdateRequestView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableApiGroupInvitationUpdateRequestView struct {
	value *ApiGroupInvitationUpdateRequestView
	isSet bool
}

func (v NullableApiGroupInvitationUpdateRequestView) Get() *ApiGroupInvitationUpdateRequestView {
	return v.value
}

func (v *NullableApiGroupInvitationUpdateRequestView) Set(val *ApiGroupInvitationUpdateRequestView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiGroupInvitationUpdateRequestView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiGroupInvitationUpdateRequestView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiGroupInvitationUpdateRequestView(val *ApiGroupInvitationUpdateRequestView) *NullableApiGroupInvitationUpdateRequestView {
	return &NullableApiGroupInvitationUpdateRequestView{value: val, isSet: true}
}

func (v NullableApiGroupInvitationUpdateRequestView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiGroupInvitationUpdateRequestView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


