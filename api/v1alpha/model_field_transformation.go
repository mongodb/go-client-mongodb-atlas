/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// FieldTransformation Field Transformations during ingestion of a Data Lake Pipeline.
type FieldTransformation struct {
	// Key in the document.
	Field *string `json:"field,omitempty"`
	// Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
	Type *string `json:"type,omitempty"`
}

// NewFieldTransformation instantiates a new FieldTransformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldTransformation() *FieldTransformation {
	this := FieldTransformation{}
	return &this
}

// NewFieldTransformationWithDefaults instantiates a new FieldTransformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldTransformationWithDefaults() *FieldTransformation {
	this := FieldTransformation{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *FieldTransformation) GetField() string {
	if o == nil || o.Field == nil {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTransformation) GetFieldOk() (*string, bool) {
	if o == nil || o.Field == nil {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *FieldTransformation) HasField() bool {
	if o != nil && o.Field != nil {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *FieldTransformation) SetField(v string) {
	o.Field = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FieldTransformation) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldTransformation) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FieldTransformation) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FieldTransformation) SetType(v string) {
	o.Type = &v
}

func (o FieldTransformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Field != nil {
		toSerialize["field"] = o.Field
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableFieldTransformation struct {
	value *FieldTransformation
	isSet bool
}

func (v NullableFieldTransformation) Get() *FieldTransformation {
	return v.value
}

func (v *NullableFieldTransformation) Set(val *FieldTransformation) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldTransformation) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldTransformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldTransformation(val *FieldTransformation) *NullableFieldTransformation {
	return &NullableFieldTransformation{value: val, isSet: true}
}

func (v NullableFieldTransformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldTransformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


