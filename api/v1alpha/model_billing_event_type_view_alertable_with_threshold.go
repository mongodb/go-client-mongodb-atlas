/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// BillingEventTypeViewAlertableWithThreshold Event type that triggers an alert.
type BillingEventTypeViewAlertableWithThreshold string

// List of BillingEventTypeViewAlertableWithThreshold
const (
	BILLINGEVENTTYPEVIEWALERTABLEWITHTHRESHOLD_PENDING_INVOICE_OVER_THRESHOLD BillingEventTypeViewAlertableWithThreshold = "PENDING_INVOICE_OVER_THRESHOLD"
	BILLINGEVENTTYPEVIEWALERTABLEWITHTHRESHOLD_DAILY_BILL_OVER_THRESHOLD BillingEventTypeViewAlertableWithThreshold = "DAILY_BILL_OVER_THRESHOLD"
)

// All allowed values of BillingEventTypeViewAlertableWithThreshold enum
var AllowedBillingEventTypeViewAlertableWithThresholdEnumValues = []BillingEventTypeViewAlertableWithThreshold{
	"PENDING_INVOICE_OVER_THRESHOLD",
	"DAILY_BILL_OVER_THRESHOLD",
}

func (v *BillingEventTypeViewAlertableWithThreshold) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BillingEventTypeViewAlertableWithThreshold(value)
	for _, existing := range AllowedBillingEventTypeViewAlertableWithThresholdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BillingEventTypeViewAlertableWithThreshold", value)
}

// NewBillingEventTypeViewAlertableWithThresholdFromValue returns a pointer to a valid BillingEventTypeViewAlertableWithThreshold
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillingEventTypeViewAlertableWithThresholdFromValue(v string) (*BillingEventTypeViewAlertableWithThreshold, error) {
	ev := BillingEventTypeViewAlertableWithThreshold(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BillingEventTypeViewAlertableWithThreshold: valid values are %v", v, AllowedBillingEventTypeViewAlertableWithThresholdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillingEventTypeViewAlertableWithThreshold) IsValid() bool {
	for _, existing := range AllowedBillingEventTypeViewAlertableWithThresholdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BillingEventTypeViewAlertableWithThreshold value
func (v BillingEventTypeViewAlertableWithThreshold) Ptr() *BillingEventTypeViewAlertableWithThreshold {
	return &v
}

type NullableBillingEventTypeViewAlertableWithThreshold struct {
	value *BillingEventTypeViewAlertableWithThreshold
	isSet bool
}

func (v NullableBillingEventTypeViewAlertableWithThreshold) Get() *BillingEventTypeViewAlertableWithThreshold {
	return v.value
}

func (v *NullableBillingEventTypeViewAlertableWithThreshold) Set(val *BillingEventTypeViewAlertableWithThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingEventTypeViewAlertableWithThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingEventTypeViewAlertableWithThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingEventTypeViewAlertableWithThreshold(val *BillingEventTypeViewAlertableWithThreshold) *NullableBillingEventTypeViewAlertableWithThreshold {
	return &NullableBillingEventTypeViewAlertableWithThreshold{value: val, isSet: true}
}

func (v NullableBillingEventTypeViewAlertableWithThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingEventTypeViewAlertableWithThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

