/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// IdentityProviderUpdate struct for IdentityProviderUpdate
type IdentityProviderUpdate struct {
	// List that contains the domains associated with the identity provider.
	AssociatedDomains []string `json:"associatedDomains,omitempty"`
	// Human-readable label that identifies the identity provider.
	DisplayName *string `json:"displayName,omitempty"`
	// Unique string that identifies the issuer of the SAML Assertion.
	IssuerUri *string `json:"issuerUri,omitempty"`
	PemFileInfo *PemFileInfo `json:"pemFileInfo,omitempty"`
	// SAML Authentication Request Protocol HTTP method binding (POST or REDIRECT) that Federated Authentication uses to send the authentication request.
	RequestBinding *string `json:"requestBinding,omitempty"`
	// Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.
	ResponseSignatureAlgorithm *string `json:"responseSignatureAlgorithm,omitempty"`
	// Flag that indicates whether the identity provider has SSO debug enabled.
	SsoDebugEnabled bool `json:"ssoDebugEnabled"`
	// Unique string that identifies the intended audience of the SAML assertion.
	SsoUrl *string `json:"ssoUrl,omitempty"`
	// String enum that indicates whether the identity provider is active.
	Status *string `json:"status,omitempty"`
}

// NewIdentityProviderUpdate instantiates a new IdentityProviderUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityProviderUpdate() *IdentityProviderUpdate {
	this := IdentityProviderUpdate{}
	return &this
}

// NewIdentityProviderUpdateWithDefaults instantiates a new IdentityProviderUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityProviderUpdateWithDefaults() *IdentityProviderUpdate {
	this := IdentityProviderUpdate{}
	return &this
}

// GetAssociatedDomains returns the AssociatedDomains field value if set, zero value otherwise.
func (o *IdentityProviderUpdate) GetAssociatedDomains() []string {
	if o == nil || o.AssociatedDomains == nil {
		var ret []string
		return ret
	}
	return o.AssociatedDomains
}

// GetAssociatedDomainsOk returns a tuple with the AssociatedDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderUpdate) GetAssociatedDomainsOk() ([]string, bool) {
	if o == nil || o.AssociatedDomains == nil {
		return nil, false
	}
	return o.AssociatedDomains, true
}

// HasAssociatedDomains returns a boolean if a field has been set.
func (o *IdentityProviderUpdate) HasAssociatedDomains() bool {
	if o != nil && o.AssociatedDomains != nil {
		return true
	}

	return false
}

// SetAssociatedDomains gets a reference to the given []string and assigns it to the AssociatedDomains field.
func (o *IdentityProviderUpdate) SetAssociatedDomains(v []string) {
	o.AssociatedDomains = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IdentityProviderUpdate) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderUpdate) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IdentityProviderUpdate) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IdentityProviderUpdate) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetIssuerUri returns the IssuerUri field value if set, zero value otherwise.
func (o *IdentityProviderUpdate) GetIssuerUri() string {
	if o == nil || o.IssuerUri == nil {
		var ret string
		return ret
	}
	return *o.IssuerUri
}

// GetIssuerUriOk returns a tuple with the IssuerUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderUpdate) GetIssuerUriOk() (*string, bool) {
	if o == nil || o.IssuerUri == nil {
		return nil, false
	}
	return o.IssuerUri, true
}

// HasIssuerUri returns a boolean if a field has been set.
func (o *IdentityProviderUpdate) HasIssuerUri() bool {
	if o != nil && o.IssuerUri != nil {
		return true
	}

	return false
}

// SetIssuerUri gets a reference to the given string and assigns it to the IssuerUri field.
func (o *IdentityProviderUpdate) SetIssuerUri(v string) {
	o.IssuerUri = &v
}

// GetPemFileInfo returns the PemFileInfo field value if set, zero value otherwise.
func (o *IdentityProviderUpdate) GetPemFileInfo() PemFileInfo {
	if o == nil || o.PemFileInfo == nil {
		var ret PemFileInfo
		return ret
	}
	return *o.PemFileInfo
}

// GetPemFileInfoOk returns a tuple with the PemFileInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderUpdate) GetPemFileInfoOk() (*PemFileInfo, bool) {
	if o == nil || o.PemFileInfo == nil {
		return nil, false
	}
	return o.PemFileInfo, true
}

// HasPemFileInfo returns a boolean if a field has been set.
func (o *IdentityProviderUpdate) HasPemFileInfo() bool {
	if o != nil && o.PemFileInfo != nil {
		return true
	}

	return false
}

// SetPemFileInfo gets a reference to the given PemFileInfo and assigns it to the PemFileInfo field.
func (o *IdentityProviderUpdate) SetPemFileInfo(v PemFileInfo) {
	o.PemFileInfo = &v
}

// GetRequestBinding returns the RequestBinding field value if set, zero value otherwise.
func (o *IdentityProviderUpdate) GetRequestBinding() string {
	if o == nil || o.RequestBinding == nil {
		var ret string
		return ret
	}
	return *o.RequestBinding
}

// GetRequestBindingOk returns a tuple with the RequestBinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderUpdate) GetRequestBindingOk() (*string, bool) {
	if o == nil || o.RequestBinding == nil {
		return nil, false
	}
	return o.RequestBinding, true
}

// HasRequestBinding returns a boolean if a field has been set.
func (o *IdentityProviderUpdate) HasRequestBinding() bool {
	if o != nil && o.RequestBinding != nil {
		return true
	}

	return false
}

// SetRequestBinding gets a reference to the given string and assigns it to the RequestBinding field.
func (o *IdentityProviderUpdate) SetRequestBinding(v string) {
	o.RequestBinding = &v
}

// GetResponseSignatureAlgorithm returns the ResponseSignatureAlgorithm field value if set, zero value otherwise.
func (o *IdentityProviderUpdate) GetResponseSignatureAlgorithm() string {
	if o == nil || o.ResponseSignatureAlgorithm == nil {
		var ret string
		return ret
	}
	return *o.ResponseSignatureAlgorithm
}

// GetResponseSignatureAlgorithmOk returns a tuple with the ResponseSignatureAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderUpdate) GetResponseSignatureAlgorithmOk() (*string, bool) {
	if o == nil || o.ResponseSignatureAlgorithm == nil {
		return nil, false
	}
	return o.ResponseSignatureAlgorithm, true
}

// HasResponseSignatureAlgorithm returns a boolean if a field has been set.
func (o *IdentityProviderUpdate) HasResponseSignatureAlgorithm() bool {
	if o != nil && o.ResponseSignatureAlgorithm != nil {
		return true
	}

	return false
}

// SetResponseSignatureAlgorithm gets a reference to the given string and assigns it to the ResponseSignatureAlgorithm field.
func (o *IdentityProviderUpdate) SetResponseSignatureAlgorithm(v string) {
	o.ResponseSignatureAlgorithm = &v
}

// GetSsoDebugEnabled returns the SsoDebugEnabled field value
func (o *IdentityProviderUpdate) GetSsoDebugEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SsoDebugEnabled
}

// GetSsoDebugEnabledOk returns a tuple with the SsoDebugEnabled field value
// and a boolean to check if the value has been set.
func (o *IdentityProviderUpdate) GetSsoDebugEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SsoDebugEnabled, true
}

// SetSsoDebugEnabled sets field value
func (o *IdentityProviderUpdate) SetSsoDebugEnabled(v bool) {
	o.SsoDebugEnabled = v
}

// GetSsoUrl returns the SsoUrl field value if set, zero value otherwise.
func (o *IdentityProviderUpdate) GetSsoUrl() string {
	if o == nil || o.SsoUrl == nil {
		var ret string
		return ret
	}
	return *o.SsoUrl
}

// GetSsoUrlOk returns a tuple with the SsoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderUpdate) GetSsoUrlOk() (*string, bool) {
	if o == nil || o.SsoUrl == nil {
		return nil, false
	}
	return o.SsoUrl, true
}

// HasSsoUrl returns a boolean if a field has been set.
func (o *IdentityProviderUpdate) HasSsoUrl() bool {
	if o != nil && o.SsoUrl != nil {
		return true
	}

	return false
}

// SetSsoUrl gets a reference to the given string and assigns it to the SsoUrl field.
func (o *IdentityProviderUpdate) SetSsoUrl(v string) {
	o.SsoUrl = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IdentityProviderUpdate) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderUpdate) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IdentityProviderUpdate) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IdentityProviderUpdate) SetStatus(v string) {
	o.Status = &v
}

func (o IdentityProviderUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssociatedDomains != nil {
		toSerialize["associatedDomains"] = o.AssociatedDomains
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.IssuerUri != nil {
		toSerialize["issuerUri"] = o.IssuerUri
	}
	if o.PemFileInfo != nil {
		toSerialize["pemFileInfo"] = o.PemFileInfo
	}
	if o.RequestBinding != nil {
		toSerialize["requestBinding"] = o.RequestBinding
	}
	if o.ResponseSignatureAlgorithm != nil {
		toSerialize["responseSignatureAlgorithm"] = o.ResponseSignatureAlgorithm
	}
	if true {
		toSerialize["ssoDebugEnabled"] = o.SsoDebugEnabled
	}
	if o.SsoUrl != nil {
		toSerialize["ssoUrl"] = o.SsoUrl
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableIdentityProviderUpdate struct {
	value *IdentityProviderUpdate
	isSet bool
}

func (v NullableIdentityProviderUpdate) Get() *IdentityProviderUpdate {
	return v.value
}

func (v *NullableIdentityProviderUpdate) Set(val *IdentityProviderUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProviderUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProviderUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProviderUpdate(val *IdentityProviderUpdate) *NullableIdentityProviderUpdate {
	return &NullableIdentityProviderUpdate{value: val, isSet: true}
}

func (v NullableIdentityProviderUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProviderUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


