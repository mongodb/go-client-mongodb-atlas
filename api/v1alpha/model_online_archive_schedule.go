/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// OnlineArchiveSchedule - Regular frequency and duration when archiving process occurs.
type OnlineArchiveSchedule struct {
	DailyScheduleView *DailyScheduleView
	DefaultScheduleView *DefaultScheduleView
	MonthlyScheduleView *MonthlyScheduleView
	WeeklyScheduleView *WeeklyScheduleView
}

// DailyScheduleViewAsOnlineArchiveSchedule is a convenience function that returns DailyScheduleView wrapped in OnlineArchiveSchedule
func DailyScheduleViewAsOnlineArchiveSchedule(v *DailyScheduleView) OnlineArchiveSchedule {
	return OnlineArchiveSchedule{
		DailyScheduleView: v,
	}
}

// DefaultScheduleViewAsOnlineArchiveSchedule is a convenience function that returns DefaultScheduleView wrapped in OnlineArchiveSchedule
func DefaultScheduleViewAsOnlineArchiveSchedule(v *DefaultScheduleView) OnlineArchiveSchedule {
	return OnlineArchiveSchedule{
		DefaultScheduleView: v,
	}
}

// MonthlyScheduleViewAsOnlineArchiveSchedule is a convenience function that returns MonthlyScheduleView wrapped in OnlineArchiveSchedule
func MonthlyScheduleViewAsOnlineArchiveSchedule(v *MonthlyScheduleView) OnlineArchiveSchedule {
	return OnlineArchiveSchedule{
		MonthlyScheduleView: v,
	}
}

// WeeklyScheduleViewAsOnlineArchiveSchedule is a convenience function that returns WeeklyScheduleView wrapped in OnlineArchiveSchedule
func WeeklyScheduleViewAsOnlineArchiveSchedule(v *WeeklyScheduleView) OnlineArchiveSchedule {
	return OnlineArchiveSchedule{
		WeeklyScheduleView: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OnlineArchiveSchedule) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'DAILY'
	if jsonDict["type"] == "DAILY" {
		// try to unmarshal JSON data into DailyScheduleView
		err = json.Unmarshal(data, &dst.DailyScheduleView)
		if err == nil {
			return nil // data stored in dst.DailyScheduleView, return on the first match
		} else {
			dst.DailyScheduleView = nil
			return fmt.Errorf("failed to unmarshal OnlineArchiveSchedule as DailyScheduleView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DEFAULT'
	if jsonDict["type"] == "DEFAULT" {
		// try to unmarshal JSON data into DefaultScheduleView
		err = json.Unmarshal(data, &dst.DefaultScheduleView)
		if err == nil {
			return nil // data stored in dst.DefaultScheduleView, return on the first match
		} else {
			dst.DefaultScheduleView = nil
			return fmt.Errorf("failed to unmarshal OnlineArchiveSchedule as DefaultScheduleView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DailyScheduleView'
	if jsonDict["type"] == "DailyScheduleView" {
		// try to unmarshal JSON data into DailyScheduleView
		err = json.Unmarshal(data, &dst.DailyScheduleView)
		if err == nil {
			return nil // data stored in dst.DailyScheduleView, return on the first match
		} else {
			dst.DailyScheduleView = nil
			return fmt.Errorf("failed to unmarshal OnlineArchiveSchedule as DailyScheduleView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DefaultScheduleView'
	if jsonDict["type"] == "DefaultScheduleView" {
		// try to unmarshal JSON data into DefaultScheduleView
		err = json.Unmarshal(data, &dst.DefaultScheduleView)
		if err == nil {
			return nil // data stored in dst.DefaultScheduleView, return on the first match
		} else {
			dst.DefaultScheduleView = nil
			return fmt.Errorf("failed to unmarshal OnlineArchiveSchedule as DefaultScheduleView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MONTHLY'
	if jsonDict["type"] == "MONTHLY" {
		// try to unmarshal JSON data into MonthlyScheduleView
		err = json.Unmarshal(data, &dst.MonthlyScheduleView)
		if err == nil {
			return nil // data stored in dst.MonthlyScheduleView, return on the first match
		} else {
			dst.MonthlyScheduleView = nil
			return fmt.Errorf("failed to unmarshal OnlineArchiveSchedule as MonthlyScheduleView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MonthlyScheduleView'
	if jsonDict["type"] == "MonthlyScheduleView" {
		// try to unmarshal JSON data into MonthlyScheduleView
		err = json.Unmarshal(data, &dst.MonthlyScheduleView)
		if err == nil {
			return nil // data stored in dst.MonthlyScheduleView, return on the first match
		} else {
			dst.MonthlyScheduleView = nil
			return fmt.Errorf("failed to unmarshal OnlineArchiveSchedule as MonthlyScheduleView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'WEEKLY'
	if jsonDict["type"] == "WEEKLY" {
		// try to unmarshal JSON data into WeeklyScheduleView
		err = json.Unmarshal(data, &dst.WeeklyScheduleView)
		if err == nil {
			return nil // data stored in dst.WeeklyScheduleView, return on the first match
		} else {
			dst.WeeklyScheduleView = nil
			return fmt.Errorf("failed to unmarshal OnlineArchiveSchedule as WeeklyScheduleView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'WeeklyScheduleView'
	if jsonDict["type"] == "WeeklyScheduleView" {
		// try to unmarshal JSON data into WeeklyScheduleView
		err = json.Unmarshal(data, &dst.WeeklyScheduleView)
		if err == nil {
			return nil // data stored in dst.WeeklyScheduleView, return on the first match
		} else {
			dst.WeeklyScheduleView = nil
			return fmt.Errorf("failed to unmarshal OnlineArchiveSchedule as WeeklyScheduleView: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OnlineArchiveSchedule) MarshalJSON() ([]byte, error) {
	if src.DailyScheduleView != nil {
		return json.Marshal(&src.DailyScheduleView)
	}

	if src.DefaultScheduleView != nil {
		return json.Marshal(&src.DefaultScheduleView)
	}

	if src.MonthlyScheduleView != nil {
		return json.Marshal(&src.MonthlyScheduleView)
	}

	if src.WeeklyScheduleView != nil {
		return json.Marshal(&src.WeeklyScheduleView)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OnlineArchiveSchedule) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DailyScheduleView != nil {
		return obj.DailyScheduleView
	}

	if obj.DefaultScheduleView != nil {
		return obj.DefaultScheduleView
	}

	if obj.MonthlyScheduleView != nil {
		return obj.MonthlyScheduleView
	}

	if obj.WeeklyScheduleView != nil {
		return obj.WeeklyScheduleView
	}

	// all schemas are nil
	return nil
}

type NullableOnlineArchiveSchedule struct {
	value *OnlineArchiveSchedule
	isSet bool
}

func (v NullableOnlineArchiveSchedule) Get() *OnlineArchiveSchedule {
	return v.value
}

func (v *NullableOnlineArchiveSchedule) Set(val *OnlineArchiveSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableOnlineArchiveSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableOnlineArchiveSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnlineArchiveSchedule(val *OnlineArchiveSchedule) *NullableOnlineArchiveSchedule {
	return &NullableOnlineArchiveSchedule{value: val, isSet: true}
}

func (v NullableOnlineArchiveSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnlineArchiveSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


