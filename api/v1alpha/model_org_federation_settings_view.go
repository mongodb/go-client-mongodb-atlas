/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// OrgFederationSettingsView Details that define how to connect one MongoDB Cloud organization to one federated authentication service.
type OrgFederationSettingsView struct {
	// List of domains associated with the organization's identity provider.
	FederatedDomains []string `json:"federatedDomains,omitempty"`
	// Flag that indicates whether this organization has role mappings configured.
	HasRoleMappings *bool `json:"hasRoleMappings,omitempty"`
	// Unique 24-hexadecimal digit string that identifies this federation.
	Id *string `json:"id,omitempty"`
	// Unique 20-hexadecimal digit string that identifies the identity provider connected to this organization.
	IdentityProviderId *string `json:"identityProviderId,omitempty"`
	// String enum that indicates whether the identity provider is active.
	IdentityProviderStatus *string `json:"identityProviderStatus,omitempty"`
}

// NewOrgFederationSettingsView instantiates a new OrgFederationSettingsView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgFederationSettingsView() *OrgFederationSettingsView {
	this := OrgFederationSettingsView{}
	return &this
}

// NewOrgFederationSettingsViewWithDefaults instantiates a new OrgFederationSettingsView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgFederationSettingsViewWithDefaults() *OrgFederationSettingsView {
	this := OrgFederationSettingsView{}
	return &this
}

// GetFederatedDomains returns the FederatedDomains field value if set, zero value otherwise.
func (o *OrgFederationSettingsView) GetFederatedDomains() []string {
	if o == nil || o.FederatedDomains == nil {
		var ret []string
		return ret
	}
	return o.FederatedDomains
}

// GetFederatedDomainsOk returns a tuple with the FederatedDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgFederationSettingsView) GetFederatedDomainsOk() ([]string, bool) {
	if o == nil || o.FederatedDomains == nil {
		return nil, false
	}
	return o.FederatedDomains, true
}

// HasFederatedDomains returns a boolean if a field has been set.
func (o *OrgFederationSettingsView) HasFederatedDomains() bool {
	if o != nil && o.FederatedDomains != nil {
		return true
	}

	return false
}

// SetFederatedDomains gets a reference to the given []string and assigns it to the FederatedDomains field.
func (o *OrgFederationSettingsView) SetFederatedDomains(v []string) {
	o.FederatedDomains = v
}

// GetHasRoleMappings returns the HasRoleMappings field value if set, zero value otherwise.
func (o *OrgFederationSettingsView) GetHasRoleMappings() bool {
	if o == nil || o.HasRoleMappings == nil {
		var ret bool
		return ret
	}
	return *o.HasRoleMappings
}

// GetHasRoleMappingsOk returns a tuple with the HasRoleMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgFederationSettingsView) GetHasRoleMappingsOk() (*bool, bool) {
	if o == nil || o.HasRoleMappings == nil {
		return nil, false
	}
	return o.HasRoleMappings, true
}

// HasHasRoleMappings returns a boolean if a field has been set.
func (o *OrgFederationSettingsView) HasHasRoleMappings() bool {
	if o != nil && o.HasRoleMappings != nil {
		return true
	}

	return false
}

// SetHasRoleMappings gets a reference to the given bool and assigns it to the HasRoleMappings field.
func (o *OrgFederationSettingsView) SetHasRoleMappings(v bool) {
	o.HasRoleMappings = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrgFederationSettingsView) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgFederationSettingsView) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrgFederationSettingsView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OrgFederationSettingsView) SetId(v string) {
	o.Id = &v
}

// GetIdentityProviderId returns the IdentityProviderId field value if set, zero value otherwise.
func (o *OrgFederationSettingsView) GetIdentityProviderId() string {
	if o == nil || o.IdentityProviderId == nil {
		var ret string
		return ret
	}
	return *o.IdentityProviderId
}

// GetIdentityProviderIdOk returns a tuple with the IdentityProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgFederationSettingsView) GetIdentityProviderIdOk() (*string, bool) {
	if o == nil || o.IdentityProviderId == nil {
		return nil, false
	}
	return o.IdentityProviderId, true
}

// HasIdentityProviderId returns a boolean if a field has been set.
func (o *OrgFederationSettingsView) HasIdentityProviderId() bool {
	if o != nil && o.IdentityProviderId != nil {
		return true
	}

	return false
}

// SetIdentityProviderId gets a reference to the given string and assigns it to the IdentityProviderId field.
func (o *OrgFederationSettingsView) SetIdentityProviderId(v string) {
	o.IdentityProviderId = &v
}

// GetIdentityProviderStatus returns the IdentityProviderStatus field value if set, zero value otherwise.
func (o *OrgFederationSettingsView) GetIdentityProviderStatus() string {
	if o == nil || o.IdentityProviderStatus == nil {
		var ret string
		return ret
	}
	return *o.IdentityProviderStatus
}

// GetIdentityProviderStatusOk returns a tuple with the IdentityProviderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgFederationSettingsView) GetIdentityProviderStatusOk() (*string, bool) {
	if o == nil || o.IdentityProviderStatus == nil {
		return nil, false
	}
	return o.IdentityProviderStatus, true
}

// HasIdentityProviderStatus returns a boolean if a field has been set.
func (o *OrgFederationSettingsView) HasIdentityProviderStatus() bool {
	if o != nil && o.IdentityProviderStatus != nil {
		return true
	}

	return false
}

// SetIdentityProviderStatus gets a reference to the given string and assigns it to the IdentityProviderStatus field.
func (o *OrgFederationSettingsView) SetIdentityProviderStatus(v string) {
	o.IdentityProviderStatus = &v
}

func (o OrgFederationSettingsView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FederatedDomains != nil {
		toSerialize["federatedDomains"] = o.FederatedDomains
	}
	if o.HasRoleMappings != nil {
		toSerialize["hasRoleMappings"] = o.HasRoleMappings
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IdentityProviderId != nil {
		toSerialize["identityProviderId"] = o.IdentityProviderId
	}
	if o.IdentityProviderStatus != nil {
		toSerialize["identityProviderStatus"] = o.IdentityProviderStatus
	}
	return json.Marshal(toSerialize)
}

type NullableOrgFederationSettingsView struct {
	value *OrgFederationSettingsView
	isSet bool
}

func (v NullableOrgFederationSettingsView) Get() *OrgFederationSettingsView {
	return v.value
}

func (v *NullableOrgFederationSettingsView) Set(val *OrgFederationSettingsView) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgFederationSettingsView) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgFederationSettingsView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgFederationSettingsView(val *OrgFederationSettingsView) *NullableOrgFederationSettingsView {
	return &NullableOrgFederationSettingsView{value: val, isSet: true}
}

func (v NullableOrgFederationSettingsView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgFederationSettingsView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


