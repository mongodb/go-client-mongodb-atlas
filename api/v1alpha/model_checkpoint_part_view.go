/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the CheckpointPartView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckpointPartView{}

// CheckpointPartView Metadata contained in one document that describes the complete snapshot taken for this node.
type CheckpointPartView struct {
	// Human-readable label that identifies the replica set to which this checkpoint applies.
	ReplicaSetName *string `json:"replicaSetName,omitempty"`
	// Human-readable label that identifies the shard to which this checkpoint applies.
	ShardName *string `json:"shardName,omitempty"`
	// Flag that indicates whether the token exists.
	TokenDiscovered *bool `json:"tokenDiscovered,omitempty"`
	TokenTimestamp *BSONTimestampView `json:"tokenTimestamp,omitempty"`
	// Human-readable label that identifies the type of host that the part represents.
	TypeName *string `json:"typeName,omitempty"`
}

// NewCheckpointPartView instantiates a new CheckpointPartView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckpointPartView() *CheckpointPartView {
	this := CheckpointPartView{}
	return &this
}

// NewCheckpointPartViewWithDefaults instantiates a new CheckpointPartView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckpointPartViewWithDefaults() *CheckpointPartView {
	this := CheckpointPartView{}
	return &this
}

// GetReplicaSetName returns the ReplicaSetName field value if set, zero value otherwise.
func (o *CheckpointPartView) GetReplicaSetName() string {
	if o == nil || IsNil(o.ReplicaSetName) {
		var ret string
		return ret
	}
	return *o.ReplicaSetName
}

// GetReplicaSetNameOk returns a tuple with the ReplicaSetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckpointPartView) GetReplicaSetNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicaSetName) {
		return nil, false
	}
	return o.ReplicaSetName, true
}

// HasReplicaSetName returns a boolean if a field has been set.
func (o *CheckpointPartView) HasReplicaSetName() bool {
	if o != nil && !IsNil(o.ReplicaSetName) {
		return true
	}

	return false
}

// SetReplicaSetName gets a reference to the given string and assigns it to the ReplicaSetName field.
func (o *CheckpointPartView) SetReplicaSetName(v string) {
	o.ReplicaSetName = &v
}

// GetShardName returns the ShardName field value if set, zero value otherwise.
func (o *CheckpointPartView) GetShardName() string {
	if o == nil || IsNil(o.ShardName) {
		var ret string
		return ret
	}
	return *o.ShardName
}

// GetShardNameOk returns a tuple with the ShardName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckpointPartView) GetShardNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShardName) {
		return nil, false
	}
	return o.ShardName, true
}

// HasShardName returns a boolean if a field has been set.
func (o *CheckpointPartView) HasShardName() bool {
	if o != nil && !IsNil(o.ShardName) {
		return true
	}

	return false
}

// SetShardName gets a reference to the given string and assigns it to the ShardName field.
func (o *CheckpointPartView) SetShardName(v string) {
	o.ShardName = &v
}

// GetTokenDiscovered returns the TokenDiscovered field value if set, zero value otherwise.
func (o *CheckpointPartView) GetTokenDiscovered() bool {
	if o == nil || IsNil(o.TokenDiscovered) {
		var ret bool
		return ret
	}
	return *o.TokenDiscovered
}

// GetTokenDiscoveredOk returns a tuple with the TokenDiscovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckpointPartView) GetTokenDiscoveredOk() (*bool, bool) {
	if o == nil || IsNil(o.TokenDiscovered) {
		return nil, false
	}
	return o.TokenDiscovered, true
}

// HasTokenDiscovered returns a boolean if a field has been set.
func (o *CheckpointPartView) HasTokenDiscovered() bool {
	if o != nil && !IsNil(o.TokenDiscovered) {
		return true
	}

	return false
}

// SetTokenDiscovered gets a reference to the given bool and assigns it to the TokenDiscovered field.
func (o *CheckpointPartView) SetTokenDiscovered(v bool) {
	o.TokenDiscovered = &v
}

// GetTokenTimestamp returns the TokenTimestamp field value if set, zero value otherwise.
func (o *CheckpointPartView) GetTokenTimestamp() BSONTimestampView {
	if o == nil || IsNil(o.TokenTimestamp) {
		var ret BSONTimestampView
		return ret
	}
	return *o.TokenTimestamp
}

// GetTokenTimestampOk returns a tuple with the TokenTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckpointPartView) GetTokenTimestampOk() (*BSONTimestampView, bool) {
	if o == nil || IsNil(o.TokenTimestamp) {
		return nil, false
	}
	return o.TokenTimestamp, true
}

// HasTokenTimestamp returns a boolean if a field has been set.
func (o *CheckpointPartView) HasTokenTimestamp() bool {
	if o != nil && !IsNil(o.TokenTimestamp) {
		return true
	}

	return false
}

// SetTokenTimestamp gets a reference to the given BSONTimestampView and assigns it to the TokenTimestamp field.
func (o *CheckpointPartView) SetTokenTimestamp(v BSONTimestampView) {
	o.TokenTimestamp = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *CheckpointPartView) GetTypeName() string {
	if o == nil || IsNil(o.TypeName) {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckpointPartView) GetTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.TypeName) {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *CheckpointPartView) HasTypeName() bool {
	if o != nil && !IsNil(o.TypeName) {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *CheckpointPartView) SetTypeName(v string) {
	o.TypeName = &v
}

func (o CheckpointPartView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckpointPartView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: replicaSetName is readOnly
	// skip: shardName is readOnly
	// skip: tokenDiscovered is readOnly
	if !IsNil(o.TokenTimestamp) {
		toSerialize["tokenTimestamp"] = o.TokenTimestamp
	}
	// skip: typeName is readOnly
	return toSerialize, nil
}

type NullableCheckpointPartView struct {
	value *CheckpointPartView
	isSet bool
}

func (v NullableCheckpointPartView) Get() *CheckpointPartView {
	return v.value
}

func (v *NullableCheckpointPartView) Set(val *CheckpointPartView) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckpointPartView) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckpointPartView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckpointPartView(val *CheckpointPartView) *NullableCheckpointPartView {
	return &NullableCheckpointPartView{value: val, isSet: true}
}

func (v NullableCheckpointPartView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckpointPartView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


