/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the FTSMetricsView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FTSMetricsView{}

// FTSMetricsView struct for FTSMetricsView
type FTSMetricsView struct {
	// Unique 24-hexadecimal digit string that identifies the project.
	GroupId string `json:"groupId"`
	// List that contains all host compute, memory, and storage utilization dedicated to Atlas Search when MongoDB Atlas received this request.
	HardwareMetrics []FTSMetricView `json:"hardwareMetrics,omitempty"`
	// List that contains all performance and utilization measurements that Atlas Search index performed by the time MongoDB Atlas received this request.
	IndexMetrics []FTSMetricView `json:"indexMetrics,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links,omitempty"`
	// Hostname and port that identifies the process.
	ProcessId string `json:"processId"`
	// List that contains all available Atlas Search status metrics when MongoDB Atlas received this request.
	StatusMetrics []FTSMetricView `json:"statusMetrics,omitempty"`
}

// NewFTSMetricsView instantiates a new FTSMetricsView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFTSMetricsView(groupId string, processId string) *FTSMetricsView {
	this := FTSMetricsView{}
	this.GroupId = groupId
	this.ProcessId = processId
	return &this
}

// NewFTSMetricsViewWithDefaults instantiates a new FTSMetricsView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFTSMetricsViewWithDefaults() *FTSMetricsView {
	this := FTSMetricsView{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *FTSMetricsView) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *FTSMetricsView) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *FTSMetricsView) SetGroupId(v string) {
	o.GroupId = v
}

// GetHardwareMetrics returns the HardwareMetrics field value if set, zero value otherwise.
func (o *FTSMetricsView) GetHardwareMetrics() []FTSMetricView {
	if o == nil || IsNil(o.HardwareMetrics) {
		var ret []FTSMetricView
		return ret
	}
	return o.HardwareMetrics
}

// GetHardwareMetricsOk returns a tuple with the HardwareMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FTSMetricsView) GetHardwareMetricsOk() ([]FTSMetricView, bool) {
	if o == nil || IsNil(o.HardwareMetrics) {
		return nil, false
	}
	return o.HardwareMetrics, true
}

// HasHardwareMetrics returns a boolean if a field has been set.
func (o *FTSMetricsView) HasHardwareMetrics() bool {
	if o != nil && !IsNil(o.HardwareMetrics) {
		return true
	}

	return false
}

// SetHardwareMetrics gets a reference to the given []FTSMetricView and assigns it to the HardwareMetrics field.
func (o *FTSMetricsView) SetHardwareMetrics(v []FTSMetricView) {
	o.HardwareMetrics = v
}

// GetIndexMetrics returns the IndexMetrics field value if set, zero value otherwise.
func (o *FTSMetricsView) GetIndexMetrics() []FTSMetricView {
	if o == nil || IsNil(o.IndexMetrics) {
		var ret []FTSMetricView
		return ret
	}
	return o.IndexMetrics
}

// GetIndexMetricsOk returns a tuple with the IndexMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FTSMetricsView) GetIndexMetricsOk() ([]FTSMetricView, bool) {
	if o == nil || IsNil(o.IndexMetrics) {
		return nil, false
	}
	return o.IndexMetrics, true
}

// HasIndexMetrics returns a boolean if a field has been set.
func (o *FTSMetricsView) HasIndexMetrics() bool {
	if o != nil && !IsNil(o.IndexMetrics) {
		return true
	}

	return false
}

// SetIndexMetrics gets a reference to the given []FTSMetricView and assigns it to the IndexMetrics field.
func (o *FTSMetricsView) SetIndexMetrics(v []FTSMetricView) {
	o.IndexMetrics = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *FTSMetricsView) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FTSMetricsView) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *FTSMetricsView) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *FTSMetricsView) SetLinks(v []Link) {
	o.Links = v
}

// GetProcessId returns the ProcessId field value
func (o *FTSMetricsView) GetProcessId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessId
}

// GetProcessIdOk returns a tuple with the ProcessId field value
// and a boolean to check if the value has been set.
func (o *FTSMetricsView) GetProcessIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessId, true
}

// SetProcessId sets field value
func (o *FTSMetricsView) SetProcessId(v string) {
	o.ProcessId = v
}

// GetStatusMetrics returns the StatusMetrics field value if set, zero value otherwise.
func (o *FTSMetricsView) GetStatusMetrics() []FTSMetricView {
	if o == nil || IsNil(o.StatusMetrics) {
		var ret []FTSMetricView
		return ret
	}
	return o.StatusMetrics
}

// GetStatusMetricsOk returns a tuple with the StatusMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FTSMetricsView) GetStatusMetricsOk() ([]FTSMetricView, bool) {
	if o == nil || IsNil(o.StatusMetrics) {
		return nil, false
	}
	return o.StatusMetrics, true
}

// HasStatusMetrics returns a boolean if a field has been set.
func (o *FTSMetricsView) HasStatusMetrics() bool {
	if o != nil && !IsNil(o.StatusMetrics) {
		return true
	}

	return false
}

// SetStatusMetrics gets a reference to the given []FTSMetricView and assigns it to the StatusMetrics field.
func (o *FTSMetricsView) SetStatusMetrics(v []FTSMetricView) {
	o.StatusMetrics = v
}

func (o FTSMetricsView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FTSMetricsView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: groupId is readOnly
	// skip: hardwareMetrics is readOnly
	// skip: indexMetrics is readOnly
	// skip: links is readOnly
	// skip: processId is readOnly
	// skip: statusMetrics is readOnly
	return toSerialize, nil
}

type NullableFTSMetricsView struct {
	value *FTSMetricsView
	isSet bool
}

func (v NullableFTSMetricsView) Get() *FTSMetricsView {
	return v.value
}

func (v *NullableFTSMetricsView) Set(val *FTSMetricsView) {
	v.value = val
	v.isSet = true
}

func (v NullableFTSMetricsView) IsSet() bool {
	return v.isSet
}

func (v *NullableFTSMetricsView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFTSMetricsView(val *FTSMetricsView) *NullableFTSMetricsView {
	return &NullableFTSMetricsView{value: val, isSet: true}
}

func (v NullableFTSMetricsView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFTSMetricsView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


