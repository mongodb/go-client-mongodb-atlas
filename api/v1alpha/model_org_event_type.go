/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// OrgEventType Unique identifier of event type.
type OrgEventType string

// List of OrgEventType
const (
	ORGEVENTTYPE_ORG_CREATED OrgEventType = "ORG_CREATED"
	ORGEVENTTYPE_ORG_CREDIT_CARD_ADDED OrgEventType = "ORG_CREDIT_CARD_ADDED"
	ORGEVENTTYPE_ORG_CREDIT_CARD_UPDATED OrgEventType = "ORG_CREDIT_CARD_UPDATED"
	ORGEVENTTYPE_ORG_CREDIT_CARD_CURRENT OrgEventType = "ORG_CREDIT_CARD_CURRENT"
	ORGEVENTTYPE_ORG_CREDIT_CARD_ABOUT_TO_EXPIRE OrgEventType = "ORG_CREDIT_CARD_ABOUT_TO_EXPIRE"
	ORGEVENTTYPE_ORG_PAYPAL_LINKED OrgEventType = "ORG_PAYPAL_LINKED"
	ORGEVENTTYPE_ORG_PAYPAL_UPDATED OrgEventType = "ORG_PAYPAL_UPDATED"
	ORGEVENTTYPE_ORG_PAYPAL_CANCELLED OrgEventType = "ORG_PAYPAL_CANCELLED"
	ORGEVENTTYPE_ORG_OVERRIDE_PAYMENT_METHOD_ADDED OrgEventType = "ORG_OVERRIDE_PAYMENT_METHOD_ADDED"
	ORGEVENTTYPE_ORG_ACTIVATED OrgEventType = "ORG_ACTIVATED"
	ORGEVENTTYPE_ORG_TEMPORARILY_ACTIVATED OrgEventType = "ORG_TEMPORARILY_ACTIVATED"
	ORGEVENTTYPE_ORG_SUSPENDED OrgEventType = "ORG_SUSPENDED"
	ORGEVENTTYPE_ORG_ADMIN_SUSPENDED OrgEventType = "ORG_ADMIN_SUSPENDED"
	ORGEVENTTYPE_ORG_ADMIN_LOCKED OrgEventType = "ORG_ADMIN_LOCKED"
	ORGEVENTTYPE_ORG_CLUSTERS_DELETED OrgEventType = "ORG_CLUSTERS_DELETED"
	ORGEVENTTYPE_ORG_CLUSTERS_PAUSED OrgEventType = "ORG_CLUSTERS_PAUSED"
	ORGEVENTTYPE_ORG_IP_ACCESS_LIST_DELETED OrgEventType = "ORG_IP_ACCESS_LIST_DELETED"
	ORGEVENTTYPE_ORG_LOCKED OrgEventType = "ORG_LOCKED"
	ORGEVENTTYPE_ORG_COMPANY_NAME_OFAC_HIT OrgEventType = "ORG_COMPANY_NAME_OFAC_HIT"
	ORGEVENTTYPE_ORG_EMBARGO_CONFIRMED OrgEventType = "ORG_EMBARGO_CONFIRMED"
	ORGEVENTTYPE_ORG_UNEMBARGOED OrgEventType = "ORG_UNEMBARGOED"
	ORGEVENTTYPE_ORG_DELETED OrgEventType = "ORG_DELETED"
	ORGEVENTTYPE_ORG_RENAMED OrgEventType = "ORG_RENAMED"
	ORGEVENTTYPE_ALL_ORG_USERS_HAVE_MFA OrgEventType = "ALL_ORG_USERS_HAVE_MFA"
	ORGEVENTTYPE_ORG_USERS_WITHOUT_MFA OrgEventType = "ORG_USERS_WITHOUT_MFA"
	ORGEVENTTYPE_ORG_INVOICE_UNDER_THRESHOLD OrgEventType = "ORG_INVOICE_UNDER_THRESHOLD"
	ORGEVENTTYPE_ORG_INVOICE_OVER_THRESHOLD OrgEventType = "ORG_INVOICE_OVER_THRESHOLD"
	ORGEVENTTYPE_ORG_DAILY_BILL_UNDER_THRESHOLD OrgEventType = "ORG_DAILY_BILL_UNDER_THRESHOLD"
	ORGEVENTTYPE_ORG_DAILY_BILL_OVER_THRESHOLD OrgEventType = "ORG_DAILY_BILL_OVER_THRESHOLD"
	ORGEVENTTYPE_ORG_GROUP_CHARGES_UNDER_THRESHOLD OrgEventType = "ORG_GROUP_CHARGES_UNDER_THRESHOLD"
	ORGEVENTTYPE_ORG_GROUP_CHARGES_OVER_THRESHOLD OrgEventType = "ORG_GROUP_CHARGES_OVER_THRESHOLD"
	ORGEVENTTYPE_ORG_TWO_FACTOR_AUTH_REQUIRED OrgEventType = "ORG_TWO_FACTOR_AUTH_REQUIRED"
	ORGEVENTTYPE_ORG_TWO_FACTOR_AUTH_OPTIONAL OrgEventType = "ORG_TWO_FACTOR_AUTH_OPTIONAL"
	ORGEVENTTYPE_ORG_PUBLIC_API_ACCESS_LIST_REQUIRED OrgEventType = "ORG_PUBLIC_API_ACCESS_LIST_REQUIRED"
	ORGEVENTTYPE_ORG_PUBLIC_API_ACCESS_LIST_NOT_REQUIRED OrgEventType = "ORG_PUBLIC_API_ACCESS_LIST_NOT_REQUIRED"
	ORGEVENTTYPE_ORG_EMPLOYEE_ACCESS_RESTRICTED OrgEventType = "ORG_EMPLOYEE_ACCESS_RESTRICTED"
	ORGEVENTTYPE_ORG_EMPLOYEE_ACCESS_UNRESTRICTED OrgEventType = "ORG_EMPLOYEE_ACCESS_UNRESTRICTED"
	ORGEVENTTYPE_ORG_SFDC_ACCOUNT_ID_CHANGED OrgEventType = "ORG_SFDC_ACCOUNT_ID_CHANGED"
	ORGEVENTTYPE_ORG_CONNECTED_TO_MLAB OrgEventType = "ORG_CONNECTED_TO_MLAB"
	ORGEVENTTYPE_ORG_DISCONNECTED_FROM_MLAB OrgEventType = "ORG_DISCONNECTED_FROM_MLAB"
	ORGEVENTTYPE_ORG_IDP_CERTIFICATE_CURRENT OrgEventType = "ORG_IDP_CERTIFICATE_CURRENT"
	ORGEVENTTYPE_ORG_IDP_CERTIFICATE_ABOUT_TO_EXPIRE OrgEventType = "ORG_IDP_CERTIFICATE_ABOUT_TO_EXPIRE"
	ORGEVENTTYPE_ORG_CONNECTED_TO_VERCEL OrgEventType = "ORG_CONNECTED_TO_VERCEL"
	ORGEVENTTYPE_ORG_DISCONNECTED_FROM_VERCEL OrgEventType = "ORG_DISCONNECTED_FROM_VERCEL"
	ORGEVENTTYPE_ORG_CONNECTION_UNINSTALLED_FROM_VERCEL OrgEventType = "ORG_CONNECTION_UNINSTALLED_FROM_VERCEL"
	ORGEVENTTYPE_ORG_UI_IP_ACCESS_LIST_ENABLED OrgEventType = "ORG_UI_IP_ACCESS_LIST_ENABLED"
	ORGEVENTTYPE_ORG_UI_IP_ACCESS_LIST_DISABLED OrgEventType = "ORG_UI_IP_ACCESS_LIST_DISABLED"
	ORGEVENTTYPE_ORG_CREATED_UI_IP_ACCESS_LIST_ENTRY OrgEventType = "ORG_CREATED_UI_IP_ACCESS_LIST_ENTRY"
	ORGEVENTTYPE_ORG_UPDATED_UI_IP_ACCESS_LIST_ENTRY OrgEventType = "ORG_UPDATED_UI_IP_ACCESS_LIST_ENTRY"
	ORGEVENTTYPE_ORG_DELETED_UI_IP_ACCESS_LIST_ENTRY OrgEventType = "ORG_DELETED_UI_IP_ACCESS_LIST_ENTRY"
	ORGEVENTTYPE_ORG_DELETED_MULTIPLE_UI_IP_ACCESS_LIST_ENTRIES OrgEventType = "ORG_DELETED_MULTIPLE_UI_IP_ACCESS_LIST_ENTRIES"
)

// All allowed values of OrgEventType enum
var AllowedOrgEventTypeEnumValues = []OrgEventType{
	"ORG_CREATED",
	"ORG_CREDIT_CARD_ADDED",
	"ORG_CREDIT_CARD_UPDATED",
	"ORG_CREDIT_CARD_CURRENT",
	"ORG_CREDIT_CARD_ABOUT_TO_EXPIRE",
	"ORG_PAYPAL_LINKED",
	"ORG_PAYPAL_UPDATED",
	"ORG_PAYPAL_CANCELLED",
	"ORG_OVERRIDE_PAYMENT_METHOD_ADDED",
	"ORG_ACTIVATED",
	"ORG_TEMPORARILY_ACTIVATED",
	"ORG_SUSPENDED",
	"ORG_ADMIN_SUSPENDED",
	"ORG_ADMIN_LOCKED",
	"ORG_CLUSTERS_DELETED",
	"ORG_CLUSTERS_PAUSED",
	"ORG_IP_ACCESS_LIST_DELETED",
	"ORG_LOCKED",
	"ORG_COMPANY_NAME_OFAC_HIT",
	"ORG_EMBARGO_CONFIRMED",
	"ORG_UNEMBARGOED",
	"ORG_DELETED",
	"ORG_RENAMED",
	"ALL_ORG_USERS_HAVE_MFA",
	"ORG_USERS_WITHOUT_MFA",
	"ORG_INVOICE_UNDER_THRESHOLD",
	"ORG_INVOICE_OVER_THRESHOLD",
	"ORG_DAILY_BILL_UNDER_THRESHOLD",
	"ORG_DAILY_BILL_OVER_THRESHOLD",
	"ORG_GROUP_CHARGES_UNDER_THRESHOLD",
	"ORG_GROUP_CHARGES_OVER_THRESHOLD",
	"ORG_TWO_FACTOR_AUTH_REQUIRED",
	"ORG_TWO_FACTOR_AUTH_OPTIONAL",
	"ORG_PUBLIC_API_ACCESS_LIST_REQUIRED",
	"ORG_PUBLIC_API_ACCESS_LIST_NOT_REQUIRED",
	"ORG_EMPLOYEE_ACCESS_RESTRICTED",
	"ORG_EMPLOYEE_ACCESS_UNRESTRICTED",
	"ORG_SFDC_ACCOUNT_ID_CHANGED",
	"ORG_CONNECTED_TO_MLAB",
	"ORG_DISCONNECTED_FROM_MLAB",
	"ORG_IDP_CERTIFICATE_CURRENT",
	"ORG_IDP_CERTIFICATE_ABOUT_TO_EXPIRE",
	"ORG_CONNECTED_TO_VERCEL",
	"ORG_DISCONNECTED_FROM_VERCEL",
	"ORG_CONNECTION_UNINSTALLED_FROM_VERCEL",
	"ORG_UI_IP_ACCESS_LIST_ENABLED",
	"ORG_UI_IP_ACCESS_LIST_DISABLED",
	"ORG_CREATED_UI_IP_ACCESS_LIST_ENTRY",
	"ORG_UPDATED_UI_IP_ACCESS_LIST_ENTRY",
	"ORG_DELETED_UI_IP_ACCESS_LIST_ENTRY",
	"ORG_DELETED_MULTIPLE_UI_IP_ACCESS_LIST_ENTRIES",
}

func (v *OrgEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrgEventType(value)
	for _, existing := range AllowedOrgEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrgEventType", value)
}

// NewOrgEventTypeFromValue returns a pointer to a valid OrgEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrgEventTypeFromValue(v string) (*OrgEventType, error) {
	ev := OrgEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrgEventType: valid values are %v", v, AllowedOrgEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrgEventType) IsValid() bool {
	for _, existing := range AllowedOrgEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrgEventType value
func (v OrgEventType) Ptr() *OrgEventType {
	return &v
}

type NullableOrgEventType struct {
	value *OrgEventType
	isSet bool
}

func (v NullableOrgEventType) Get() *OrgEventType {
	return v.value
}

func (v *NullableOrgEventType) Set(val *OrgEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgEventType(val *OrgEventType) *NullableOrgEventType {
	return &NullableOrgEventType{value: val, isSet: true}
}

func (v NullableOrgEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

