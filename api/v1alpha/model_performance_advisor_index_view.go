/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the PerformanceAdvisorIndexView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PerformanceAdvisorIndexView{}

// PerformanceAdvisorIndexView struct for PerformanceAdvisorIndexView
type PerformanceAdvisorIndexView struct {
	// The average size of an object in the collection of this index.
	AvgObjSize *float64 `json:"avgObjSize,omitempty"`
	// Unique 24-hexadecimal digit string that identifies this index.
	Id *string `json:"id,omitempty"`
	// List that contains unique 24-hexadecimal character string that identifies the query shapes in this response that the Performance Advisor suggests.
	Impact []string `json:"impact,omitempty"`
	// List that contains documents that specify a key in the index and its sort order.
	Index []map[string]string `json:"index,omitempty"`
	// Human-readable label that identifies the namespace on the specified host. The resource expresses this parameter value as `<database>.<collection>`.
	Namespace *string `json:"namespace,omitempty"`
	// Estimated performance improvement that the suggested index provides. This value corresponds to **Impact** in the Performance Advisor user interface.
	Weight *float64 `json:"weight,omitempty"`
}

// NewPerformanceAdvisorIndexView instantiates a new PerformanceAdvisorIndexView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerformanceAdvisorIndexView() *PerformanceAdvisorIndexView {
	this := PerformanceAdvisorIndexView{}
	return &this
}

// NewPerformanceAdvisorIndexViewWithDefaults instantiates a new PerformanceAdvisorIndexView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerformanceAdvisorIndexViewWithDefaults() *PerformanceAdvisorIndexView {
	this := PerformanceAdvisorIndexView{}
	return &this
}

// GetAvgObjSize returns the AvgObjSize field value if set, zero value otherwise.
func (o *PerformanceAdvisorIndexView) GetAvgObjSize() float64 {
	if o == nil || IsNil(o.AvgObjSize) {
		var ret float64
		return ret
	}
	return *o.AvgObjSize
}

// GetAvgObjSizeOk returns a tuple with the AvgObjSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceAdvisorIndexView) GetAvgObjSizeOk() (*float64, bool) {
	if o == nil || IsNil(o.AvgObjSize) {
		return nil, false
	}
	return o.AvgObjSize, true
}

// HasAvgObjSize returns a boolean if a field has been set.
func (o *PerformanceAdvisorIndexView) HasAvgObjSize() bool {
	if o != nil && !IsNil(o.AvgObjSize) {
		return true
	}

	return false
}

// SetAvgObjSize gets a reference to the given float64 and assigns it to the AvgObjSize field.
func (o *PerformanceAdvisorIndexView) SetAvgObjSize(v float64) {
	o.AvgObjSize = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PerformanceAdvisorIndexView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceAdvisorIndexView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PerformanceAdvisorIndexView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PerformanceAdvisorIndexView) SetId(v string) {
	o.Id = &v
}

// GetImpact returns the Impact field value if set, zero value otherwise.
func (o *PerformanceAdvisorIndexView) GetImpact() []string {
	if o == nil || IsNil(o.Impact) {
		var ret []string
		return ret
	}
	return o.Impact
}

// GetImpactOk returns a tuple with the Impact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceAdvisorIndexView) GetImpactOk() ([]string, bool) {
	if o == nil || IsNil(o.Impact) {
		return nil, false
	}
	return o.Impact, true
}

// HasImpact returns a boolean if a field has been set.
func (o *PerformanceAdvisorIndexView) HasImpact() bool {
	if o != nil && !IsNil(o.Impact) {
		return true
	}

	return false
}

// SetImpact gets a reference to the given []string and assigns it to the Impact field.
func (o *PerformanceAdvisorIndexView) SetImpact(v []string) {
	o.Impact = v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *PerformanceAdvisorIndexView) GetIndex() []map[string]string {
	if o == nil || IsNil(o.Index) {
		var ret []map[string]string
		return ret
	}
	return o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceAdvisorIndexView) GetIndexOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *PerformanceAdvisorIndexView) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given []map[string]string and assigns it to the Index field.
func (o *PerformanceAdvisorIndexView) SetIndex(v []map[string]string) {
	o.Index = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *PerformanceAdvisorIndexView) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceAdvisorIndexView) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *PerformanceAdvisorIndexView) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *PerformanceAdvisorIndexView) SetNamespace(v string) {
	o.Namespace = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *PerformanceAdvisorIndexView) GetWeight() float64 {
	if o == nil || IsNil(o.Weight) {
		var ret float64
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceAdvisorIndexView) GetWeightOk() (*float64, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *PerformanceAdvisorIndexView) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float64 and assigns it to the Weight field.
func (o *PerformanceAdvisorIndexView) SetWeight(v float64) {
	o.Weight = &v
}

func (o PerformanceAdvisorIndexView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PerformanceAdvisorIndexView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: avgObjSize is readOnly
	// skip: id is readOnly
	// skip: impact is readOnly
	// skip: index is readOnly
	// skip: namespace is readOnly
	// skip: weight is readOnly
	return toSerialize, nil
}

type NullablePerformanceAdvisorIndexView struct {
	value *PerformanceAdvisorIndexView
	isSet bool
}

func (v NullablePerformanceAdvisorIndexView) Get() *PerformanceAdvisorIndexView {
	return v.value
}

func (v *NullablePerformanceAdvisorIndexView) Set(val *PerformanceAdvisorIndexView) {
	v.value = val
	v.isSet = true
}

func (v NullablePerformanceAdvisorIndexView) IsSet() bool {
	return v.isSet
}

func (v *NullablePerformanceAdvisorIndexView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerformanceAdvisorIndexView(val *PerformanceAdvisorIndexView) *NullablePerformanceAdvisorIndexView {
	return &NullablePerformanceAdvisorIndexView{value: val, isSet: true}
}

func (v NullablePerformanceAdvisorIndexView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerformanceAdvisorIndexView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


