/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// GCPProviderSettingsAllOf struct for GCPProviderSettingsAllOf
type GCPProviderSettingsAllOf struct {
	AutoScaling *GCPAutoScaling `json:"autoScaling,omitempty"`
	// Cluster tier, with a default storage and memory capacity, that applies to all the data-bearing hosts in your cluster.
	InstanceSizeName *string `json:"instanceSizeName,omitempty"`
	// Google Compute Regions.
	RegionName *string `json:"regionName,omitempty"`
}

// NewGCPProviderSettingsAllOf instantiates a new GCPProviderSettingsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGCPProviderSettingsAllOf() *GCPProviderSettingsAllOf {
	this := GCPProviderSettingsAllOf{}
	return &this
}

// NewGCPProviderSettingsAllOfWithDefaults instantiates a new GCPProviderSettingsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGCPProviderSettingsAllOfWithDefaults() *GCPProviderSettingsAllOf {
	this := GCPProviderSettingsAllOf{}
	return &this
}

// GetAutoScaling returns the AutoScaling field value if set, zero value otherwise.
func (o *GCPProviderSettingsAllOf) GetAutoScaling() GCPAutoScaling {
	if o == nil || o.AutoScaling == nil {
		var ret GCPAutoScaling
		return ret
	}
	return *o.AutoScaling
}

// GetAutoScalingOk returns a tuple with the AutoScaling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCPProviderSettingsAllOf) GetAutoScalingOk() (*GCPAutoScaling, bool) {
	if o == nil || o.AutoScaling == nil {
		return nil, false
	}
	return o.AutoScaling, true
}

// HasAutoScaling returns a boolean if a field has been set.
func (o *GCPProviderSettingsAllOf) HasAutoScaling() bool {
	if o != nil && o.AutoScaling != nil {
		return true
	}

	return false
}

// SetAutoScaling gets a reference to the given GCPAutoScaling and assigns it to the AutoScaling field.
func (o *GCPProviderSettingsAllOf) SetAutoScaling(v GCPAutoScaling) {
	o.AutoScaling = &v
}

// GetInstanceSizeName returns the InstanceSizeName field value if set, zero value otherwise.
func (o *GCPProviderSettingsAllOf) GetInstanceSizeName() string {
	if o == nil || o.InstanceSizeName == nil {
		var ret string
		return ret
	}
	return *o.InstanceSizeName
}

// GetInstanceSizeNameOk returns a tuple with the InstanceSizeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCPProviderSettingsAllOf) GetInstanceSizeNameOk() (*string, bool) {
	if o == nil || o.InstanceSizeName == nil {
		return nil, false
	}
	return o.InstanceSizeName, true
}

// HasInstanceSizeName returns a boolean if a field has been set.
func (o *GCPProviderSettingsAllOf) HasInstanceSizeName() bool {
	if o != nil && o.InstanceSizeName != nil {
		return true
	}

	return false
}

// SetInstanceSizeName gets a reference to the given string and assigns it to the InstanceSizeName field.
func (o *GCPProviderSettingsAllOf) SetInstanceSizeName(v string) {
	o.InstanceSizeName = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *GCPProviderSettingsAllOf) GetRegionName() string {
	if o == nil || o.RegionName == nil {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCPProviderSettingsAllOf) GetRegionNameOk() (*string, bool) {
	if o == nil || o.RegionName == nil {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *GCPProviderSettingsAllOf) HasRegionName() bool {
	if o != nil && o.RegionName != nil {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *GCPProviderSettingsAllOf) SetRegionName(v string) {
	o.RegionName = &v
}

func (o GCPProviderSettingsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AutoScaling != nil {
		toSerialize["autoScaling"] = o.AutoScaling
	}
	if o.InstanceSizeName != nil {
		toSerialize["instanceSizeName"] = o.InstanceSizeName
	}
	if o.RegionName != nil {
		toSerialize["regionName"] = o.RegionName
	}
	return json.Marshal(toSerialize)
}

type NullableGCPProviderSettingsAllOf struct {
	value *GCPProviderSettingsAllOf
	isSet bool
}

func (v NullableGCPProviderSettingsAllOf) Get() *GCPProviderSettingsAllOf {
	return v.value
}

func (v *NullableGCPProviderSettingsAllOf) Set(val *GCPProviderSettingsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableGCPProviderSettingsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableGCPProviderSettingsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCPProviderSettingsAllOf(val *GCPProviderSettingsAllOf) *NullableGCPProviderSettingsAllOf {
	return &NullableGCPProviderSettingsAllOf{value: val, isSet: true}
}

func (v NullableGCPProviderSettingsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCPProviderSettingsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


