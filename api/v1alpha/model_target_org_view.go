/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the TargetOrgView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetOrgView{}

// TargetOrgView struct for TargetOrgView
type TargetOrgView struct {
	// Link token that contains all the information required to complete the link.
	LinkToken string `json:"linkToken"`
}

// NewTargetOrgView instantiates a new TargetOrgView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetOrgView() *TargetOrgView {
	this := TargetOrgView{}
	return &this
}

// NewTargetOrgViewWithDefaults instantiates a new TargetOrgView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetOrgViewWithDefaults() *TargetOrgView {
	this := TargetOrgView{}
	return &this
}

// GetLinkToken returns the LinkToken field value
func (o *TargetOrgView) GetLinkToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkToken
}

// GetLinkTokenOk returns a tuple with the LinkToken field value
// and a boolean to check if the value has been set.
func (o *TargetOrgView) GetLinkTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkToken, true
}

// SetLinkToken sets field value
func (o *TargetOrgView) SetLinkToken(v string) {
	o.LinkToken = v
}

func (o TargetOrgView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetOrgView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["linkToken"] = o.LinkToken
	return toSerialize, nil
}

type NullableTargetOrgView struct {
	value *TargetOrgView
	isSet bool
}

func (v NullableTargetOrgView) Get() *TargetOrgView {
	return v.value
}

func (v *NullableTargetOrgView) Set(val *TargetOrgView) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetOrgView) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetOrgView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetOrgView(val *TargetOrgView) *NullableTargetOrgView {
	return &NullableTargetOrgView{value: val, isSet: true}
}

func (v NullableTargetOrgView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetOrgView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


