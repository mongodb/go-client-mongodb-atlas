/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// MatcherField the model 'MatcherField'
type MatcherField string

// List of MatcherField
const (
	MATCHERFIELD_APPLICATION_ID MatcherField = "APPLICATION_ID"
	MATCHERFIELD_CLUSTER_NAME MatcherField = "CLUSTER_NAME"
	MATCHERFIELD_TYPE_NAME MatcherField = "TYPE_NAME"
	MATCHERFIELD_HOSTNAME MatcherField = "HOSTNAME"
	MATCHERFIELD_PORT MatcherField = "PORT"
	MATCHERFIELD_HOSTNAME_AND_PORT MatcherField = "HOSTNAME_AND_PORT"
	MATCHERFIELD_REPLICA_SET_NAME MatcherField = "REPLICA_SET_NAME"
	MATCHERFIELD_SHARD_NAME MatcherField = "SHARD_NAME"
)

// All allowed values of MatcherField enum
var AllowedMatcherFieldEnumValues = []MatcherField{
	"APPLICATION_ID",
	"CLUSTER_NAME",
	"TYPE_NAME",
	"HOSTNAME",
	"PORT",
	"HOSTNAME_AND_PORT",
	"REPLICA_SET_NAME",
	"SHARD_NAME",
}

func (v *MatcherField) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MatcherField(value)
	for _, existing := range AllowedMatcherFieldEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MatcherField", value)
}

// NewMatcherFieldFromValue returns a pointer to a valid MatcherField
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMatcherFieldFromValue(v string) (*MatcherField, error) {
	ev := MatcherField(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MatcherField: valid values are %v", v, AllowedMatcherFieldEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MatcherField) IsValid() bool {
	for _, existing := range AllowedMatcherFieldEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MatcherField value
func (v MatcherField) Ptr() *MatcherField {
	return &v
}


