/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// IntegrationViewForNdsGroup - struct for IntegrationViewForNdsGroup
type IntegrationViewForNdsGroup struct {
	Datadog *Datadog
	MicrosoftTeams *MicrosoftTeams
	NewRelic *NewRelic
	OpsGenie *OpsGenie
	PagerDuty *PagerDuty
	Prometheus *Prometheus
	Slack *Slack
	VictorOps *VictorOps
	Webhook *Webhook
}

// DatadogAsIntegrationViewForNdsGroup is a convenience function that returns Datadog wrapped in IntegrationViewForNdsGroup
func DatadogAsIntegrationViewForNdsGroup(v *Datadog) IntegrationViewForNdsGroup {
	return IntegrationViewForNdsGroup{
		Datadog: v,
	}
}

// MicrosoftTeamsAsIntegrationViewForNdsGroup is a convenience function that returns MicrosoftTeams wrapped in IntegrationViewForNdsGroup
func MicrosoftTeamsAsIntegrationViewForNdsGroup(v *MicrosoftTeams) IntegrationViewForNdsGroup {
	return IntegrationViewForNdsGroup{
		MicrosoftTeams: v,
	}
}

// NewRelicAsIntegrationViewForNdsGroup is a convenience function that returns NewRelic wrapped in IntegrationViewForNdsGroup
func NewRelicAsIntegrationViewForNdsGroup(v *NewRelic) IntegrationViewForNdsGroup {
	return IntegrationViewForNdsGroup{
		NewRelic: v,
	}
}

// OpsGenieAsIntegrationViewForNdsGroup is a convenience function that returns OpsGenie wrapped in IntegrationViewForNdsGroup
func OpsGenieAsIntegrationViewForNdsGroup(v *OpsGenie) IntegrationViewForNdsGroup {
	return IntegrationViewForNdsGroup{
		OpsGenie: v,
	}
}

// PagerDutyAsIntegrationViewForNdsGroup is a convenience function that returns PagerDuty wrapped in IntegrationViewForNdsGroup
func PagerDutyAsIntegrationViewForNdsGroup(v *PagerDuty) IntegrationViewForNdsGroup {
	return IntegrationViewForNdsGroup{
		PagerDuty: v,
	}
}

// PrometheusAsIntegrationViewForNdsGroup is a convenience function that returns Prometheus wrapped in IntegrationViewForNdsGroup
func PrometheusAsIntegrationViewForNdsGroup(v *Prometheus) IntegrationViewForNdsGroup {
	return IntegrationViewForNdsGroup{
		Prometheus: v,
	}
}

// SlackAsIntegrationViewForNdsGroup is a convenience function that returns Slack wrapped in IntegrationViewForNdsGroup
func SlackAsIntegrationViewForNdsGroup(v *Slack) IntegrationViewForNdsGroup {
	return IntegrationViewForNdsGroup{
		Slack: v,
	}
}

// VictorOpsAsIntegrationViewForNdsGroup is a convenience function that returns VictorOps wrapped in IntegrationViewForNdsGroup
func VictorOpsAsIntegrationViewForNdsGroup(v *VictorOps) IntegrationViewForNdsGroup {
	return IntegrationViewForNdsGroup{
		VictorOps: v,
	}
}

// WebhookAsIntegrationViewForNdsGroup is a convenience function that returns Webhook wrapped in IntegrationViewForNdsGroup
func WebhookAsIntegrationViewForNdsGroup(v *Webhook) IntegrationViewForNdsGroup {
	return IntegrationViewForNdsGroup{
		Webhook: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IntegrationViewForNdsGroup) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Datadog
	err = json.Unmarshal(data, &dst.Datadog)
	if err == nil {
		jsonDatadog, _ := json.Marshal(dst.Datadog)
		if string(jsonDatadog) == "{}" { // empty struct
			dst.Datadog = nil
		} else {
			match++
		}
	} else {
		dst.Datadog = nil
	}

	// try to unmarshal data into MicrosoftTeams
	err = json.Unmarshal(data, &dst.MicrosoftTeams)
	if err == nil {
		jsonMicrosoftTeams, _ := json.Marshal(dst.MicrosoftTeams)
		if string(jsonMicrosoftTeams) == "{}" { // empty struct
			dst.MicrosoftTeams = nil
		} else {
			match++
		}
	} else {
		dst.MicrosoftTeams = nil
	}

	// try to unmarshal data into NewRelic
	err = json.Unmarshal(data, &dst.NewRelic)
	if err == nil {
		jsonNewRelic, _ := json.Marshal(dst.NewRelic)
		if string(jsonNewRelic) == "{}" { // empty struct
			dst.NewRelic = nil
		} else {
			match++
		}
	} else {
		dst.NewRelic = nil
	}

	// try to unmarshal data into OpsGenie
	err = json.Unmarshal(data, &dst.OpsGenie)
	if err == nil {
		jsonOpsGenie, _ := json.Marshal(dst.OpsGenie)
		if string(jsonOpsGenie) == "{}" { // empty struct
			dst.OpsGenie = nil
		} else {
			match++
		}
	} else {
		dst.OpsGenie = nil
	}

	// try to unmarshal data into PagerDuty
	err = json.Unmarshal(data, &dst.PagerDuty)
	if err == nil {
		jsonPagerDuty, _ := json.Marshal(dst.PagerDuty)
		if string(jsonPagerDuty) == "{}" { // empty struct
			dst.PagerDuty = nil
		} else {
			match++
		}
	} else {
		dst.PagerDuty = nil
	}

	// try to unmarshal data into Prometheus
	err = json.Unmarshal(data, &dst.Prometheus)
	if err == nil {
		jsonPrometheus, _ := json.Marshal(dst.Prometheus)
		if string(jsonPrometheus) == "{}" { // empty struct
			dst.Prometheus = nil
		} else {
			match++
		}
	} else {
		dst.Prometheus = nil
	}

	// try to unmarshal data into Slack
	err = json.Unmarshal(data, &dst.Slack)
	if err == nil {
		jsonSlack, _ := json.Marshal(dst.Slack)
		if string(jsonSlack) == "{}" { // empty struct
			dst.Slack = nil
		} else {
			match++
		}
	} else {
		dst.Slack = nil
	}

	// try to unmarshal data into VictorOps
	err = json.Unmarshal(data, &dst.VictorOps)
	if err == nil {
		jsonVictorOps, _ := json.Marshal(dst.VictorOps)
		if string(jsonVictorOps) == "{}" { // empty struct
			dst.VictorOps = nil
		} else {
			match++
		}
	} else {
		dst.VictorOps = nil
	}

	// try to unmarshal data into Webhook
	err = json.Unmarshal(data, &dst.Webhook)
	if err == nil {
		jsonWebhook, _ := json.Marshal(dst.Webhook)
		if string(jsonWebhook) == "{}" { // empty struct
			dst.Webhook = nil
		} else {
			match++
		}
	} else {
		dst.Webhook = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Datadog = nil
		dst.MicrosoftTeams = nil
		dst.NewRelic = nil
		dst.OpsGenie = nil
		dst.PagerDuty = nil
		dst.Prometheus = nil
		dst.Slack = nil
		dst.VictorOps = nil
		dst.Webhook = nil

		return fmt.Errorf("data matches more than one schema in oneOf(IntegrationViewForNdsGroup)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(IntegrationViewForNdsGroup)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IntegrationViewForNdsGroup) MarshalJSON() ([]byte, error) {
	if src.Datadog != nil {
		return json.Marshal(&src.Datadog)
	}

	if src.MicrosoftTeams != nil {
		return json.Marshal(&src.MicrosoftTeams)
	}

	if src.NewRelic != nil {
		return json.Marshal(&src.NewRelic)
	}

	if src.OpsGenie != nil {
		return json.Marshal(&src.OpsGenie)
	}

	if src.PagerDuty != nil {
		return json.Marshal(&src.PagerDuty)
	}

	if src.Prometheus != nil {
		return json.Marshal(&src.Prometheus)
	}

	if src.Slack != nil {
		return json.Marshal(&src.Slack)
	}

	if src.VictorOps != nil {
		return json.Marshal(&src.VictorOps)
	}

	if src.Webhook != nil {
		return json.Marshal(&src.Webhook)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IntegrationViewForNdsGroup) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Datadog != nil {
		return obj.Datadog
	}

	if obj.MicrosoftTeams != nil {
		return obj.MicrosoftTeams
	}

	if obj.NewRelic != nil {
		return obj.NewRelic
	}

	if obj.OpsGenie != nil {
		return obj.OpsGenie
	}

	if obj.PagerDuty != nil {
		return obj.PagerDuty
	}

	if obj.Prometheus != nil {
		return obj.Prometheus
	}

	if obj.Slack != nil {
		return obj.Slack
	}

	if obj.VictorOps != nil {
		return obj.VictorOps
	}

	if obj.Webhook != nil {
		return obj.Webhook
	}

	// all schemas are nil
	return nil
}

type NullableIntegrationViewForNdsGroup struct {
	value *IntegrationViewForNdsGroup
	isSet bool
}

func (v NullableIntegrationViewForNdsGroup) Get() *IntegrationViewForNdsGroup {
	return v.value
}

func (v *NullableIntegrationViewForNdsGroup) Set(val *IntegrationViewForNdsGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationViewForNdsGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationViewForNdsGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationViewForNdsGroup(val *IntegrationViewForNdsGroup) *NullableIntegrationViewForNdsGroup {
	return &NullableIntegrationViewForNdsGroup{value: val, isSet: true}
}

func (v NullableIntegrationViewForNdsGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationViewForNdsGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


