/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// ReplicaSetThresholdAlertConfigViewForNdsGroup - Replica Set threshold alert configuration allows to select thresholds for conditions of mongod replica set which trigger alerts and how users are notified.
type ReplicaSetThresholdAlertConfigViewForNdsGroup struct {
	GreaterThanRawThresholdAlertConfigViewForNdsGroup *GreaterThanRawThresholdAlertConfigViewForNdsGroup
	LessThanTimeThresholdAlertConfigViewForNdsGroup *LessThanTimeThresholdAlertConfigViewForNdsGroup
}

// GreaterThanRawThresholdAlertConfigViewForNdsGroupAsReplicaSetThresholdAlertConfigViewForNdsGroup is a convenience function that returns GreaterThanRawThresholdAlertConfigViewForNdsGroup wrapped in ReplicaSetThresholdAlertConfigViewForNdsGroup
func GreaterThanRawThresholdAlertConfigViewForNdsGroupAsReplicaSetThresholdAlertConfigViewForNdsGroup(v *GreaterThanRawThresholdAlertConfigViewForNdsGroup) ReplicaSetThresholdAlertConfigViewForNdsGroup {
	return ReplicaSetThresholdAlertConfigViewForNdsGroup{
		GreaterThanRawThresholdAlertConfigViewForNdsGroup: v,
	}
}

// LessThanTimeThresholdAlertConfigViewForNdsGroupAsReplicaSetThresholdAlertConfigViewForNdsGroup is a convenience function that returns LessThanTimeThresholdAlertConfigViewForNdsGroup wrapped in ReplicaSetThresholdAlertConfigViewForNdsGroup
func LessThanTimeThresholdAlertConfigViewForNdsGroupAsReplicaSetThresholdAlertConfigViewForNdsGroup(v *LessThanTimeThresholdAlertConfigViewForNdsGroup) ReplicaSetThresholdAlertConfigViewForNdsGroup {
	return ReplicaSetThresholdAlertConfigViewForNdsGroup{
		LessThanTimeThresholdAlertConfigViewForNdsGroup: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReplicaSetThresholdAlertConfigViewForNdsGroup) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'GreaterThanRawThresholdAlertConfigViewForNdsGroup'
	if jsonDict["eventTypeName"] == "GreaterThanRawThresholdAlertConfigViewForNdsGroup" {
		// try to unmarshal JSON data into GreaterThanRawThresholdAlertConfigViewForNdsGroup
		err = json.Unmarshal(data, &dst.GreaterThanRawThresholdAlertConfigViewForNdsGroup)
		if err == nil {
			return nil // data stored in dst.GreaterThanRawThresholdAlertConfigViewForNdsGroup, return on the first match
		} else {
			dst.GreaterThanRawThresholdAlertConfigViewForNdsGroup = nil
			return fmt.Errorf("failed to unmarshal ReplicaSetThresholdAlertConfigViewForNdsGroup as GreaterThanRawThresholdAlertConfigViewForNdsGroup: %s", err.Error())
		}
	}

	// check if the discriminator value is 'LessThanTimeThresholdAlertConfigViewForNdsGroup'
	if jsonDict["eventTypeName"] == "LessThanTimeThresholdAlertConfigViewForNdsGroup" {
		// try to unmarshal JSON data into LessThanTimeThresholdAlertConfigViewForNdsGroup
		err = json.Unmarshal(data, &dst.LessThanTimeThresholdAlertConfigViewForNdsGroup)
		if err == nil {
			return nil // data stored in dst.LessThanTimeThresholdAlertConfigViewForNdsGroup, return on the first match
		} else {
			dst.LessThanTimeThresholdAlertConfigViewForNdsGroup = nil
			return fmt.Errorf("failed to unmarshal ReplicaSetThresholdAlertConfigViewForNdsGroup as LessThanTimeThresholdAlertConfigViewForNdsGroup: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REPLICATION_OPLOG_WINDOW_RUNNING_OUT'
	if jsonDict["eventTypeName"] == "REPLICATION_OPLOG_WINDOW_RUNNING_OUT" {
		// try to unmarshal JSON data into LessThanTimeThresholdAlertConfigViewForNdsGroup
		err = json.Unmarshal(data, &dst.LessThanTimeThresholdAlertConfigViewForNdsGroup)
		if err == nil {
			return nil // data stored in dst.LessThanTimeThresholdAlertConfigViewForNdsGroup, return on the first match
		} else {
			dst.LessThanTimeThresholdAlertConfigViewForNdsGroup = nil
			return fmt.Errorf("failed to unmarshal ReplicaSetThresholdAlertConfigViewForNdsGroup as LessThanTimeThresholdAlertConfigViewForNdsGroup: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TOO_MANY_ELECTIONS'
	if jsonDict["eventTypeName"] == "TOO_MANY_ELECTIONS" {
		// try to unmarshal JSON data into GreaterThanRawThresholdAlertConfigViewForNdsGroup
		err = json.Unmarshal(data, &dst.GreaterThanRawThresholdAlertConfigViewForNdsGroup)
		if err == nil {
			return nil // data stored in dst.GreaterThanRawThresholdAlertConfigViewForNdsGroup, return on the first match
		} else {
			dst.GreaterThanRawThresholdAlertConfigViewForNdsGroup = nil
			return fmt.Errorf("failed to unmarshal ReplicaSetThresholdAlertConfigViewForNdsGroup as GreaterThanRawThresholdAlertConfigViewForNdsGroup: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReplicaSetThresholdAlertConfigViewForNdsGroup) MarshalJSON() ([]byte, error) {
	if src.GreaterThanRawThresholdAlertConfigViewForNdsGroup != nil {
		return json.Marshal(&src.GreaterThanRawThresholdAlertConfigViewForNdsGroup)
	}

	if src.LessThanTimeThresholdAlertConfigViewForNdsGroup != nil {
		return json.Marshal(&src.LessThanTimeThresholdAlertConfigViewForNdsGroup)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReplicaSetThresholdAlertConfigViewForNdsGroup) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GreaterThanRawThresholdAlertConfigViewForNdsGroup != nil {
		return obj.GreaterThanRawThresholdAlertConfigViewForNdsGroup
	}

	if obj.LessThanTimeThresholdAlertConfigViewForNdsGroup != nil {
		return obj.LessThanTimeThresholdAlertConfigViewForNdsGroup
	}

	// all schemas are nil
	return nil
}

type NullableReplicaSetThresholdAlertConfigViewForNdsGroup struct {
	value *ReplicaSetThresholdAlertConfigViewForNdsGroup
	isSet bool
}

func (v NullableReplicaSetThresholdAlertConfigViewForNdsGroup) Get() *ReplicaSetThresholdAlertConfigViewForNdsGroup {
	return v.value
}

func (v *NullableReplicaSetThresholdAlertConfigViewForNdsGroup) Set(val *ReplicaSetThresholdAlertConfigViewForNdsGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaSetThresholdAlertConfigViewForNdsGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaSetThresholdAlertConfigViewForNdsGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaSetThresholdAlertConfigViewForNdsGroup(val *ReplicaSetThresholdAlertConfigViewForNdsGroup) *NullableReplicaSetThresholdAlertConfigViewForNdsGroup {
	return &NullableReplicaSetThresholdAlertConfigViewForNdsGroup{value: val, isSet: true}
}

func (v NullableReplicaSetThresholdAlertConfigViewForNdsGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaSetThresholdAlertConfigViewForNdsGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


