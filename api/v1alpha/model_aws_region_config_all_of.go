/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// AWSRegionConfigAllOf struct for AWSRegionConfigAllOf
type AWSRegionConfigAllOf struct {
	AnalyticsAutoScaling *AutoScalingV15 `json:"analyticsAutoScaling,omitempty"`
	AnalyticsSpecs *DedicatedHardwareSpec `json:"analyticsSpecs,omitempty"`
	AutoScaling *AutoScalingV15 `json:"autoScaling,omitempty"`
	ReadOnlySpecs *DedicatedHardwareSpec `json:"readOnlySpecs,omitempty"`
}

// NewAWSRegionConfigAllOf instantiates a new AWSRegionConfigAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSRegionConfigAllOf() *AWSRegionConfigAllOf {
	this := AWSRegionConfigAllOf{}
	return &this
}

// NewAWSRegionConfigAllOfWithDefaults instantiates a new AWSRegionConfigAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSRegionConfigAllOfWithDefaults() *AWSRegionConfigAllOf {
	this := AWSRegionConfigAllOf{}
	return &this
}

// GetAnalyticsAutoScaling returns the AnalyticsAutoScaling field value if set, zero value otherwise.
func (o *AWSRegionConfigAllOf) GetAnalyticsAutoScaling() AutoScalingV15 {
	if o == nil || o.AnalyticsAutoScaling == nil {
		var ret AutoScalingV15
		return ret
	}
	return *o.AnalyticsAutoScaling
}

// GetAnalyticsAutoScalingOk returns a tuple with the AnalyticsAutoScaling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSRegionConfigAllOf) GetAnalyticsAutoScalingOk() (*AutoScalingV15, bool) {
	if o == nil || o.AnalyticsAutoScaling == nil {
		return nil, false
	}
	return o.AnalyticsAutoScaling, true
}

// HasAnalyticsAutoScaling returns a boolean if a field has been set.
func (o *AWSRegionConfigAllOf) HasAnalyticsAutoScaling() bool {
	if o != nil && o.AnalyticsAutoScaling != nil {
		return true
	}

	return false
}

// SetAnalyticsAutoScaling gets a reference to the given AutoScalingV15 and assigns it to the AnalyticsAutoScaling field.
func (o *AWSRegionConfigAllOf) SetAnalyticsAutoScaling(v AutoScalingV15) {
	o.AnalyticsAutoScaling = &v
}

// GetAnalyticsSpecs returns the AnalyticsSpecs field value if set, zero value otherwise.
func (o *AWSRegionConfigAllOf) GetAnalyticsSpecs() DedicatedHardwareSpec {
	if o == nil || o.AnalyticsSpecs == nil {
		var ret DedicatedHardwareSpec
		return ret
	}
	return *o.AnalyticsSpecs
}

// GetAnalyticsSpecsOk returns a tuple with the AnalyticsSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSRegionConfigAllOf) GetAnalyticsSpecsOk() (*DedicatedHardwareSpec, bool) {
	if o == nil || o.AnalyticsSpecs == nil {
		return nil, false
	}
	return o.AnalyticsSpecs, true
}

// HasAnalyticsSpecs returns a boolean if a field has been set.
func (o *AWSRegionConfigAllOf) HasAnalyticsSpecs() bool {
	if o != nil && o.AnalyticsSpecs != nil {
		return true
	}

	return false
}

// SetAnalyticsSpecs gets a reference to the given DedicatedHardwareSpec and assigns it to the AnalyticsSpecs field.
func (o *AWSRegionConfigAllOf) SetAnalyticsSpecs(v DedicatedHardwareSpec) {
	o.AnalyticsSpecs = &v
}

// GetAutoScaling returns the AutoScaling field value if set, zero value otherwise.
func (o *AWSRegionConfigAllOf) GetAutoScaling() AutoScalingV15 {
	if o == nil || o.AutoScaling == nil {
		var ret AutoScalingV15
		return ret
	}
	return *o.AutoScaling
}

// GetAutoScalingOk returns a tuple with the AutoScaling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSRegionConfigAllOf) GetAutoScalingOk() (*AutoScalingV15, bool) {
	if o == nil || o.AutoScaling == nil {
		return nil, false
	}
	return o.AutoScaling, true
}

// HasAutoScaling returns a boolean if a field has been set.
func (o *AWSRegionConfigAllOf) HasAutoScaling() bool {
	if o != nil && o.AutoScaling != nil {
		return true
	}

	return false
}

// SetAutoScaling gets a reference to the given AutoScalingV15 and assigns it to the AutoScaling field.
func (o *AWSRegionConfigAllOf) SetAutoScaling(v AutoScalingV15) {
	o.AutoScaling = &v
}

// GetReadOnlySpecs returns the ReadOnlySpecs field value if set, zero value otherwise.
func (o *AWSRegionConfigAllOf) GetReadOnlySpecs() DedicatedHardwareSpec {
	if o == nil || o.ReadOnlySpecs == nil {
		var ret DedicatedHardwareSpec
		return ret
	}
	return *o.ReadOnlySpecs
}

// GetReadOnlySpecsOk returns a tuple with the ReadOnlySpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSRegionConfigAllOf) GetReadOnlySpecsOk() (*DedicatedHardwareSpec, bool) {
	if o == nil || o.ReadOnlySpecs == nil {
		return nil, false
	}
	return o.ReadOnlySpecs, true
}

// HasReadOnlySpecs returns a boolean if a field has been set.
func (o *AWSRegionConfigAllOf) HasReadOnlySpecs() bool {
	if o != nil && o.ReadOnlySpecs != nil {
		return true
	}

	return false
}

// SetReadOnlySpecs gets a reference to the given DedicatedHardwareSpec and assigns it to the ReadOnlySpecs field.
func (o *AWSRegionConfigAllOf) SetReadOnlySpecs(v DedicatedHardwareSpec) {
	o.ReadOnlySpecs = &v
}

func (o AWSRegionConfigAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AnalyticsAutoScaling != nil {
		toSerialize["analyticsAutoScaling"] = o.AnalyticsAutoScaling
	}
	if o.AnalyticsSpecs != nil {
		toSerialize["analyticsSpecs"] = o.AnalyticsSpecs
	}
	if o.AutoScaling != nil {
		toSerialize["autoScaling"] = o.AutoScaling
	}
	if o.ReadOnlySpecs != nil {
		toSerialize["readOnlySpecs"] = o.ReadOnlySpecs
	}
	return json.Marshal(toSerialize)
}

type NullableAWSRegionConfigAllOf struct {
	value *AWSRegionConfigAllOf
	isSet bool
}

func (v NullableAWSRegionConfigAllOf) Get() *AWSRegionConfigAllOf {
	return v.value
}

func (v *NullableAWSRegionConfigAllOf) Set(val *AWSRegionConfigAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSRegionConfigAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSRegionConfigAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSRegionConfigAllOf(val *AWSRegionConfigAllOf) *NullableAWSRegionConfigAllOf {
	return &NullableAWSRegionConfigAllOf{value: val, isSet: true}
}

func (v NullableAWSRegionConfigAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSRegionConfigAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


