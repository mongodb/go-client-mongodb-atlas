/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// TenantRegionConfigAllOf struct for TenantRegionConfigAllOf
type TenantRegionConfigAllOf struct {
	// Cloud service provider on which MongoDB Cloud provisioned the multi-tenant cluster. The resource returns this parameter when **providerSettings.providerName** is `TENANT` and **providerSetting.instanceSizeName** is `M2` or `M5`.
	BackingProviderName *string `json:"backingProviderName,omitempty"`
}

// NewTenantRegionConfigAllOf instantiates a new TenantRegionConfigAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantRegionConfigAllOf() *TenantRegionConfigAllOf {
	this := TenantRegionConfigAllOf{}
	return &this
}

// NewTenantRegionConfigAllOfWithDefaults instantiates a new TenantRegionConfigAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantRegionConfigAllOfWithDefaults() *TenantRegionConfigAllOf {
	this := TenantRegionConfigAllOf{}
	return &this
}

// GetBackingProviderName returns the BackingProviderName field value if set, zero value otherwise.
func (o *TenantRegionConfigAllOf) GetBackingProviderName() string {
	if o == nil || o.BackingProviderName == nil {
		var ret string
		return ret
	}
	return *o.BackingProviderName
}

// GetBackingProviderNameOk returns a tuple with the BackingProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantRegionConfigAllOf) GetBackingProviderNameOk() (*string, bool) {
	if o == nil || o.BackingProviderName == nil {
		return nil, false
	}
	return o.BackingProviderName, true
}

// HasBackingProviderName returns a boolean if a field has been set.
func (o *TenantRegionConfigAllOf) HasBackingProviderName() bool {
	if o != nil && o.BackingProviderName != nil {
		return true
	}

	return false
}

// SetBackingProviderName gets a reference to the given string and assigns it to the BackingProviderName field.
func (o *TenantRegionConfigAllOf) SetBackingProviderName(v string) {
	o.BackingProviderName = &v
}

func (o TenantRegionConfigAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackingProviderName != nil {
		toSerialize["backingProviderName"] = o.BackingProviderName
	}
	return json.Marshal(toSerialize)
}

type NullableTenantRegionConfigAllOf struct {
	value *TenantRegionConfigAllOf
	isSet bool
}

func (v NullableTenantRegionConfigAllOf) Get() *TenantRegionConfigAllOf {
	return v.value
}

func (v *NullableTenantRegionConfigAllOf) Set(val *TenantRegionConfigAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantRegionConfigAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantRegionConfigAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantRegionConfigAllOf(val *TenantRegionConfigAllOf) *NullableTenantRegionConfigAllOf {
	return &NullableTenantRegionConfigAllOf{value: val, isSet: true}
}

func (v NullableTenantRegionConfigAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantRegionConfigAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


