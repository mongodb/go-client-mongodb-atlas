/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the OnlineArchive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnlineArchive{}

// OnlineArchive struct for OnlineArchive
type OnlineArchive struct {
	// Unique 24-hexadecimal digit string that identifies the online archive.
	Id *string `json:"_id,omitempty"`
	// Human-readable label that identifies the cluster that contains the collection for which you want to create an online archive.
	ClusterName *string `json:"clusterName,omitempty"`
	// Human-readable label that identifies the collection for which you created the online archive.
	CollName *string `json:"collName,omitempty"`
	// Classification of MongoDB database collection that you want to return.  If you set this parameter to `TIMESERIES`, set `\"criteria.type\" : \"date\"` and `\"criteria.dateFormat\" : \"ISODATE\"`.
	CollectionType *string `json:"collectionType,omitempty"`
	Criteria CriteriaView `json:"criteria"`
	// Human-readable label of the database that contains the collection that contains the online archive.
	DbName *string `json:"dbName,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the project that contains the specified cluster. The specified cluster contains the collection for which to create the online archive.
	GroupId *string `json:"groupId,omitempty"`
	// List that contains document parameters to use to logically divide data within a collection. Partitions provide a coarse level of filtering of the underlying collection data. To divide your data, specify up to two parameters that you frequently query. Any queries that don't use these parameters result in a full collection scan of all archived documents. This takes more time and increase your costs.
	PartitionFields []PartitionFieldView `json:"partitionFields,omitempty"`
	Schedule *OnlineArchiveSchedule `json:"schedule,omitempty"`
	// Phase of the process to create this online archive when you made this request.  | State       | Indication | |-------------|------------| | `PENDING`   | MongoDB Cloud has queued documents for archive. Archiving hasn't started. | | `ARCHIVING` | MongoDB Cloud started archiving documents that meet the archival criteria. | | `IDLE`      | MongoDB Cloud waits to start the next archival job. | | `PAUSING`   | Someone chose to stop archiving. MongoDB Cloud finishes the running archival job then changes the state to `PAUSED` when that job completes. | | `PAUSED`    | MongoDB Cloud has stopped archiving. Archived documents can be queried. The specified archiving operation on the active cluster cannot archive additional documents. You can resume archiving for paused archives at any time. | | `ORPHANED`  | Someone has deleted the collection associated with an active or paused archive. MongoDB Cloud doesn't delete the archived data. You must manually delete the online archives associated with the deleted collection. | | `DELETED`   | Someone has deleted the archive was deleted. When someone deletes an online archive, MongoDB Cloud removes all associated archived documents from the cloud object storage. |
	State *string `json:"state,omitempty"`
}

// NewOnlineArchive instantiates a new OnlineArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnlineArchive() *OnlineArchive {
	this := OnlineArchive{}
	var collectionType string = "STANDARD"
	this.CollectionType = &collectionType
	return &this
}

// NewOnlineArchiveWithDefaults instantiates a new OnlineArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnlineArchiveWithDefaults() *OnlineArchive {
	this := OnlineArchive{}
	var collectionType string = "STANDARD"
	this.CollectionType = &collectionType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OnlineArchive) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnlineArchive) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OnlineArchive) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OnlineArchive) SetId(v string) {
	o.Id = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *OnlineArchive) GetClusterName() string {
	if o == nil || IsNil(o.ClusterName) {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnlineArchive) GetClusterNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterName) {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *OnlineArchive) HasClusterName() bool {
	if o != nil && !IsNil(o.ClusterName) {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *OnlineArchive) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetCollName returns the CollName field value if set, zero value otherwise.
func (o *OnlineArchive) GetCollName() string {
	if o == nil || IsNil(o.CollName) {
		var ret string
		return ret
	}
	return *o.CollName
}

// GetCollNameOk returns a tuple with the CollName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnlineArchive) GetCollNameOk() (*string, bool) {
	if o == nil || IsNil(o.CollName) {
		return nil, false
	}
	return o.CollName, true
}

// HasCollName returns a boolean if a field has been set.
func (o *OnlineArchive) HasCollName() bool {
	if o != nil && !IsNil(o.CollName) {
		return true
	}

	return false
}

// SetCollName gets a reference to the given string and assigns it to the CollName field.
func (o *OnlineArchive) SetCollName(v string) {
	o.CollName = &v
}

// GetCollectionType returns the CollectionType field value if set, zero value otherwise.
func (o *OnlineArchive) GetCollectionType() string {
	if o == nil || IsNil(o.CollectionType) {
		var ret string
		return ret
	}
	return *o.CollectionType
}

// GetCollectionTypeOk returns a tuple with the CollectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnlineArchive) GetCollectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionType) {
		return nil, false
	}
	return o.CollectionType, true
}

// HasCollectionType returns a boolean if a field has been set.
func (o *OnlineArchive) HasCollectionType() bool {
	if o != nil && !IsNil(o.CollectionType) {
		return true
	}

	return false
}

// SetCollectionType gets a reference to the given string and assigns it to the CollectionType field.
func (o *OnlineArchive) SetCollectionType(v string) {
	o.CollectionType = &v
}

// GetCriteria returns the Criteria field value
func (o *OnlineArchive) GetCriteria() CriteriaView {
	if o == nil {
		var ret CriteriaView
		return ret
	}

	return o.Criteria
}

// GetCriteriaOk returns a tuple with the Criteria field value
// and a boolean to check if the value has been set.
func (o *OnlineArchive) GetCriteriaOk() (*CriteriaView, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Criteria, true
}

// SetCriteria sets field value
func (o *OnlineArchive) SetCriteria(v CriteriaView) {
	o.Criteria = v
}

// GetDbName returns the DbName field value if set, zero value otherwise.
func (o *OnlineArchive) GetDbName() string {
	if o == nil || IsNil(o.DbName) {
		var ret string
		return ret
	}
	return *o.DbName
}

// GetDbNameOk returns a tuple with the DbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnlineArchive) GetDbNameOk() (*string, bool) {
	if o == nil || IsNil(o.DbName) {
		return nil, false
	}
	return o.DbName, true
}

// HasDbName returns a boolean if a field has been set.
func (o *OnlineArchive) HasDbName() bool {
	if o != nil && !IsNil(o.DbName) {
		return true
	}

	return false
}

// SetDbName gets a reference to the given string and assigns it to the DbName field.
func (o *OnlineArchive) SetDbName(v string) {
	o.DbName = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *OnlineArchive) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnlineArchive) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *OnlineArchive) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *OnlineArchive) SetGroupId(v string) {
	o.GroupId = &v
}

// GetPartitionFields returns the PartitionFields field value if set, zero value otherwise.
func (o *OnlineArchive) GetPartitionFields() []PartitionFieldView {
	if o == nil || IsNil(o.PartitionFields) {
		var ret []PartitionFieldView
		return ret
	}
	return o.PartitionFields
}

// GetPartitionFieldsOk returns a tuple with the PartitionFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnlineArchive) GetPartitionFieldsOk() ([]PartitionFieldView, bool) {
	if o == nil || IsNil(o.PartitionFields) {
		return nil, false
	}
	return o.PartitionFields, true
}

// HasPartitionFields returns a boolean if a field has been set.
func (o *OnlineArchive) HasPartitionFields() bool {
	if o != nil && !IsNil(o.PartitionFields) {
		return true
	}

	return false
}

// SetPartitionFields gets a reference to the given []PartitionFieldView and assigns it to the PartitionFields field.
func (o *OnlineArchive) SetPartitionFields(v []PartitionFieldView) {
	o.PartitionFields = v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *OnlineArchive) GetSchedule() OnlineArchiveSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret OnlineArchiveSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnlineArchive) GetScheduleOk() (*OnlineArchiveSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *OnlineArchive) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given OnlineArchiveSchedule and assigns it to the Schedule field.
func (o *OnlineArchive) SetSchedule(v OnlineArchiveSchedule) {
	o.Schedule = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *OnlineArchive) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnlineArchive) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *OnlineArchive) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *OnlineArchive) SetState(v string) {
	o.State = &v
}

func (o OnlineArchive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnlineArchive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: _id is readOnly
	// skip: clusterName is readOnly
	if !IsNil(o.CollName) {
		toSerialize["collName"] = o.CollName
	}
	if !IsNil(o.CollectionType) {
		toSerialize["collectionType"] = o.CollectionType
	}
	toSerialize["criteria"] = o.Criteria
	if !IsNil(o.DbName) {
		toSerialize["dbName"] = o.DbName
	}
	// skip: groupId is readOnly
	if !IsNil(o.PartitionFields) {
		toSerialize["partitionFields"] = o.PartitionFields
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	// skip: state is readOnly
	return toSerialize, nil
}

type NullableOnlineArchive struct {
	value *OnlineArchive
	isSet bool
}

func (v NullableOnlineArchive) Get() *OnlineArchive {
	return v.value
}

func (v *NullableOnlineArchive) Set(val *OnlineArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableOnlineArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableOnlineArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnlineArchive(val *OnlineArchive) *NullableOnlineArchive {
	return &NullableOnlineArchive{value: val, isSet: true}
}

func (v NullableOnlineArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnlineArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


