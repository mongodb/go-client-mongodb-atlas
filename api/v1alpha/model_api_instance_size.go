/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the ApiInstanceSize type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiInstanceSize{}

// ApiInstanceSize List of instances sizes that this cloud provider supports.
type ApiInstanceSize struct {
	// List of regions that this cloud provider supports for this instance size.
	AvailableRegions []AvailableRegion `json:"availableRegions,omitempty"`
	// Human-readable label that identifies the instance size or cluster tier.
	Name *string `json:"name,omitempty"`
}

// NewApiInstanceSize instantiates a new ApiInstanceSize object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiInstanceSize() *ApiInstanceSize {
	this := ApiInstanceSize{}
	return &this
}

// NewApiInstanceSizeWithDefaults instantiates a new ApiInstanceSize object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiInstanceSizeWithDefaults() *ApiInstanceSize {
	this := ApiInstanceSize{}
	return &this
}

// GetAvailableRegions returns the AvailableRegions field value if set, zero value otherwise.
func (o *ApiInstanceSize) GetAvailableRegions() []AvailableRegion {
	if o == nil || IsNil(o.AvailableRegions) {
		var ret []AvailableRegion
		return ret
	}
	return o.AvailableRegions
}

// GetAvailableRegionsOk returns a tuple with the AvailableRegions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInstanceSize) GetAvailableRegionsOk() ([]AvailableRegion, bool) {
	if o == nil || IsNil(o.AvailableRegions) {
		return nil, false
	}
	return o.AvailableRegions, true
}

// HasAvailableRegions returns a boolean if a field has been set.
func (o *ApiInstanceSize) HasAvailableRegions() bool {
	if o != nil && !IsNil(o.AvailableRegions) {
		return true
	}

	return false
}

// SetAvailableRegions gets a reference to the given []AvailableRegion and assigns it to the AvailableRegions field.
func (o *ApiInstanceSize) SetAvailableRegions(v []AvailableRegion) {
	o.AvailableRegions = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiInstanceSize) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiInstanceSize) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiInstanceSize) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiInstanceSize) SetName(v string) {
	o.Name = &v
}

func (o ApiInstanceSize) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiInstanceSize) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: availableRegions is readOnly
	// skip: name is readOnly
	return toSerialize, nil
}

type NullableApiInstanceSize struct {
	value *ApiInstanceSize
	isSet bool
}

func (v NullableApiInstanceSize) Get() *ApiInstanceSize {
	return v.value
}

func (v *NullableApiInstanceSize) Set(val *ApiInstanceSize) {
	v.value = val
	v.isSet = true
}

func (v NullableApiInstanceSize) IsSet() bool {
	return v.isSet
}

func (v *NullableApiInstanceSize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiInstanceSize(val *ApiInstanceSize) *NullableApiInstanceSize {
	return &NullableApiInstanceSize{value: val, isSet: true}
}

func (v NullableApiInstanceSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiInstanceSize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


