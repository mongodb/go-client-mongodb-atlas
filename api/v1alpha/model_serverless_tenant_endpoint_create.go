/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// ServerlessTenantEndpointCreate struct for ServerlessTenantEndpointCreate
type ServerlessTenantEndpointCreate struct {
	// Human-readable comment associated with the private endpoint.
	Comment *string `json:"comment,omitempty"`
}

// NewServerlessTenantEndpointCreate instantiates a new ServerlessTenantEndpointCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerlessTenantEndpointCreate() *ServerlessTenantEndpointCreate {
	this := ServerlessTenantEndpointCreate{}
	return &this
}

// NewServerlessTenantEndpointCreateWithDefaults instantiates a new ServerlessTenantEndpointCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerlessTenantEndpointCreateWithDefaults() *ServerlessTenantEndpointCreate {
	this := ServerlessTenantEndpointCreate{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ServerlessTenantEndpointCreate) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerlessTenantEndpointCreate) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ServerlessTenantEndpointCreate) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ServerlessTenantEndpointCreate) SetComment(v string) {
	o.Comment = &v
}

func (o ServerlessTenantEndpointCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	return json.Marshal(toSerialize)
}

type NullableServerlessTenantEndpointCreate struct {
	value *ServerlessTenantEndpointCreate
	isSet bool
}

func (v NullableServerlessTenantEndpointCreate) Get() *ServerlessTenantEndpointCreate {
	return v.value
}

func (v *NullableServerlessTenantEndpointCreate) Set(val *ServerlessTenantEndpointCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableServerlessTenantEndpointCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableServerlessTenantEndpointCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerlessTenantEndpointCreate(val *ServerlessTenantEndpointCreate) *NullableServerlessTenantEndpointCreate {
	return &NullableServerlessTenantEndpointCreate{value: val, isSet: true}
}

func (v NullableServerlessTenantEndpointCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerlessTenantEndpointCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


