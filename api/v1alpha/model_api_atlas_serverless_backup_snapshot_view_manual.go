/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"time"
)

// checks if the ApiAtlasServerlessBackupSnapshotViewManual type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiAtlasServerlessBackupSnapshotViewManual{}

// ApiAtlasServerlessBackupSnapshotViewManual struct for ApiAtlasServerlessBackupSnapshotViewManual
type ApiAtlasServerlessBackupSnapshotViewManual struct {
	// Date and time when MongoDB Cloud took the snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Human-readable phrase or sentence that explains the purpose of the snapshot. The resource returns this parameter when `\"status\" : \"onDemand\"`.
	Description *string `json:"description,omitempty"`
	// Date and time when MongoDB Cloud deletes the snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	// Human-readable label that identifies how often this snapshot triggers.
	FrequencyType *string `json:"frequencyType,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the snapshot.
	Id *string `json:"id,omitempty"`
	// Version of the MongoDB host that this snapshot backs up.
	MongodVersion *string `json:"mongodVersion,omitempty"`
	// Human-readable label given to the serverless instance from which MongoDB Cloud took this snapshot.
	ServerlessInstanceName *string `json:"serverlessInstanceName,omitempty"`
	// Human-readable label that identifies when this snapshot triggers.
	SnapshotType *string `json:"snapshotType,omitempty"`
	// Human-readable label that indicates the stage of the backup process for this snapshot.
	Status *string `json:"status,omitempty"`
	// Number of bytes taken to store the backup snapshot.
	StorageSizeBytes *int32 `json:"storageSizeBytes,omitempty"`
}

// NewApiAtlasServerlessBackupSnapshotViewManual instantiates a new ApiAtlasServerlessBackupSnapshotViewManual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasServerlessBackupSnapshotViewManual() *ApiAtlasServerlessBackupSnapshotViewManual {
	this := ApiAtlasServerlessBackupSnapshotViewManual{}
	return &this
}

// NewApiAtlasServerlessBackupSnapshotViewManualWithDefaults instantiates a new ApiAtlasServerlessBackupSnapshotViewManual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasServerlessBackupSnapshotViewManualWithDefaults() *ApiAtlasServerlessBackupSnapshotViewManual {
	this := ApiAtlasServerlessBackupSnapshotViewManual{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) SetDescription(v string) {
	o.Description = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetFrequencyType returns the FrequencyType field value if set, zero value otherwise.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetFrequencyType() string {
	if o == nil || IsNil(o.FrequencyType) {
		var ret string
		return ret
	}
	return *o.FrequencyType
}

// GetFrequencyTypeOk returns a tuple with the FrequencyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetFrequencyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FrequencyType) {
		return nil, false
	}
	return o.FrequencyType, true
}

// HasFrequencyType returns a boolean if a field has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) HasFrequencyType() bool {
	if o != nil && !IsNil(o.FrequencyType) {
		return true
	}

	return false
}

// SetFrequencyType gets a reference to the given string and assigns it to the FrequencyType field.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) SetFrequencyType(v string) {
	o.FrequencyType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) SetId(v string) {
	o.Id = &v
}

// GetMongodVersion returns the MongodVersion field value if set, zero value otherwise.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetMongodVersion() string {
	if o == nil || IsNil(o.MongodVersion) {
		var ret string
		return ret
	}
	return *o.MongodVersion
}

// GetMongodVersionOk returns a tuple with the MongodVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetMongodVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MongodVersion) {
		return nil, false
	}
	return o.MongodVersion, true
}

// HasMongodVersion returns a boolean if a field has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) HasMongodVersion() bool {
	if o != nil && !IsNil(o.MongodVersion) {
		return true
	}

	return false
}

// SetMongodVersion gets a reference to the given string and assigns it to the MongodVersion field.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) SetMongodVersion(v string) {
	o.MongodVersion = &v
}

// GetServerlessInstanceName returns the ServerlessInstanceName field value if set, zero value otherwise.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetServerlessInstanceName() string {
	if o == nil || IsNil(o.ServerlessInstanceName) {
		var ret string
		return ret
	}
	return *o.ServerlessInstanceName
}

// GetServerlessInstanceNameOk returns a tuple with the ServerlessInstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetServerlessInstanceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerlessInstanceName) {
		return nil, false
	}
	return o.ServerlessInstanceName, true
}

// HasServerlessInstanceName returns a boolean if a field has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) HasServerlessInstanceName() bool {
	if o != nil && !IsNil(o.ServerlessInstanceName) {
		return true
	}

	return false
}

// SetServerlessInstanceName gets a reference to the given string and assigns it to the ServerlessInstanceName field.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) SetServerlessInstanceName(v string) {
	o.ServerlessInstanceName = &v
}

// GetSnapshotType returns the SnapshotType field value if set, zero value otherwise.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetSnapshotType() string {
	if o == nil || IsNil(o.SnapshotType) {
		var ret string
		return ret
	}
	return *o.SnapshotType
}

// GetSnapshotTypeOk returns a tuple with the SnapshotType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetSnapshotTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotType) {
		return nil, false
	}
	return o.SnapshotType, true
}

// HasSnapshotType returns a boolean if a field has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) HasSnapshotType() bool {
	if o != nil && !IsNil(o.SnapshotType) {
		return true
	}

	return false
}

// SetSnapshotType gets a reference to the given string and assigns it to the SnapshotType field.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) SetSnapshotType(v string) {
	o.SnapshotType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) SetStatus(v string) {
	o.Status = &v
}

// GetStorageSizeBytes returns the StorageSizeBytes field value if set, zero value otherwise.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetStorageSizeBytes() int32 {
	if o == nil || IsNil(o.StorageSizeBytes) {
		var ret int32
		return ret
	}
	return *o.StorageSizeBytes
}

// GetStorageSizeBytesOk returns a tuple with the StorageSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) GetStorageSizeBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.StorageSizeBytes) {
		return nil, false
	}
	return o.StorageSizeBytes, true
}

// HasStorageSizeBytes returns a boolean if a field has been set.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) HasStorageSizeBytes() bool {
	if o != nil && !IsNil(o.StorageSizeBytes) {
		return true
	}

	return false
}

// SetStorageSizeBytes gets a reference to the given int32 and assigns it to the StorageSizeBytes field.
func (o *ApiAtlasServerlessBackupSnapshotViewManual) SetStorageSizeBytes(v int32) {
	o.StorageSizeBytes = &v
}

func (o ApiAtlasServerlessBackupSnapshotViewManual) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiAtlasServerlessBackupSnapshotViewManual) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: createdAt is readOnly
	// skip: description is readOnly
	// skip: expiresAt is readOnly
	// skip: frequencyType is readOnly
	// skip: id is readOnly
	// skip: mongodVersion is readOnly
	// skip: serverlessInstanceName is readOnly
	// skip: snapshotType is readOnly
	// skip: status is readOnly
	// skip: storageSizeBytes is readOnly
	return toSerialize, nil
}

type NullableApiAtlasServerlessBackupSnapshotViewManual struct {
	value *ApiAtlasServerlessBackupSnapshotViewManual
	isSet bool
}

func (v NullableApiAtlasServerlessBackupSnapshotViewManual) Get() *ApiAtlasServerlessBackupSnapshotViewManual {
	return v.value
}

func (v *NullableApiAtlasServerlessBackupSnapshotViewManual) Set(val *ApiAtlasServerlessBackupSnapshotViewManual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasServerlessBackupSnapshotViewManual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasServerlessBackupSnapshotViewManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasServerlessBackupSnapshotViewManual(val *ApiAtlasServerlessBackupSnapshotViewManual) *NullableApiAtlasServerlessBackupSnapshotViewManual {
	return &NullableApiAtlasServerlessBackupSnapshotViewManual{value: val, isSet: true}
}

func (v NullableApiAtlasServerlessBackupSnapshotViewManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasServerlessBackupSnapshotViewManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


