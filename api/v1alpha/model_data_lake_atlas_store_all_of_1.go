/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// DataLakeAtlasStoreAllOf1 Group of settings that define where the data is stored.
type DataLakeAtlasStoreAllOf1 struct {
	// Human-readable label that identifies the data store. The **databases.[n].collections.[n].dataSources.[n].storeName** field references this values as part of the mapping configuration. To use MongoDB Cloud as a data store, the data lake requires a serverless instance or an `M10` or higher cluster.
	Name *string `json:"name,omitempty"`
	Provider string `json:"provider"`
}

// NewDataLakeAtlasStoreAllOf1 instantiates a new DataLakeAtlasStoreAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLakeAtlasStoreAllOf1() *DataLakeAtlasStoreAllOf1 {
	this := DataLakeAtlasStoreAllOf1{}
	return &this
}

// NewDataLakeAtlasStoreAllOf1WithDefaults instantiates a new DataLakeAtlasStoreAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLakeAtlasStoreAllOf1WithDefaults() *DataLakeAtlasStoreAllOf1 {
	this := DataLakeAtlasStoreAllOf1{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataLakeAtlasStoreAllOf1) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStoreAllOf1) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataLakeAtlasStoreAllOf1) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataLakeAtlasStoreAllOf1) SetName(v string) {
	o.Name = &v
}

// GetProvider returns the Provider field value
func (o *DataLakeAtlasStoreAllOf1) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStoreAllOf1) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *DataLakeAtlasStoreAllOf1) SetProvider(v string) {
	o.Provider = v
}

func (o DataLakeAtlasStoreAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["provider"] = o.Provider
	}
	return json.Marshal(toSerialize)
}

type NullableDataLakeAtlasStoreAllOf1 struct {
	value *DataLakeAtlasStoreAllOf1
	isSet bool
}

func (v NullableDataLakeAtlasStoreAllOf1) Get() *DataLakeAtlasStoreAllOf1 {
	return v.value
}

func (v *NullableDataLakeAtlasStoreAllOf1) Set(val *DataLakeAtlasStoreAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLakeAtlasStoreAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLakeAtlasStoreAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLakeAtlasStoreAllOf1(val *DataLakeAtlasStoreAllOf1) *NullableDataLakeAtlasStoreAllOf1 {
	return &NullableDataLakeAtlasStoreAllOf1{value: val, isSet: true}
}

func (v NullableDataLakeAtlasStoreAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLakeAtlasStoreAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


