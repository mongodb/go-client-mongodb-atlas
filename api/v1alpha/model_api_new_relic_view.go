/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the ApiNewRelicView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiNewRelicView{}

// ApiNewRelicView Details to integrate one New Relic account with one MongoDB Cloud project.  ***IMPORTANT**: Effective Wednesday, June 16th, 2021, New Relic no longer supports the plugin-based integration with MongoDB. We do not recommend that you sign up for the plugin-based integration.  To learn more, see the <a href=\"https://discuss.newrelic.com/t/new-relic-plugin-eol-wednesday-june-16th-2021/127267\" target=\"_blank\">New Relic Plugin EOL Statement</a>. Consider configuring an alternative monitoring integration before June 16th to maintain visibility into your MongoDB deployments.
type ApiNewRelicView struct {
	// Unique 40-hexadecimal digit string that identifies your New Relic account.
	AccountId string `json:"accountId"`
	// Unique 40-hexadecimal digit string that identifies your New Relic license.  **IMPORTANT**: Effective Wednesday, June 16th, 2021, New Relic no longer supports the plugin-based integration with MongoDB. We do not recommend that you sign up for the plugin-based integration. To learn more, see the <a href=\"https://discuss.newrelic.com/t/new-relic-plugin-eol-wednesday-june-16th-2021/127267\" target=\"_blank\">New Relic Plugin EOL Statement</a> Consider configuring an alternative monitoring integration before June 16th to maintain visibility into your MongoDB deployments.
	LicenseKey string `json:"licenseKey"`
	// Query key used to access your New Relic account.
	ReadToken string `json:"readToken"`
	// Human-readable label that identifies the service to which you want to integrate with MongoDB Cloud. The value must match the third-party service integration type.
	Type *string `json:"type,omitempty"`
	// Insert key associated with your New Relic account.
	WriteToken string `json:"writeToken"`
}

// NewApiNewRelicView instantiates a new ApiNewRelicView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiNewRelicView() *ApiNewRelicView {
	this := ApiNewRelicView{}
	return &this
}

// NewApiNewRelicViewWithDefaults instantiates a new ApiNewRelicView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiNewRelicViewWithDefaults() *ApiNewRelicView {
	this := ApiNewRelicView{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *ApiNewRelicView) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *ApiNewRelicView) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *ApiNewRelicView) SetAccountId(v string) {
	o.AccountId = v
}

// GetLicenseKey returns the LicenseKey field value
func (o *ApiNewRelicView) GetLicenseKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseKey
}

// GetLicenseKeyOk returns a tuple with the LicenseKey field value
// and a boolean to check if the value has been set.
func (o *ApiNewRelicView) GetLicenseKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseKey, true
}

// SetLicenseKey sets field value
func (o *ApiNewRelicView) SetLicenseKey(v string) {
	o.LicenseKey = v
}

// GetReadToken returns the ReadToken field value
func (o *ApiNewRelicView) GetReadToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReadToken
}

// GetReadTokenOk returns a tuple with the ReadToken field value
// and a boolean to check if the value has been set.
func (o *ApiNewRelicView) GetReadTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadToken, true
}

// SetReadToken sets field value
func (o *ApiNewRelicView) SetReadToken(v string) {
	o.ReadToken = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiNewRelicView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiNewRelicView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiNewRelicView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiNewRelicView) SetType(v string) {
	o.Type = &v
}

// GetWriteToken returns the WriteToken field value
func (o *ApiNewRelicView) GetWriteToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WriteToken
}

// GetWriteTokenOk returns a tuple with the WriteToken field value
// and a boolean to check if the value has been set.
func (o *ApiNewRelicView) GetWriteTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WriteToken, true
}

// SetWriteToken sets field value
func (o *ApiNewRelicView) SetWriteToken(v string) {
	o.WriteToken = v
}

func (o ApiNewRelicView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiNewRelicView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountId"] = o.AccountId
	toSerialize["licenseKey"] = o.LicenseKey
	toSerialize["readToken"] = o.ReadToken
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["writeToken"] = o.WriteToken
	return toSerialize, nil
}

type NullableApiNewRelicView struct {
	value *ApiNewRelicView
	isSet bool
}

func (v NullableApiNewRelicView) Get() *ApiNewRelicView {
	return v.value
}

func (v *NullableApiNewRelicView) Set(val *ApiNewRelicView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiNewRelicView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiNewRelicView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiNewRelicView(val *ApiNewRelicView) *NullableApiNewRelicView {
	return &NullableApiNewRelicView{value: val, isSet: true}
}

func (v NullableApiNewRelicView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiNewRelicView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


