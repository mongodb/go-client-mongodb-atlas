/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the ApiWebhookView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiWebhookView{}

// ApiWebhookView Details to integrate one webhook with one MongoDB Cloud project.
type ApiWebhookView struct {
	// An optional field returned if your webhook is configured with a secret.  **NOTE**: When you view or edit the alert for a webhook notification, the secret appears completely redacted.
	Secret *string `json:"secret,omitempty"`
	// Human-readable label that identifies the service to which you want to integrate with MongoDB Cloud. The value must match the third-party service integration type.
	Type *string `json:"type,omitempty"`
	// Endpoint web address to which MongoDB Cloud sends notifications.  **NOTE**: When you view or edit the alert for a webhook notification, the URL appears partially redacted.
	Url string `json:"url"`
}

// NewApiWebhookView instantiates a new ApiWebhookView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiWebhookView() *ApiWebhookView {
	this := ApiWebhookView{}
	return &this
}

// NewApiWebhookViewWithDefaults instantiates a new ApiWebhookView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiWebhookViewWithDefaults() *ApiWebhookView {
	this := ApiWebhookView{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *ApiWebhookView) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiWebhookView) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *ApiWebhookView) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *ApiWebhookView) SetSecret(v string) {
	o.Secret = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiWebhookView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiWebhookView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiWebhookView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiWebhookView) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value
func (o *ApiWebhookView) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ApiWebhookView) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ApiWebhookView) SetUrl(v string) {
	o.Url = v
}

func (o ApiWebhookView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiWebhookView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

type NullableApiWebhookView struct {
	value *ApiWebhookView
	isSet bool
}

func (v NullableApiWebhookView) Get() *ApiWebhookView {
	return v.value
}

func (v *NullableApiWebhookView) Set(val *ApiWebhookView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiWebhookView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiWebhookView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiWebhookView(val *ApiWebhookView) *NullableApiWebhookView {
	return &NullableApiWebhookView{value: val, isSet: true}
}

func (v NullableApiWebhookView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiWebhookView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


