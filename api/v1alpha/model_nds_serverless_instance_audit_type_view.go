/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// NDSServerlessInstanceAuditTypeView Unique identifier of event type.
type NDSServerlessInstanceAuditTypeView string

// List of NDSServerlessInstanceAuditTypeView
const (
	NDSSERVERLESSINSTANCEAUDITTYPEVIEW_CREATED NDSServerlessInstanceAuditTypeView = "SERVERLESS_INSTANCE_CREATED"
	NDSSERVERLESSINSTANCEAUDITTYPEVIEW_READY NDSServerlessInstanceAuditTypeView = "SERVERLESS_INSTANCE_READY"
	NDSSERVERLESSINSTANCEAUDITTYPEVIEW_UPDATE_SUBMITTED NDSServerlessInstanceAuditTypeView = "SERVERLESS_INSTANCE_UPDATE_SUBMITTED"
	NDSSERVERLESSINSTANCEAUDITTYPEVIEW_UPDATE_STARTED NDSServerlessInstanceAuditTypeView = "SERVERLESS_INSTANCE_UPDATE_STARTED"
	NDSSERVERLESSINSTANCEAUDITTYPEVIEW_UPDATE_COMPLETED NDSServerlessInstanceAuditTypeView = "SERVERLESS_INSTANCE_UPDATE_COMPLETED"
	NDSSERVERLESSINSTANCEAUDITTYPEVIEW_DELETE_SUBMITTED NDSServerlessInstanceAuditTypeView = "SERVERLESS_INSTANCE_DELETE_SUBMITTED"
	NDSSERVERLESSINSTANCEAUDITTYPEVIEW_DELETED NDSServerlessInstanceAuditTypeView = "SERVERLESS_INSTANCE_DELETED"
)

// All allowed values of NDSServerlessInstanceAuditTypeView enum
var AllowedNDSServerlessInstanceAuditTypeViewEnumValues = []NDSServerlessInstanceAuditTypeView{
	"SERVERLESS_INSTANCE_CREATED",
	"SERVERLESS_INSTANCE_READY",
	"SERVERLESS_INSTANCE_UPDATE_SUBMITTED",
	"SERVERLESS_INSTANCE_UPDATE_STARTED",
	"SERVERLESS_INSTANCE_UPDATE_COMPLETED",
	"SERVERLESS_INSTANCE_DELETE_SUBMITTED",
	"SERVERLESS_INSTANCE_DELETED",
}

func (v *NDSServerlessInstanceAuditTypeView) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NDSServerlessInstanceAuditTypeView(value)
	for _, existing := range AllowedNDSServerlessInstanceAuditTypeViewEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NDSServerlessInstanceAuditTypeView", value)
}

// NewNDSServerlessInstanceAuditTypeViewFromValue returns a pointer to a valid NDSServerlessInstanceAuditTypeView
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNDSServerlessInstanceAuditTypeViewFromValue(v string) (*NDSServerlessInstanceAuditTypeView, error) {
	ev := NDSServerlessInstanceAuditTypeView(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NDSServerlessInstanceAuditTypeView: valid values are %v", v, AllowedNDSServerlessInstanceAuditTypeViewEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NDSServerlessInstanceAuditTypeView) IsValid() bool {
	for _, existing := range AllowedNDSServerlessInstanceAuditTypeViewEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NDSServerlessInstanceAuditTypeView value
func (v NDSServerlessInstanceAuditTypeView) Ptr() *NDSServerlessInstanceAuditTypeView {
	return &v
}

type NullableNDSServerlessInstanceAuditTypeView struct {
	value *NDSServerlessInstanceAuditTypeView
	isSet bool
}

func (v NullableNDSServerlessInstanceAuditTypeView) Get() *NDSServerlessInstanceAuditTypeView {
	return v.value
}

func (v *NullableNDSServerlessInstanceAuditTypeView) Set(val *NDSServerlessInstanceAuditTypeView) {
	v.value = val
	v.isSet = true
}

func (v NullableNDSServerlessInstanceAuditTypeView) IsSet() bool {
	return v.isSet
}

func (v *NullableNDSServerlessInstanceAuditTypeView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNDSServerlessInstanceAuditTypeView(val *NDSServerlessInstanceAuditTypeView) *NullableNDSServerlessInstanceAuditTypeView {
	return &NullableNDSServerlessInstanceAuditTypeView{value: val, isSet: true}
}

func (v NullableNDSServerlessInstanceAuditTypeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNDSServerlessInstanceAuditTypeView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

