/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the AddUserToTeamView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddUserToTeamView{}

// AddUserToTeamView struct for AddUserToTeamView
type AddUserToTeamView struct {
	// Unique 24-hexadecimal digit string that identifies the MongoDB Cloud user.
	Id string `json:"id"`
}

// NewAddUserToTeamView instantiates a new AddUserToTeamView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddUserToTeamView(id string) *AddUserToTeamView {
	this := AddUserToTeamView{}
	this.Id = id
	return &this
}

// NewAddUserToTeamViewWithDefaults instantiates a new AddUserToTeamView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddUserToTeamViewWithDefaults() *AddUserToTeamView {
	this := AddUserToTeamView{}
	return &this
}

// GetId returns the Id field value
func (o *AddUserToTeamView) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AddUserToTeamView) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AddUserToTeamView) SetId(v string) {
	o.Id = v
}

func (o AddUserToTeamView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddUserToTeamView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

type NullableAddUserToTeamView struct {
	value *AddUserToTeamView
	isSet bool
}

func (v NullableAddUserToTeamView) Get() *AddUserToTeamView {
	return v.value
}

func (v *NullableAddUserToTeamView) Set(val *AddUserToTeamView) {
	v.value = val
	v.isSet = true
}

func (v NullableAddUserToTeamView) IsSet() bool {
	return v.isSet
}

func (v *NullableAddUserToTeamView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddUserToTeamView(val *AddUserToTeamView) *NullableAddUserToTeamView {
	return &NullableAddUserToTeamView{value: val, isSet: true}
}

func (v NullableAddUserToTeamView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddUserToTeamView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


