/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// ServerlessMetricThresholdView - Threshold for the metric that, when exceeded, triggers an alert. The metric threshold pertains to event types which reflects changes of measurements and metrics about the serverless database.
type ServerlessMetricThresholdView struct {
	DataMetricThresholdView *DataMetricThresholdView
	RPUMetricThresholdView *RPUMetricThresholdView
	RawMetricThresholdView *RawMetricThresholdView
	TimeMetricThresholdView *TimeMetricThresholdView
}

// DataMetricThresholdViewAsServerlessMetricThresholdView is a convenience function that returns DataMetricThresholdView wrapped in ServerlessMetricThresholdView
func DataMetricThresholdViewAsServerlessMetricThresholdView(v *DataMetricThresholdView) ServerlessMetricThresholdView {
	return ServerlessMetricThresholdView{
		DataMetricThresholdView: v,
	}
}

// RPUMetricThresholdViewAsServerlessMetricThresholdView is a convenience function that returns RPUMetricThresholdView wrapped in ServerlessMetricThresholdView
func RPUMetricThresholdViewAsServerlessMetricThresholdView(v *RPUMetricThresholdView) ServerlessMetricThresholdView {
	return ServerlessMetricThresholdView{
		RPUMetricThresholdView: v,
	}
}

// RawMetricThresholdViewAsServerlessMetricThresholdView is a convenience function that returns RawMetricThresholdView wrapped in ServerlessMetricThresholdView
func RawMetricThresholdViewAsServerlessMetricThresholdView(v *RawMetricThresholdView) ServerlessMetricThresholdView {
	return ServerlessMetricThresholdView{
		RawMetricThresholdView: v,
	}
}

// TimeMetricThresholdViewAsServerlessMetricThresholdView is a convenience function that returns TimeMetricThresholdView wrapped in ServerlessMetricThresholdView
func TimeMetricThresholdViewAsServerlessMetricThresholdView(v *TimeMetricThresholdView) ServerlessMetricThresholdView {
	return ServerlessMetricThresholdView{
		TimeMetricThresholdView: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ServerlessMetricThresholdView) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'DataMetricThresholdView'
	if jsonDict["metricName"] == "DataMetricThresholdView" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RPUMetricThresholdView'
	if jsonDict["metricName"] == "RPUMetricThresholdView" {
		// try to unmarshal JSON data into RPUMetricThresholdView
		err = json.Unmarshal(data, &dst.RPUMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RPUMetricThresholdView, return on the first match
		} else {
			dst.RPUMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RPUMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RawMetricThresholdView'
	if jsonDict["metricName"] == "RawMetricThresholdView" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_AVG_COMMAND_EXECUTION_TIME'
	if jsonDict["metricName"] == "SERVERLESS_AVG_COMMAND_EXECUTION_TIME" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_AVG_READ_EXECUTION_TIME'
	if jsonDict["metricName"] == "SERVERLESS_AVG_READ_EXECUTION_TIME" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_AVG_WRITE_EXECUTION_TIME'
	if jsonDict["metricName"] == "SERVERLESS_AVG_WRITE_EXECUTION_TIME" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_CONNECTIONS'
	if jsonDict["metricName"] == "SERVERLESS_CONNECTIONS" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_CONNECTIONS_PERCENT'
	if jsonDict["metricName"] == "SERVERLESS_CONNECTIONS_PERCENT" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_DATA_SIZE_TOTAL'
	if jsonDict["metricName"] == "SERVERLESS_DATA_SIZE_TOTAL" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_NETWORK_BYTES_IN'
	if jsonDict["metricName"] == "SERVERLESS_NETWORK_BYTES_IN" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_NETWORK_BYTES_OUT'
	if jsonDict["metricName"] == "SERVERLESS_NETWORK_BYTES_OUT" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_NETWORK_NUM_REQUESTS'
	if jsonDict["metricName"] == "SERVERLESS_NETWORK_NUM_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_OPCOUNTER_CMD'
	if jsonDict["metricName"] == "SERVERLESS_OPCOUNTER_CMD" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_OPCOUNTER_DELETE'
	if jsonDict["metricName"] == "SERVERLESS_OPCOUNTER_DELETE" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_OPCOUNTER_GETMORE'
	if jsonDict["metricName"] == "SERVERLESS_OPCOUNTER_GETMORE" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_OPCOUNTER_INSERT'
	if jsonDict["metricName"] == "SERVERLESS_OPCOUNTER_INSERT" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_OPCOUNTER_QUERY'
	if jsonDict["metricName"] == "SERVERLESS_OPCOUNTER_QUERY" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_OPCOUNTER_UPDATE'
	if jsonDict["metricName"] == "SERVERLESS_OPCOUNTER_UPDATE" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_TOTAL_READ_UNITS'
	if jsonDict["metricName"] == "SERVERLESS_TOTAL_READ_UNITS" {
		// try to unmarshal JSON data into RPUMetricThresholdView
		err = json.Unmarshal(data, &dst.RPUMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RPUMetricThresholdView, return on the first match
		} else {
			dst.RPUMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RPUMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SERVERLESS_TOTAL_WRITE_UNITS'
	if jsonDict["metricName"] == "SERVERLESS_TOTAL_WRITE_UNITS" {
		// try to unmarshal JSON data into RPUMetricThresholdView
		err = json.Unmarshal(data, &dst.RPUMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RPUMetricThresholdView, return on the first match
		} else {
			dst.RPUMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as RPUMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TimeMetricThresholdView'
	if jsonDict["metricName"] == "TimeMetricThresholdView" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal ServerlessMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ServerlessMetricThresholdView) MarshalJSON() ([]byte, error) {
	if src.DataMetricThresholdView != nil {
		return json.Marshal(&src.DataMetricThresholdView)
	}

	if src.RPUMetricThresholdView != nil {
		return json.Marshal(&src.RPUMetricThresholdView)
	}

	if src.RawMetricThresholdView != nil {
		return json.Marshal(&src.RawMetricThresholdView)
	}

	if src.TimeMetricThresholdView != nil {
		return json.Marshal(&src.TimeMetricThresholdView)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ServerlessMetricThresholdView) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataMetricThresholdView != nil {
		return obj.DataMetricThresholdView
	}

	if obj.RPUMetricThresholdView != nil {
		return obj.RPUMetricThresholdView
	}

	if obj.RawMetricThresholdView != nil {
		return obj.RawMetricThresholdView
	}

	if obj.TimeMetricThresholdView != nil {
		return obj.TimeMetricThresholdView
	}

	// all schemas are nil
	return nil
}

type NullableServerlessMetricThresholdView struct {
	value *ServerlessMetricThresholdView
	isSet bool
}

func (v NullableServerlessMetricThresholdView) Get() *ServerlessMetricThresholdView {
	return v.value
}

func (v *NullableServerlessMetricThresholdView) Set(val *ServerlessMetricThresholdView) {
	v.value = val
	v.isSet = true
}

func (v NullableServerlessMetricThresholdView) IsSet() bool {
	return v.isSet
}

func (v *NullableServerlessMetricThresholdView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerlessMetricThresholdView(val *ServerlessMetricThresholdView) *NullableServerlessMetricThresholdView {
	return &NullableServerlessMetricThresholdView{value: val, isSet: true}
}

func (v NullableServerlessMetricThresholdView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerlessMetricThresholdView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


