/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"time"
)

// checks if the BSONTimestampView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BSONTimestampView{}

// BSONTimestampView BSON timestamp that indicates when the checkpoint token entry in the oplog occurred.
type BSONTimestampView struct {
	// Date and time when the oplog recorded this database operation. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	Date *time.Time `json:"date,omitempty"`
	// Order of the database operation that the oplog recorded at specific date and time.
	Increment *int32 `json:"increment,omitempty"`
}

// NewBSONTimestampView instantiates a new BSONTimestampView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBSONTimestampView() *BSONTimestampView {
	this := BSONTimestampView{}
	return &this
}

// NewBSONTimestampViewWithDefaults instantiates a new BSONTimestampView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBSONTimestampViewWithDefaults() *BSONTimestampView {
	this := BSONTimestampView{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BSONTimestampView) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BSONTimestampView) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BSONTimestampView) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *BSONTimestampView) SetDate(v time.Time) {
	o.Date = &v
}

// GetIncrement returns the Increment field value if set, zero value otherwise.
func (o *BSONTimestampView) GetIncrement() int32 {
	if o == nil || IsNil(o.Increment) {
		var ret int32
		return ret
	}
	return *o.Increment
}

// GetIncrementOk returns a tuple with the Increment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BSONTimestampView) GetIncrementOk() (*int32, bool) {
	if o == nil || IsNil(o.Increment) {
		return nil, false
	}
	return o.Increment, true
}

// HasIncrement returns a boolean if a field has been set.
func (o *BSONTimestampView) HasIncrement() bool {
	if o != nil && !IsNil(o.Increment) {
		return true
	}

	return false
}

// SetIncrement gets a reference to the given int32 and assigns it to the Increment field.
func (o *BSONTimestampView) SetIncrement(v int32) {
	o.Increment = &v
}

func (o BSONTimestampView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BSONTimestampView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: date is readOnly
	// skip: increment is readOnly
	return toSerialize, nil
}

type NullableBSONTimestampView struct {
	value *BSONTimestampView
	isSet bool
}

func (v NullableBSONTimestampView) Get() *BSONTimestampView {
	return v.value
}

func (v *NullableBSONTimestampView) Set(val *BSONTimestampView) {
	v.value = val
	v.isSet = true
}

func (v NullableBSONTimestampView) IsSet() bool {
	return v.isSet
}

func (v *NullableBSONTimestampView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBSONTimestampView(val *BSONTimestampView) *NullableBSONTimestampView {
	return &NullableBSONTimestampView{value: val, isSet: true}
}

func (v NullableBSONTimestampView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBSONTimestampView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


