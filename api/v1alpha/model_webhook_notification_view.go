/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// WebhookNotificationView Webhook notification configuration for MongoDB Cloud to send information when an event triggers an alert condition.
type WebhookNotificationView struct {
	// Number of minutes that MongoDB Cloud waits after detecting an alert condition before it sends out the first notification.
	DelayMin *int32 `json:"delayMin,omitempty"`
	// Number of minutes to wait between successive notifications. MongoDB Cloud sends notifications until someone acknowledges the unacknowledged alert.  PagerDuty, VictorOps, and OpsGenie notifications don't return this element. Configure and manage the notification interval within each of those services.
	IntervalMin *int32 `json:"intervalMin,omitempty"`
	// Human-readable label that displays the alert notification type.
	TypeName string `json:"typeName"`
	// Authentication secret for a webhook-based alert.  Atlas returns this value if you set `\"notifications.[n].typeName\" :\"WEBHOOK\"` and either: * You set `notification.[n].webhookSecret` to a non-empty string * You set a default webhookSecret either on the [Integrations](https://www.mongodb.com/docs/atlas/tutorial/third-party-service-integrations/#std-label-third-party-integrations) page, or with the [Integrations API](#tag/Third-Party-Service-Integrations/operation/createIntegration)  **NOTE**: When you view or edit the alert for a webhook notification, the secret appears completely redacted.
	WebhookSecret *string `json:"webhookSecret,omitempty"`
	// Target URL for a webhook-based alert.  Atlas returns this value if you set `\"notifications.[n].typeName\" :\"WEBHOOK\"` and either: * You set `notification.[n].webhookURL` to a non-empty string * You set a default webhookUrl either on the [Integrations](https://www.mongodb.com/docs/atlas/tutorial/third-party-service-integrations/#std-label-third-party-integrations) page, or with the [Integrations API](#tag/Third-Party-Service-Integrations/operation/createIntegration)  **NOTE**: When you view or edit the alert for a Webhook URL notification, the URL appears partially redacted.
	WebhookUrl *string `json:"webhookUrl,omitempty"`
}

// NewWebhookNotificationView instantiates a new WebhookNotificationView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookNotificationView() *WebhookNotificationView {
	this := WebhookNotificationView{}
	return &this
}

// NewWebhookNotificationViewWithDefaults instantiates a new WebhookNotificationView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookNotificationViewWithDefaults() *WebhookNotificationView {
	this := WebhookNotificationView{}
	return &this
}

// GetDelayMin returns the DelayMin field value if set, zero value otherwise.
func (o *WebhookNotificationView) GetDelayMin() int32 {
	if o == nil || o.DelayMin == nil {
		var ret int32
		return ret
	}
	return *o.DelayMin
}

// GetDelayMinOk returns a tuple with the DelayMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNotificationView) GetDelayMinOk() (*int32, bool) {
	if o == nil || o.DelayMin == nil {
		return nil, false
	}
	return o.DelayMin, true
}

// HasDelayMin returns a boolean if a field has been set.
func (o *WebhookNotificationView) HasDelayMin() bool {
	if o != nil && o.DelayMin != nil {
		return true
	}

	return false
}

// SetDelayMin gets a reference to the given int32 and assigns it to the DelayMin field.
func (o *WebhookNotificationView) SetDelayMin(v int32) {
	o.DelayMin = &v
}

// GetIntervalMin returns the IntervalMin field value if set, zero value otherwise.
func (o *WebhookNotificationView) GetIntervalMin() int32 {
	if o == nil || o.IntervalMin == nil {
		var ret int32
		return ret
	}
	return *o.IntervalMin
}

// GetIntervalMinOk returns a tuple with the IntervalMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNotificationView) GetIntervalMinOk() (*int32, bool) {
	if o == nil || o.IntervalMin == nil {
		return nil, false
	}
	return o.IntervalMin, true
}

// HasIntervalMin returns a boolean if a field has been set.
func (o *WebhookNotificationView) HasIntervalMin() bool {
	if o != nil && o.IntervalMin != nil {
		return true
	}

	return false
}

// SetIntervalMin gets a reference to the given int32 and assigns it to the IntervalMin field.
func (o *WebhookNotificationView) SetIntervalMin(v int32) {
	o.IntervalMin = &v
}

// GetTypeName returns the TypeName field value
func (o *WebhookNotificationView) GetTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value
// and a boolean to check if the value has been set.
func (o *WebhookNotificationView) GetTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeName, true
}

// SetTypeName sets field value
func (o *WebhookNotificationView) SetTypeName(v string) {
	o.TypeName = v
}

// GetWebhookSecret returns the WebhookSecret field value if set, zero value otherwise.
func (o *WebhookNotificationView) GetWebhookSecret() string {
	if o == nil || o.WebhookSecret == nil {
		var ret string
		return ret
	}
	return *o.WebhookSecret
}

// GetWebhookSecretOk returns a tuple with the WebhookSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNotificationView) GetWebhookSecretOk() (*string, bool) {
	if o == nil || o.WebhookSecret == nil {
		return nil, false
	}
	return o.WebhookSecret, true
}

// HasWebhookSecret returns a boolean if a field has been set.
func (o *WebhookNotificationView) HasWebhookSecret() bool {
	if o != nil && o.WebhookSecret != nil {
		return true
	}

	return false
}

// SetWebhookSecret gets a reference to the given string and assigns it to the WebhookSecret field.
func (o *WebhookNotificationView) SetWebhookSecret(v string) {
	o.WebhookSecret = &v
}

// GetWebhookUrl returns the WebhookUrl field value if set, zero value otherwise.
func (o *WebhookNotificationView) GetWebhookUrl() string {
	if o == nil || o.WebhookUrl == nil {
		var ret string
		return ret
	}
	return *o.WebhookUrl
}

// GetWebhookUrlOk returns a tuple with the WebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookNotificationView) GetWebhookUrlOk() (*string, bool) {
	if o == nil || o.WebhookUrl == nil {
		return nil, false
	}
	return o.WebhookUrl, true
}

// HasWebhookUrl returns a boolean if a field has been set.
func (o *WebhookNotificationView) HasWebhookUrl() bool {
	if o != nil && o.WebhookUrl != nil {
		return true
	}

	return false
}

// SetWebhookUrl gets a reference to the given string and assigns it to the WebhookUrl field.
func (o *WebhookNotificationView) SetWebhookUrl(v string) {
	o.WebhookUrl = &v
}

func (o WebhookNotificationView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DelayMin != nil {
		toSerialize["delayMin"] = o.DelayMin
	}
	if o.IntervalMin != nil {
		toSerialize["intervalMin"] = o.IntervalMin
	}
	if true {
		toSerialize["typeName"] = o.TypeName
	}
	if o.WebhookSecret != nil {
		toSerialize["webhookSecret"] = o.WebhookSecret
	}
	if o.WebhookUrl != nil {
		toSerialize["webhookUrl"] = o.WebhookUrl
	}
	return json.Marshal(toSerialize)
}

type NullableWebhookNotificationView struct {
	value *WebhookNotificationView
	isSet bool
}

func (v NullableWebhookNotificationView) Get() *WebhookNotificationView {
	return v.value
}

func (v *NullableWebhookNotificationView) Set(val *WebhookNotificationView) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookNotificationView) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookNotificationView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookNotificationView(val *WebhookNotificationView) *NullableWebhookNotificationView {
	return &NullableWebhookNotificationView{value: val, isSet: true}
}

func (v NullableWebhookNotificationView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookNotificationView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


