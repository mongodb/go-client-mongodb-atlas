/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// TimeMetricUnits Element used to express the quantity in **currentValue.number**. This can be an element of time, storage capacity, and the like. This metric triggered the alert.
type TimeMetricUnits string

// List of TimeMetricUnits
const (
	TIMEMETRICUNITS_NANOSECONDS TimeMetricUnits = "NANOSECONDS"
	TIMEMETRICUNITS_MILLISECONDS TimeMetricUnits = "MILLISECONDS"
	TIMEMETRICUNITS_MILLION_MINUTES TimeMetricUnits = "MILLION_MINUTES"
	TIMEMETRICUNITS_SECONDS TimeMetricUnits = "SECONDS"
	TIMEMETRICUNITS_MINUTES TimeMetricUnits = "MINUTES"
	TIMEMETRICUNITS_HOURS TimeMetricUnits = "HOURS"
	TIMEMETRICUNITS_DAYS TimeMetricUnits = "DAYS"
)

// All allowed values of TimeMetricUnits enum
var AllowedTimeMetricUnitsEnumValues = []TimeMetricUnits{
	"NANOSECONDS",
	"MILLISECONDS",
	"MILLION_MINUTES",
	"SECONDS",
	"MINUTES",
	"HOURS",
	"DAYS",
}

func (v *TimeMetricUnits) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeMetricUnits(value)
	for _, existing := range AllowedTimeMetricUnitsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeMetricUnits", value)
}

// NewTimeMetricUnitsFromValue returns a pointer to a valid TimeMetricUnits
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeMetricUnitsFromValue(v string) (*TimeMetricUnits, error) {
	ev := TimeMetricUnits(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeMetricUnits: valid values are %v", v, AllowedTimeMetricUnitsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeMetricUnits) IsValid() bool {
	for _, existing := range AllowedTimeMetricUnitsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeMetricUnits value
func (v TimeMetricUnits) Ptr() *TimeMetricUnits {
	return &v
}

type NullableTimeMetricUnits struct {
	value *TimeMetricUnits
	isSet bool
}

func (v NullableTimeMetricUnits) Get() *TimeMetricUnits {
	return v.value
}

func (v *NullableTimeMetricUnits) Set(val *TimeMetricUnits) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeMetricUnits) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeMetricUnits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeMetricUnits(val *TimeMetricUnits) *NullableTimeMetricUnits {
	return &NullableTimeMetricUnits{value: val, isSet: true}
}

func (v NullableTimeMetricUnits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeMetricUnits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

