/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// ServerlessTenantEndpointUpdate Update view for a serverless tenant endpoint.
type ServerlessTenantEndpointUpdate struct {
	// Human-readable comment associated with the private endpoint.
	Comment *string `json:"comment,omitempty"`
	ProviderName string `json:"providerName"`
}

// NewServerlessTenantEndpointUpdate instantiates a new ServerlessTenantEndpointUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerlessTenantEndpointUpdate() *ServerlessTenantEndpointUpdate {
	this := ServerlessTenantEndpointUpdate{}
	return &this
}

// NewServerlessTenantEndpointUpdateWithDefaults instantiates a new ServerlessTenantEndpointUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerlessTenantEndpointUpdateWithDefaults() *ServerlessTenantEndpointUpdate {
	this := ServerlessTenantEndpointUpdate{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ServerlessTenantEndpointUpdate) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerlessTenantEndpointUpdate) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ServerlessTenantEndpointUpdate) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ServerlessTenantEndpointUpdate) SetComment(v string) {
	o.Comment = &v
}

// GetProviderName returns the ProviderName field value
func (o *ServerlessTenantEndpointUpdate) GetProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value
// and a boolean to check if the value has been set.
func (o *ServerlessTenantEndpointUpdate) GetProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderName, true
}

// SetProviderName sets field value
func (o *ServerlessTenantEndpointUpdate) SetProviderName(v string) {
	o.ProviderName = v
}

func (o ServerlessTenantEndpointUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if true {
		toSerialize["providerName"] = o.ProviderName
	}
	return json.Marshal(toSerialize)
}

type NullableServerlessTenantEndpointUpdate struct {
	value *ServerlessTenantEndpointUpdate
	isSet bool
}

func (v NullableServerlessTenantEndpointUpdate) Get() *ServerlessTenantEndpointUpdate {
	return v.value
}

func (v *NullableServerlessTenantEndpointUpdate) Set(val *ServerlessTenantEndpointUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableServerlessTenantEndpointUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableServerlessTenantEndpointUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerlessTenantEndpointUpdate(val *ServerlessTenantEndpointUpdate) *NullableServerlessTenantEndpointUpdate {
	return &NullableServerlessTenantEndpointUpdate{value: val, isSet: true}
}

func (v NullableServerlessTenantEndpointUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerlessTenantEndpointUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


