/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the AvailableRegionView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableRegionView{}

// AvailableRegionView List of regions that this cloud provider supports for this instance size.
type AvailableRegionView struct {
	// Flag that indicates whether the cloud provider sets this region as its default. AWS defaults to US_EAST_1, GCP defaults to CENTRAL_US, and AZURE defaults to US_WEST_2.
	Default *bool `json:"default,omitempty"`
	// Human-readable label that identifies the supported region.
	Name *string `json:"name,omitempty"`
}

// NewAvailableRegionView instantiates a new AvailableRegionView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableRegionView() *AvailableRegionView {
	this := AvailableRegionView{}
	return &this
}

// NewAvailableRegionViewWithDefaults instantiates a new AvailableRegionView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableRegionViewWithDefaults() *AvailableRegionView {
	this := AvailableRegionView{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *AvailableRegionView) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableRegionView) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *AvailableRegionView) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *AvailableRegionView) SetDefault(v bool) {
	o.Default = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AvailableRegionView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableRegionView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AvailableRegionView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AvailableRegionView) SetName(v string) {
	o.Name = &v
}

func (o AvailableRegionView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableRegionView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: default is readOnly
	// skip: name is readOnly
	return toSerialize, nil
}

type NullableAvailableRegionView struct {
	value *AvailableRegionView
	isSet bool
}

func (v NullableAvailableRegionView) Get() *AvailableRegionView {
	return v.value
}

func (v *NullableAvailableRegionView) Set(val *AvailableRegionView) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableRegionView) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableRegionView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableRegionView(val *AvailableRegionView) *NullableAvailableRegionView {
	return &NullableAvailableRegionView{value: val, isSet: true}
}

func (v NullableAvailableRegionView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableRegionView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


