/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// ApiIntegrationViewManual Collection of settings that describe third-party integrations.
type ApiIntegrationViewManual struct {
	// Human-readable label that identifies the service to which you want to integrate with MongoDB Cloud. The value must match the third-party service integration type.
	Type *string `json:"type,omitempty"`
}

// NewApiIntegrationViewManual instantiates a new ApiIntegrationViewManual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiIntegrationViewManual() *ApiIntegrationViewManual {
	this := ApiIntegrationViewManual{}
	return &this
}

// NewApiIntegrationViewManualWithDefaults instantiates a new ApiIntegrationViewManual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiIntegrationViewManualWithDefaults() *ApiIntegrationViewManual {
	this := ApiIntegrationViewManual{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiIntegrationViewManual) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiIntegrationViewManual) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiIntegrationViewManual) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiIntegrationViewManual) SetType(v string) {
	o.Type = &v
}

func (o ApiIntegrationViewManual) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableApiIntegrationViewManual struct {
	value *ApiIntegrationViewManual
	isSet bool
}

func (v NullableApiIntegrationViewManual) Get() *ApiIntegrationViewManual {
	return v.value
}

func (v *NullableApiIntegrationViewManual) Set(val *ApiIntegrationViewManual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiIntegrationViewManual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiIntegrationViewManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiIntegrationViewManual(val *ApiIntegrationViewManual) *NullableApiIntegrationViewManual {
	return &NullableApiIntegrationViewManual{value: val, isSet: true}
}

func (v NullableApiIntegrationViewManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiIntegrationViewManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


