/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// SynonymSource Data set that stores the mapping one or more words map to one or more synonyms of those words.
type SynonymSource struct {
	// Human-readable label that identifies the MongoDB collection that stores words and their applicable synonyms.
	Collection string `json:"collection"`
}

// NewSynonymSource instantiates a new SynonymSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSynonymSource() *SynonymSource {
	this := SynonymSource{}
	return &this
}

// NewSynonymSourceWithDefaults instantiates a new SynonymSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSynonymSourceWithDefaults() *SynonymSource {
	this := SynonymSource{}
	return &this
}

// GetCollection returns the Collection field value
func (o *SynonymSource) GetCollection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value
// and a boolean to check if the value has been set.
func (o *SynonymSource) GetCollectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Collection, true
}

// SetCollection sets field value
func (o *SynonymSource) SetCollection(v string) {
	o.Collection = v
}

func (o SynonymSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["collection"] = o.Collection
	}
	return json.Marshal(toSerialize)
}

type NullableSynonymSource struct {
	value *SynonymSource
	isSet bool
}

func (v NullableSynonymSource) Get() *SynonymSource {
	return v.value
}

func (v *NullableSynonymSource) Set(val *SynonymSource) {
	v.value = val
	v.isSet = true
}

func (v NullableSynonymSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSynonymSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSynonymSource(val *SynonymSource) *NullableSynonymSource {
	return &NullableSynonymSource{value: val, isSet: true}
}

func (v NullableSynonymSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSynonymSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


