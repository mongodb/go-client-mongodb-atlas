/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// MatcherFieldView the model 'MatcherFieldView'
type MatcherFieldView string

// List of MatcherFieldView
const (
	MATCHERFIELDVIEW_APPLICATION_ID MatcherFieldView = "APPLICATION_ID"
	MATCHERFIELDVIEW_CLUSTER_NAME MatcherFieldView = "CLUSTER_NAME"
	MATCHERFIELDVIEW_TYPE_NAME MatcherFieldView = "TYPE_NAME"
	MATCHERFIELDVIEW_HOSTNAME MatcherFieldView = "HOSTNAME"
	MATCHERFIELDVIEW_PORT MatcherFieldView = "PORT"
	MATCHERFIELDVIEW_HOSTNAME_AND_PORT MatcherFieldView = "HOSTNAME_AND_PORT"
	MATCHERFIELDVIEW_REPLICA_SET_NAME MatcherFieldView = "REPLICA_SET_NAME"
	MATCHERFIELDVIEW_SHARD_NAME MatcherFieldView = "SHARD_NAME"
)

// All allowed values of MatcherFieldView enum
var AllowedMatcherFieldViewEnumValues = []MatcherFieldView{
	"APPLICATION_ID",
	"CLUSTER_NAME",
	"TYPE_NAME",
	"HOSTNAME",
	"PORT",
	"HOSTNAME_AND_PORT",
	"REPLICA_SET_NAME",
	"SHARD_NAME",
}

func (v *MatcherFieldView) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MatcherFieldView(value)
	for _, existing := range AllowedMatcherFieldViewEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MatcherFieldView", value)
}

// NewMatcherFieldViewFromValue returns a pointer to a valid MatcherFieldView
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMatcherFieldViewFromValue(v string) (*MatcherFieldView, error) {
	ev := MatcherFieldView(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MatcherFieldView: valid values are %v", v, AllowedMatcherFieldViewEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MatcherFieldView) IsValid() bool {
	for _, existing := range AllowedMatcherFieldViewEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MatcherFieldView value
func (v MatcherFieldView) Ptr() *MatcherFieldView {
	return &v
}

type NullableMatcherFieldView struct {
	value *MatcherFieldView
	isSet bool
}

func (v NullableMatcherFieldView) Get() *MatcherFieldView {
	return v.value
}

func (v *NullableMatcherFieldView) Set(val *MatcherFieldView) {
	v.value = val
	v.isSet = true
}

func (v NullableMatcherFieldView) IsSet() bool {
	return v.isSet
}

func (v *NullableMatcherFieldView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatcherFieldView(val *MatcherFieldView) *NullableMatcherFieldView {
	return &NullableMatcherFieldView{value: val, isSet: true}
}

func (v NullableMatcherFieldView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatcherFieldView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

