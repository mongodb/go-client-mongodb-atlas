/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// ServerlessProviderSettings Group of cloud provider settings that configure the provisioned MongoDB serverless instance.
type ServerlessProviderSettings struct {
	// Cloud service provider on which MongoDB Cloud provisioned the serverless instance.
	BackingProviderName string `json:"backingProviderName"`
	// Human-readable label that identifies the cloud service provider.
	ProviderName *string `json:"providerName,omitempty"`
	// Human-readable label that identifies the geographic location of your MongoDB serverless instance. The region you choose can affect network latency for clients accessing your databases. For a complete list of region names, see [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/#std-label-amazon-aws), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), and [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
	RegionName string `json:"regionName"`
}

// NewServerlessProviderSettings instantiates a new ServerlessProviderSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerlessProviderSettings() *ServerlessProviderSettings {
	this := ServerlessProviderSettings{}
	var providerName string = "SERVERLESS"
	this.ProviderName = &providerName
	return &this
}

// NewServerlessProviderSettingsWithDefaults instantiates a new ServerlessProviderSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerlessProviderSettingsWithDefaults() *ServerlessProviderSettings {
	this := ServerlessProviderSettings{}
	var providerName string = "SERVERLESS"
	this.ProviderName = &providerName
	return &this
}

// GetBackingProviderName returns the BackingProviderName field value
func (o *ServerlessProviderSettings) GetBackingProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackingProviderName
}

// GetBackingProviderNameOk returns a tuple with the BackingProviderName field value
// and a boolean to check if the value has been set.
func (o *ServerlessProviderSettings) GetBackingProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackingProviderName, true
}

// SetBackingProviderName sets field value
func (o *ServerlessProviderSettings) SetBackingProviderName(v string) {
	o.BackingProviderName = v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise.
func (o *ServerlessProviderSettings) GetProviderName() string {
	if o == nil || o.ProviderName == nil {
		var ret string
		return ret
	}
	return *o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerlessProviderSettings) GetProviderNameOk() (*string, bool) {
	if o == nil || o.ProviderName == nil {
		return nil, false
	}
	return o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *ServerlessProviderSettings) HasProviderName() bool {
	if o != nil && o.ProviderName != nil {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given string and assigns it to the ProviderName field.
func (o *ServerlessProviderSettings) SetProviderName(v string) {
	o.ProviderName = &v
}

// GetRegionName returns the RegionName field value
func (o *ServerlessProviderSettings) GetRegionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value
// and a boolean to check if the value has been set.
func (o *ServerlessProviderSettings) GetRegionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionName, true
}

// SetRegionName sets field value
func (o *ServerlessProviderSettings) SetRegionName(v string) {
	o.RegionName = v
}

func (o ServerlessProviderSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["backingProviderName"] = o.BackingProviderName
	}
	if o.ProviderName != nil {
		toSerialize["providerName"] = o.ProviderName
	}
	if true {
		toSerialize["regionName"] = o.RegionName
	}
	return json.Marshal(toSerialize)
}

type NullableServerlessProviderSettings struct {
	value *ServerlessProviderSettings
	isSet bool
}

func (v NullableServerlessProviderSettings) Get() *ServerlessProviderSettings {
	return v.value
}

func (v *NullableServerlessProviderSettings) Set(val *ServerlessProviderSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableServerlessProviderSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableServerlessProviderSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerlessProviderSettings(val *ServerlessProviderSettings) *NullableServerlessProviderSettings {
	return &NullableServerlessProviderSettings{value: val, isSet: true}
}

func (v NullableServerlessProviderSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerlessProviderSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


