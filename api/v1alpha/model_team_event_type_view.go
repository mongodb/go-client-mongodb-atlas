/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// TeamEventTypeView Unique identifier of event type.
type TeamEventTypeView string

// List of TeamEventTypeView
const (
	TEAMEVENTTYPEVIEW_CREATED TeamEventTypeView = "TEAM_CREATED"
	TEAMEVENTTYPEVIEW_DELETED TeamEventTypeView = "TEAM_DELETED"
	TEAMEVENTTYPEVIEW_UPDATED TeamEventTypeView = "TEAM_UPDATED"
	TEAMEVENTTYPEVIEW_NAME_CHANGED TeamEventTypeView = "TEAM_NAME_CHANGED"
	TEAMEVENTTYPEVIEW_ADDED_TO_GROUP TeamEventTypeView = "TEAM_ADDED_TO_GROUP"
	TEAMEVENTTYPEVIEW_REMOVED_FROM_GROUP TeamEventTypeView = "TEAM_REMOVED_FROM_GROUP"
	TEAMEVENTTYPEVIEW_ROLES_MODIFIED TeamEventTypeView = "TEAM_ROLES_MODIFIED"
)

// All allowed values of TeamEventTypeView enum
var AllowedTeamEventTypeViewEnumValues = []TeamEventTypeView{
	"TEAM_CREATED",
	"TEAM_DELETED",
	"TEAM_UPDATED",
	"TEAM_NAME_CHANGED",
	"TEAM_ADDED_TO_GROUP",
	"TEAM_REMOVED_FROM_GROUP",
	"TEAM_ROLES_MODIFIED",
}

func (v *TeamEventTypeView) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TeamEventTypeView(value)
	for _, existing := range AllowedTeamEventTypeViewEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TeamEventTypeView", value)
}

// NewTeamEventTypeViewFromValue returns a pointer to a valid TeamEventTypeView
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTeamEventTypeViewFromValue(v string) (*TeamEventTypeView, error) {
	ev := TeamEventTypeView(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TeamEventTypeView: valid values are %v", v, AllowedTeamEventTypeViewEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TeamEventTypeView) IsValid() bool {
	for _, existing := range AllowedTeamEventTypeViewEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TeamEventTypeView value
func (v TeamEventTypeView) Ptr() *TeamEventTypeView {
	return &v
}

type NullableTeamEventTypeView struct {
	value *TeamEventTypeView
	isSet bool
}

func (v NullableTeamEventTypeView) Get() *TeamEventTypeView {
	return v.value
}

func (v *NullableTeamEventTypeView) Set(val *TeamEventTypeView) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamEventTypeView) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamEventTypeView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamEventTypeView(val *TeamEventTypeView) *NullableTeamEventTypeView {
	return &NullableTeamEventTypeView{value: val, isSet: true}
}

func (v NullableTeamEventTypeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamEventTypeView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

