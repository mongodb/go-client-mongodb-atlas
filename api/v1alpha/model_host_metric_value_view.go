/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the HostMetricValueView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostMetricValueView{}

// HostMetricValueView Value of the metric that triggered the alert. The resource returns this parameter for alerts of events impacting hosts.
type HostMetricValueView struct {
	// Amount of the **metricName** recorded at the time of the event. This value triggered the alert.
	Number *float64 `json:"number,omitempty"`
	Units *string `json:"units,omitempty"`
}

// NewHostMetricValueView instantiates a new HostMetricValueView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostMetricValueView() *HostMetricValueView {
	this := HostMetricValueView{}
	return &this
}

// NewHostMetricValueViewWithDefaults instantiates a new HostMetricValueView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostMetricValueViewWithDefaults() *HostMetricValueView {
	this := HostMetricValueView{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *HostMetricValueView) GetNumber() float64 {
	if o == nil || IsNil(o.Number) {
		var ret float64
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostMetricValueView) GetNumberOk() (*float64, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *HostMetricValueView) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given float64 and assigns it to the Number field.
func (o *HostMetricValueView) SetNumber(v float64) {
	o.Number = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *HostMetricValueView) GetUnits() string {
	if o == nil || IsNil(o.Units) {
		var ret string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostMetricValueView) GetUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *HostMetricValueView) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *HostMetricValueView) SetUnits(v string) {
	o.Units = &v
}

func (o HostMetricValueView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostMetricValueView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: number is readOnly
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	return toSerialize, nil
}

type NullableHostMetricValueView struct {
	value *HostMetricValueView
	isSet bool
}

func (v NullableHostMetricValueView) Get() *HostMetricValueView {
	return v.value
}

func (v *NullableHostMetricValueView) Set(val *HostMetricValueView) {
	v.value = val
	v.isSet = true
}

func (v NullableHostMetricValueView) IsSet() bool {
	return v.isSet
}

func (v *NullableHostMetricValueView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostMetricValueView(val *HostMetricValueView) *NullableHostMetricValueView {
	return &NullableHostMetricValueView{value: val, isSet: true}
}

func (v NullableHostMetricValueView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostMetricValueView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


