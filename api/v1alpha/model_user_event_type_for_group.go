/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// UserEventTypeForGroup Unique identifier of event type.
type UserEventTypeForGroup string

// List of UserEventTypeForGroup
const (
	USEREVENTTYPEFORGROUP_JOINED_GROUP UserEventTypeForGroup = "JOINED_GROUP"
	USEREVENTTYPEFORGROUP_REMOVED_FROM_GROUP UserEventTypeForGroup = "REMOVED_FROM_GROUP"
	USEREVENTTYPEFORGROUP_INVITED_TO_GROUP UserEventTypeForGroup = "INVITED_TO_GROUP"
	USEREVENTTYPEFORGROUP_REQUESTED_TO_JOIN_GROUP UserEventTypeForGroup = "REQUESTED_TO_JOIN_GROUP"
	USEREVENTTYPEFORGROUP_USER_ROLES_CHANGED_AUDIT UserEventTypeForGroup = "USER_ROLES_CHANGED_AUDIT"
	USEREVENTTYPEFORGROUP_JOIN_GROUP_REQUEST_DENIED_AUDIT UserEventTypeForGroup = "JOIN_GROUP_REQUEST_DENIED_AUDIT"
	USEREVENTTYPEFORGROUP_JOIN_GROUP_REQUEST_APPROVED_AUDIT UserEventTypeForGroup = "JOIN_GROUP_REQUEST_APPROVED_AUDIT"
)

// All allowed values of UserEventTypeForGroup enum
var AllowedUserEventTypeForGroupEnumValues = []UserEventTypeForGroup{
	"JOINED_GROUP",
	"REMOVED_FROM_GROUP",
	"INVITED_TO_GROUP",
	"REQUESTED_TO_JOIN_GROUP",
	"USER_ROLES_CHANGED_AUDIT",
	"JOIN_GROUP_REQUEST_DENIED_AUDIT",
	"JOIN_GROUP_REQUEST_APPROVED_AUDIT",
}

func (v *UserEventTypeForGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserEventTypeForGroup(value)
	for _, existing := range AllowedUserEventTypeForGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserEventTypeForGroup", value)
}

// NewUserEventTypeForGroupFromValue returns a pointer to a valid UserEventTypeForGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserEventTypeForGroupFromValue(v string) (*UserEventTypeForGroup, error) {
	ev := UserEventTypeForGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserEventTypeForGroup: valid values are %v", v, AllowedUserEventTypeForGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserEventTypeForGroup) IsValid() bool {
	for _, existing := range AllowedUserEventTypeForGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserEventTypeForGroup value
func (v UserEventTypeForGroup) Ptr() *UserEventTypeForGroup {
	return &v
}

type NullableUserEventTypeForGroup struct {
	value *UserEventTypeForGroup
	isSet bool
}

func (v NullableUserEventTypeForGroup) Get() *UserEventTypeForGroup {
	return v.value
}

func (v *NullableUserEventTypeForGroup) Set(val *UserEventTypeForGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEventTypeForGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEventTypeForGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEventTypeForGroup(val *UserEventTypeForGroup) *NullableUserEventTypeForGroup {
	return &NullableUserEventTypeForGroup{value: val, isSet: true}
}

func (v NullableUserEventTypeForGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEventTypeForGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

