/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// AWSCloudProviderContainerAllOf struct for AWSCloudProviderContainerAllOf
type AWSCloudProviderContainerAllOf struct {
	// IP addresses expressed in Classless Inter-Domain Routing (CIDR) notation that MongoDB Cloud uses for the network peering containers in your project. MongoDB Cloud assigns all of the project's clusters deployed to this cloud provider an IP address from this range. MongoDB Cloud locks this value if an M10 or greater cluster or a network peering connection exists in this project.  These CIDR blocks must fall within the ranges reserved per RFC 1918. AWS and Azure further limit the block to between the `/24` and  `/21` ranges.  To modify the CIDR block, the target project cannot have:  - Any M10 or greater clusters - Any other VPC peering connections   You can also create a new project and create a network peering connection to set the desired MongoDB Cloud network peering container CIDR block for that project. MongoDB Cloud limits the number of MongoDB nodes per network peering connection based on the CIDR block and the region selected for the project.   **Example:** A project in an Amazon Web Services (AWS) region supporting three availability zones and an MongoDB CIDR network peering container block of limit of `/24` equals 27 three-node replica sets.
	AtlasCidrBlock *string `json:"atlasCidrBlock,omitempty"`
	// Geographic area that Amazon Web Services (AWS) defines to which MongoDB Cloud deployed this network peering container.
	RegionName *string `json:"regionName,omitempty"`
	// Unique string that identifies the MongoDB Cloud VPC on AWS.
	VpcId *string `json:"vpcId,omitempty"`
}

// NewAWSCloudProviderContainerAllOf instantiates a new AWSCloudProviderContainerAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSCloudProviderContainerAllOf() *AWSCloudProviderContainerAllOf {
	this := AWSCloudProviderContainerAllOf{}
	return &this
}

// NewAWSCloudProviderContainerAllOfWithDefaults instantiates a new AWSCloudProviderContainerAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSCloudProviderContainerAllOfWithDefaults() *AWSCloudProviderContainerAllOf {
	this := AWSCloudProviderContainerAllOf{}
	return &this
}

// GetAtlasCidrBlock returns the AtlasCidrBlock field value if set, zero value otherwise.
func (o *AWSCloudProviderContainerAllOf) GetAtlasCidrBlock() string {
	if o == nil || o.AtlasCidrBlock == nil {
		var ret string
		return ret
	}
	return *o.AtlasCidrBlock
}

// GetAtlasCidrBlockOk returns a tuple with the AtlasCidrBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSCloudProviderContainerAllOf) GetAtlasCidrBlockOk() (*string, bool) {
	if o == nil || o.AtlasCidrBlock == nil {
		return nil, false
	}
	return o.AtlasCidrBlock, true
}

// HasAtlasCidrBlock returns a boolean if a field has been set.
func (o *AWSCloudProviderContainerAllOf) HasAtlasCidrBlock() bool {
	if o != nil && o.AtlasCidrBlock != nil {
		return true
	}

	return false
}

// SetAtlasCidrBlock gets a reference to the given string and assigns it to the AtlasCidrBlock field.
func (o *AWSCloudProviderContainerAllOf) SetAtlasCidrBlock(v string) {
	o.AtlasCidrBlock = &v
}

// GetRegionName returns the RegionName field value if set, zero value otherwise.
func (o *AWSCloudProviderContainerAllOf) GetRegionName() string {
	if o == nil || o.RegionName == nil {
		var ret string
		return ret
	}
	return *o.RegionName
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSCloudProviderContainerAllOf) GetRegionNameOk() (*string, bool) {
	if o == nil || o.RegionName == nil {
		return nil, false
	}
	return o.RegionName, true
}

// HasRegionName returns a boolean if a field has been set.
func (o *AWSCloudProviderContainerAllOf) HasRegionName() bool {
	if o != nil && o.RegionName != nil {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given string and assigns it to the RegionName field.
func (o *AWSCloudProviderContainerAllOf) SetRegionName(v string) {
	o.RegionName = &v
}

// GetVpcId returns the VpcId field value if set, zero value otherwise.
func (o *AWSCloudProviderContainerAllOf) GetVpcId() string {
	if o == nil || o.VpcId == nil {
		var ret string
		return ret
	}
	return *o.VpcId
}

// GetVpcIdOk returns a tuple with the VpcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSCloudProviderContainerAllOf) GetVpcIdOk() (*string, bool) {
	if o == nil || o.VpcId == nil {
		return nil, false
	}
	return o.VpcId, true
}

// HasVpcId returns a boolean if a field has been set.
func (o *AWSCloudProviderContainerAllOf) HasVpcId() bool {
	if o != nil && o.VpcId != nil {
		return true
	}

	return false
}

// SetVpcId gets a reference to the given string and assigns it to the VpcId field.
func (o *AWSCloudProviderContainerAllOf) SetVpcId(v string) {
	o.VpcId = &v
}

func (o AWSCloudProviderContainerAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AtlasCidrBlock != nil {
		toSerialize["atlasCidrBlock"] = o.AtlasCidrBlock
	}
	if o.RegionName != nil {
		toSerialize["regionName"] = o.RegionName
	}
	if o.VpcId != nil {
		toSerialize["vpcId"] = o.VpcId
	}
	return json.Marshal(toSerialize)
}

type NullableAWSCloudProviderContainerAllOf struct {
	value *AWSCloudProviderContainerAllOf
	isSet bool
}

func (v NullableAWSCloudProviderContainerAllOf) Get() *AWSCloudProviderContainerAllOf {
	return v.value
}

func (v *NullableAWSCloudProviderContainerAllOf) Set(val *AWSCloudProviderContainerAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSCloudProviderContainerAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSCloudProviderContainerAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSCloudProviderContainerAllOf(val *AWSCloudProviderContainerAllOf) *NullableAWSCloudProviderContainerAllOf {
	return &NullableAWSCloudProviderContainerAllOf{value: val, isSet: true}
}

func (v NullableAWSCloudProviderContainerAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSCloudProviderContainerAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


