/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// CloudProviderAccessDataLakeFeatureUsageAllOf struct for CloudProviderAccessDataLakeFeatureUsageAllOf
type CloudProviderAccessDataLakeFeatureUsageAllOf struct {
	FeatureId *CloudProviderAccessFeatureUsageDataLakeFeatureId `json:"featureId,omitempty"`
}

// NewCloudProviderAccessDataLakeFeatureUsageAllOf instantiates a new CloudProviderAccessDataLakeFeatureUsageAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudProviderAccessDataLakeFeatureUsageAllOf() *CloudProviderAccessDataLakeFeatureUsageAllOf {
	this := CloudProviderAccessDataLakeFeatureUsageAllOf{}
	return &this
}

// NewCloudProviderAccessDataLakeFeatureUsageAllOfWithDefaults instantiates a new CloudProviderAccessDataLakeFeatureUsageAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudProviderAccessDataLakeFeatureUsageAllOfWithDefaults() *CloudProviderAccessDataLakeFeatureUsageAllOf {
	this := CloudProviderAccessDataLakeFeatureUsageAllOf{}
	return &this
}

// GetFeatureId returns the FeatureId field value if set, zero value otherwise.
func (o *CloudProviderAccessDataLakeFeatureUsageAllOf) GetFeatureId() CloudProviderAccessFeatureUsageDataLakeFeatureId {
	if o == nil || o.FeatureId == nil {
		var ret CloudProviderAccessFeatureUsageDataLakeFeatureId
		return ret
	}
	return *o.FeatureId
}

// GetFeatureIdOk returns a tuple with the FeatureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudProviderAccessDataLakeFeatureUsageAllOf) GetFeatureIdOk() (*CloudProviderAccessFeatureUsageDataLakeFeatureId, bool) {
	if o == nil || o.FeatureId == nil {
		return nil, false
	}
	return o.FeatureId, true
}

// HasFeatureId returns a boolean if a field has been set.
func (o *CloudProviderAccessDataLakeFeatureUsageAllOf) HasFeatureId() bool {
	if o != nil && o.FeatureId != nil {
		return true
	}

	return false
}

// SetFeatureId gets a reference to the given CloudProviderAccessFeatureUsageDataLakeFeatureId and assigns it to the FeatureId field.
func (o *CloudProviderAccessDataLakeFeatureUsageAllOf) SetFeatureId(v CloudProviderAccessFeatureUsageDataLakeFeatureId) {
	o.FeatureId = &v
}

func (o CloudProviderAccessDataLakeFeatureUsageAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FeatureId != nil {
		toSerialize["featureId"] = o.FeatureId
	}
	return json.Marshal(toSerialize)
}

type NullableCloudProviderAccessDataLakeFeatureUsageAllOf struct {
	value *CloudProviderAccessDataLakeFeatureUsageAllOf
	isSet bool
}

func (v NullableCloudProviderAccessDataLakeFeatureUsageAllOf) Get() *CloudProviderAccessDataLakeFeatureUsageAllOf {
	return v.value
}

func (v *NullableCloudProviderAccessDataLakeFeatureUsageAllOf) Set(val *CloudProviderAccessDataLakeFeatureUsageAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudProviderAccessDataLakeFeatureUsageAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudProviderAccessDataLakeFeatureUsageAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudProviderAccessDataLakeFeatureUsageAllOf(val *CloudProviderAccessDataLakeFeatureUsageAllOf) *NullableCloudProviderAccessDataLakeFeatureUsageAllOf {
	return &NullableCloudProviderAccessDataLakeFeatureUsageAllOf{value: val, isSet: true}
}

func (v NullableCloudProviderAccessDataLakeFeatureUsageAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudProviderAccessDataLakeFeatureUsageAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


