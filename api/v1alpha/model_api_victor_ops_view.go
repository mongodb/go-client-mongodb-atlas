/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// ApiVictorOpsView Details to integrate one Splunk On-Call account with one MongoDB Cloud project.
type ApiVictorOpsView struct {
	// Key that allows MongoDB Cloud to access your VictorOps account.  **NOTE**: After you create a notification which requires an API or integration key, the key appears partially redacted when you:  * View or edit the alert through the Atlas UI.  * Query the alert for the notification through the Atlas Administration API.
	ApiKey string `json:"apiKey"`
	// Routing key associated with your Splunk On-Call account.
	RoutingKey *string `json:"routingKey,omitempty"`
}

// NewApiVictorOpsView instantiates a new ApiVictorOpsView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiVictorOpsView() *ApiVictorOpsView {
	this := ApiVictorOpsView{}
	return &this
}

// NewApiVictorOpsViewWithDefaults instantiates a new ApiVictorOpsView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiVictorOpsViewWithDefaults() *ApiVictorOpsView {
	this := ApiVictorOpsView{}
	return &this
}

// GetApiKey returns the ApiKey field value
func (o *ApiVictorOpsView) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *ApiVictorOpsView) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *ApiVictorOpsView) SetApiKey(v string) {
	o.ApiKey = v
}

// GetRoutingKey returns the RoutingKey field value if set, zero value otherwise.
func (o *ApiVictorOpsView) GetRoutingKey() string {
	if o == nil || o.RoutingKey == nil {
		var ret string
		return ret
	}
	return *o.RoutingKey
}

// GetRoutingKeyOk returns a tuple with the RoutingKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiVictorOpsView) GetRoutingKeyOk() (*string, bool) {
	if o == nil || o.RoutingKey == nil {
		return nil, false
	}
	return o.RoutingKey, true
}

// HasRoutingKey returns a boolean if a field has been set.
func (o *ApiVictorOpsView) HasRoutingKey() bool {
	if o != nil && o.RoutingKey != nil {
		return true
	}

	return false
}

// SetRoutingKey gets a reference to the given string and assigns it to the RoutingKey field.
func (o *ApiVictorOpsView) SetRoutingKey(v string) {
	o.RoutingKey = &v
}

func (o ApiVictorOpsView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["apiKey"] = o.ApiKey
	}
	if o.RoutingKey != nil {
		toSerialize["routingKey"] = o.RoutingKey
	}
	return json.Marshal(toSerialize)
}

type NullableApiVictorOpsView struct {
	value *ApiVictorOpsView
	isSet bool
}

func (v NullableApiVictorOpsView) Get() *ApiVictorOpsView {
	return v.value
}

func (v *NullableApiVictorOpsView) Set(val *ApiVictorOpsView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiVictorOpsView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiVictorOpsView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiVictorOpsView(val *ApiVictorOpsView) *NullableApiVictorOpsView {
	return &NullableApiVictorOpsView{value: val, isSet: true}
}

func (v NullableApiVictorOpsView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiVictorOpsView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


