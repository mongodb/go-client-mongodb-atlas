/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// HostMetricEventType Host Metric Event Types.
type HostMetricEventType string

// List of HostMetricEventType
const (
	HOSTMETRICEVENTTYPE_INSIDE_METRIC_THRESHOLD HostMetricEventType = "INSIDE_METRIC_THRESHOLD"
	HOSTMETRICEVENTTYPE_OUTSIDE_METRIC_THRESHOLD HostMetricEventType = "OUTSIDE_METRIC_THRESHOLD"
)

// All allowed values of HostMetricEventType enum
var AllowedHostMetricEventTypeEnumValues = []HostMetricEventType{
	"INSIDE_METRIC_THRESHOLD",
	"OUTSIDE_METRIC_THRESHOLD",
}

func (v *HostMetricEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HostMetricEventType(value)
	for _, existing := range AllowedHostMetricEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HostMetricEventType", value)
}

// NewHostMetricEventTypeFromValue returns a pointer to a valid HostMetricEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostMetricEventTypeFromValue(v string) (*HostMetricEventType, error) {
	ev := HostMetricEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HostMetricEventType: valid values are %v", v, AllowedHostMetricEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostMetricEventType) IsValid() bool {
	for _, existing := range AllowedHostMetricEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HostMetricEventType value
func (v HostMetricEventType) Ptr() *HostMetricEventType {
	return &v
}

type NullableHostMetricEventType struct {
	value *HostMetricEventType
	isSet bool
}

func (v NullableHostMetricEventType) Get() *HostMetricEventType {
	return v.value
}

func (v *NullableHostMetricEventType) Set(val *HostMetricEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableHostMetricEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableHostMetricEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostMetricEventType(val *HostMetricEventType) *NullableHostMetricEventType {
	return &NullableHostMetricEventType{value: val, isSet: true}
}

func (v NullableHostMetricEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostMetricEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

