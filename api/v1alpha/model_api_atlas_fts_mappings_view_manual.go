/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the ApiAtlasFTSMappingsViewManual type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiAtlasFTSMappingsViewManual{}

// ApiAtlasFTSMappingsViewManual Index specifications for the collection's fields.
type ApiAtlasFTSMappingsViewManual struct {
	// Flag that indicates whether the index uses dynamic or static mappings. Required if **mappings.fields** is omitted.
	Dynamic *bool `json:"dynamic,omitempty"`
	// One or more field specifications for the Atlas Search index. Required if **mappings.dynamic** is omitted or set to **false**.
	Fields map[string]map[string]interface{} `json:"fields,omitempty"`
}

// NewApiAtlasFTSMappingsViewManual instantiates a new ApiAtlasFTSMappingsViewManual object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAtlasFTSMappingsViewManual() *ApiAtlasFTSMappingsViewManual {
	this := ApiAtlasFTSMappingsViewManual{}
	var dynamic bool = false
	this.Dynamic = &dynamic
	return &this
}

// NewApiAtlasFTSMappingsViewManualWithDefaults instantiates a new ApiAtlasFTSMappingsViewManual object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAtlasFTSMappingsViewManualWithDefaults() *ApiAtlasFTSMappingsViewManual {
	this := ApiAtlasFTSMappingsViewManual{}
	var dynamic bool = false
	this.Dynamic = &dynamic
	return &this
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *ApiAtlasFTSMappingsViewManual) GetDynamic() bool {
	if o == nil || IsNil(o.Dynamic) {
		var ret bool
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasFTSMappingsViewManual) GetDynamicOk() (*bool, bool) {
	if o == nil || IsNil(o.Dynamic) {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *ApiAtlasFTSMappingsViewManual) HasDynamic() bool {
	if o != nil && !IsNil(o.Dynamic) {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given bool and assigns it to the Dynamic field.
func (o *ApiAtlasFTSMappingsViewManual) SetDynamic(v bool) {
	o.Dynamic = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ApiAtlasFTSMappingsViewManual) GetFields() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Fields) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAtlasFTSMappingsViewManual) GetFieldsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Fields) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ApiAtlasFTSMappingsViewManual) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]map[string]interface{} and assigns it to the Fields field.
func (o *ApiAtlasFTSMappingsViewManual) SetFields(v map[string]map[string]interface{}) {
	o.Fields = v
}

func (o ApiAtlasFTSMappingsViewManual) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiAtlasFTSMappingsViewManual) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dynamic) {
		toSerialize["dynamic"] = o.Dynamic
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	return toSerialize, nil
}

type NullableApiAtlasFTSMappingsViewManual struct {
	value *ApiAtlasFTSMappingsViewManual
	isSet bool
}

func (v NullableApiAtlasFTSMappingsViewManual) Get() *ApiAtlasFTSMappingsViewManual {
	return v.value
}

func (v *NullableApiAtlasFTSMappingsViewManual) Set(val *ApiAtlasFTSMappingsViewManual) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAtlasFTSMappingsViewManual) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAtlasFTSMappingsViewManual) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAtlasFTSMappingsViewManual(val *ApiAtlasFTSMappingsViewManual) *NullableApiAtlasFTSMappingsViewManual {
	return &NullableApiAtlasFTSMappingsViewManual{value: val, isSet: true}
}

func (v NullableApiAtlasFTSMappingsViewManual) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAtlasFTSMappingsViewManual) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


