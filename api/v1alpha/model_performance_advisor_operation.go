/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the PerformanceAdvisorOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PerformanceAdvisorOperation{}

// PerformanceAdvisorOperation struct for PerformanceAdvisorOperation
type PerformanceAdvisorOperation struct {
	// List that contains the search criteria that the query uses. To use the values in key-value pairs in these predicates requires **Project Data Access Read Only** permissions or greater. Otherwise, MongoDB Cloud redacts these values.
	Predicates []map[string]interface{} `json:"predicates,omitempty"`
	Stats *PerformanceAdvisorOpStats `json:"stats,omitempty"`
}

// NewPerformanceAdvisorOperation instantiates a new PerformanceAdvisorOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerformanceAdvisorOperation() *PerformanceAdvisorOperation {
	this := PerformanceAdvisorOperation{}
	return &this
}

// NewPerformanceAdvisorOperationWithDefaults instantiates a new PerformanceAdvisorOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerformanceAdvisorOperationWithDefaults() *PerformanceAdvisorOperation {
	this := PerformanceAdvisorOperation{}
	return &this
}

// GetPredicates returns the Predicates field value if set, zero value otherwise.
func (o *PerformanceAdvisorOperation) GetPredicates() []map[string]interface{} {
	if o == nil || IsNil(o.Predicates) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Predicates
}

// GetPredicatesOk returns a tuple with the Predicates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceAdvisorOperation) GetPredicatesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Predicates) {
		return nil, false
	}
	return o.Predicates, true
}

// HasPredicates returns a boolean if a field has been set.
func (o *PerformanceAdvisorOperation) HasPredicates() bool {
	if o != nil && !IsNil(o.Predicates) {
		return true
	}

	return false
}

// SetPredicates gets a reference to the given []map[string]interface{} and assigns it to the Predicates field.
func (o *PerformanceAdvisorOperation) SetPredicates(v []map[string]interface{}) {
	o.Predicates = v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *PerformanceAdvisorOperation) GetStats() PerformanceAdvisorOpStats {
	if o == nil || IsNil(o.Stats) {
		var ret PerformanceAdvisorOpStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PerformanceAdvisorOperation) GetStatsOk() (*PerformanceAdvisorOpStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *PerformanceAdvisorOperation) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given PerformanceAdvisorOpStats and assigns it to the Stats field.
func (o *PerformanceAdvisorOperation) SetStats(v PerformanceAdvisorOpStats) {
	o.Stats = &v
}

func (o PerformanceAdvisorOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PerformanceAdvisorOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: predicates is readOnly
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	return toSerialize, nil
}

type NullablePerformanceAdvisorOperation struct {
	value *PerformanceAdvisorOperation
	isSet bool
}

func (v NullablePerformanceAdvisorOperation) Get() *PerformanceAdvisorOperation {
	return v.value
}

func (v *NullablePerformanceAdvisorOperation) Set(val *PerformanceAdvisorOperation) {
	v.value = val
	v.isSet = true
}

func (v NullablePerformanceAdvisorOperation) IsSet() bool {
	return v.isSet
}

func (v *NullablePerformanceAdvisorOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerformanceAdvisorOperation(val *PerformanceAdvisorOperation) *NullablePerformanceAdvisorOperation {
	return &NullablePerformanceAdvisorOperation{value: val, isSet: true}
}

func (v NullablePerformanceAdvisorOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerformanceAdvisorOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


