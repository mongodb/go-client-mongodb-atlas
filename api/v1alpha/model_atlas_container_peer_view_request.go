/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// AtlasContainerPeerViewRequest - Collection of settings that configures the network connection for a virtual private connection.
type AtlasContainerPeerViewRequest struct {
	AWSPeerVpcRequest *AWSPeerVpcRequest
	AzurePeerNetworkRequest *AzurePeerNetworkRequest
	GCPPeerVpcRequest *GCPPeerVpcRequest
}

// AWSPeerVpcRequestAsAtlasContainerPeerViewRequest is a convenience function that returns AWSPeerVpcRequest wrapped in AtlasContainerPeerViewRequest
func AWSPeerVpcRequestAsAtlasContainerPeerViewRequest(v *AWSPeerVpcRequest) AtlasContainerPeerViewRequest {
	return AtlasContainerPeerViewRequest{
		AWSPeerVpcRequest: v,
	}
}

// AzurePeerNetworkRequestAsAtlasContainerPeerViewRequest is a convenience function that returns AzurePeerNetworkRequest wrapped in AtlasContainerPeerViewRequest
func AzurePeerNetworkRequestAsAtlasContainerPeerViewRequest(v *AzurePeerNetworkRequest) AtlasContainerPeerViewRequest {
	return AtlasContainerPeerViewRequest{
		AzurePeerNetworkRequest: v,
	}
}

// GCPPeerVpcRequestAsAtlasContainerPeerViewRequest is a convenience function that returns GCPPeerVpcRequest wrapped in AtlasContainerPeerViewRequest
func GCPPeerVpcRequestAsAtlasContainerPeerViewRequest(v *GCPPeerVpcRequest) AtlasContainerPeerViewRequest {
	return AtlasContainerPeerViewRequest{
		GCPPeerVpcRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AtlasContainerPeerViewRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'AWS'
	if jsonDict["providerName"] == "AWS" {
		// try to unmarshal JSON data into AWSPeerVpcRequest
		err = json.Unmarshal(data, &dst.AWSPeerVpcRequest)
		if err == nil {
			return nil // data stored in dst.AWSPeerVpcRequest, return on the first match
		} else {
			dst.AWSPeerVpcRequest = nil
			return fmt.Errorf("failed to unmarshal AtlasContainerPeerViewRequest as AWSPeerVpcRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AWSPeerVpcRequest'
	if jsonDict["providerName"] == "AWSPeerVpcRequest" {
		// try to unmarshal JSON data into AWSPeerVpcRequest
		err = json.Unmarshal(data, &dst.AWSPeerVpcRequest)
		if err == nil {
			return nil // data stored in dst.AWSPeerVpcRequest, return on the first match
		} else {
			dst.AWSPeerVpcRequest = nil
			return fmt.Errorf("failed to unmarshal AtlasContainerPeerViewRequest as AWSPeerVpcRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AZURE'
	if jsonDict["providerName"] == "AZURE" {
		// try to unmarshal JSON data into AzurePeerNetworkRequest
		err = json.Unmarshal(data, &dst.AzurePeerNetworkRequest)
		if err == nil {
			return nil // data stored in dst.AzurePeerNetworkRequest, return on the first match
		} else {
			dst.AzurePeerNetworkRequest = nil
			return fmt.Errorf("failed to unmarshal AtlasContainerPeerViewRequest as AzurePeerNetworkRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzurePeerNetworkRequest'
	if jsonDict["providerName"] == "AzurePeerNetworkRequest" {
		// try to unmarshal JSON data into AzurePeerNetworkRequest
		err = json.Unmarshal(data, &dst.AzurePeerNetworkRequest)
		if err == nil {
			return nil // data stored in dst.AzurePeerNetworkRequest, return on the first match
		} else {
			dst.AzurePeerNetworkRequest = nil
			return fmt.Errorf("failed to unmarshal AtlasContainerPeerViewRequest as AzurePeerNetworkRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCP'
	if jsonDict["providerName"] == "GCP" {
		// try to unmarshal JSON data into GCPPeerVpcRequest
		err = json.Unmarshal(data, &dst.GCPPeerVpcRequest)
		if err == nil {
			return nil // data stored in dst.GCPPeerVpcRequest, return on the first match
		} else {
			dst.GCPPeerVpcRequest = nil
			return fmt.Errorf("failed to unmarshal AtlasContainerPeerViewRequest as GCPPeerVpcRequest: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCPPeerVpcRequest'
	if jsonDict["providerName"] == "GCPPeerVpcRequest" {
		// try to unmarshal JSON data into GCPPeerVpcRequest
		err = json.Unmarshal(data, &dst.GCPPeerVpcRequest)
		if err == nil {
			return nil // data stored in dst.GCPPeerVpcRequest, return on the first match
		} else {
			dst.GCPPeerVpcRequest = nil
			return fmt.Errorf("failed to unmarshal AtlasContainerPeerViewRequest as GCPPeerVpcRequest: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AtlasContainerPeerViewRequest) MarshalJSON() ([]byte, error) {
	if src.AWSPeerVpcRequest != nil {
		return json.Marshal(&src.AWSPeerVpcRequest)
	}

	if src.AzurePeerNetworkRequest != nil {
		return json.Marshal(&src.AzurePeerNetworkRequest)
	}

	if src.GCPPeerVpcRequest != nil {
		return json.Marshal(&src.GCPPeerVpcRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AtlasContainerPeerViewRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AWSPeerVpcRequest != nil {
		return obj.AWSPeerVpcRequest
	}

	if obj.AzurePeerNetworkRequest != nil {
		return obj.AzurePeerNetworkRequest
	}

	if obj.GCPPeerVpcRequest != nil {
		return obj.GCPPeerVpcRequest
	}

	// all schemas are nil
	return nil
}

type NullableAtlasContainerPeerViewRequest struct {
	value *AtlasContainerPeerViewRequest
	isSet bool
}

func (v NullableAtlasContainerPeerViewRequest) Get() *AtlasContainerPeerViewRequest {
	return v.value
}

func (v *NullableAtlasContainerPeerViewRequest) Set(val *AtlasContainerPeerViewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAtlasContainerPeerViewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAtlasContainerPeerViewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtlasContainerPeerViewRequest(val *AtlasContainerPeerViewRequest) *NullableAtlasContainerPeerViewRequest {
	return &NullableAtlasContainerPeerViewRequest{value: val, isSet: true}
}

func (v NullableAtlasContainerPeerViewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtlasContainerPeerViewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


