/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the MongoDBAccessLogsListView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MongoDBAccessLogsListView{}

// MongoDBAccessLogsListView struct for MongoDBAccessLogsListView
type MongoDBAccessLogsListView struct {
	// Authentication attempt, one per object, made against the cluster.
	AccessLogs []MongoDBAccessLogsView `json:"accessLogs,omitempty"`
}

// NewMongoDBAccessLogsListView instantiates a new MongoDBAccessLogsListView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongoDBAccessLogsListView() *MongoDBAccessLogsListView {
	this := MongoDBAccessLogsListView{}
	return &this
}

// NewMongoDBAccessLogsListViewWithDefaults instantiates a new MongoDBAccessLogsListView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongoDBAccessLogsListViewWithDefaults() *MongoDBAccessLogsListView {
	this := MongoDBAccessLogsListView{}
	return &this
}

// GetAccessLogs returns the AccessLogs field value if set, zero value otherwise.
func (o *MongoDBAccessLogsListView) GetAccessLogs() []MongoDBAccessLogsView {
	if o == nil || IsNil(o.AccessLogs) {
		var ret []MongoDBAccessLogsView
		return ret
	}
	return o.AccessLogs
}

// GetAccessLogsOk returns a tuple with the AccessLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBAccessLogsListView) GetAccessLogsOk() ([]MongoDBAccessLogsView, bool) {
	if o == nil || IsNil(o.AccessLogs) {
		return nil, false
	}
	return o.AccessLogs, true
}

// HasAccessLogs returns a boolean if a field has been set.
func (o *MongoDBAccessLogsListView) HasAccessLogs() bool {
	if o != nil && !IsNil(o.AccessLogs) {
		return true
	}

	return false
}

// SetAccessLogs gets a reference to the given []MongoDBAccessLogsView and assigns it to the AccessLogs field.
func (o *MongoDBAccessLogsListView) SetAccessLogs(v []MongoDBAccessLogsView) {
	o.AccessLogs = v
}

func (o MongoDBAccessLogsListView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MongoDBAccessLogsListView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: accessLogs is readOnly
	return toSerialize, nil
}

type NullableMongoDBAccessLogsListView struct {
	value *MongoDBAccessLogsListView
	isSet bool
}

func (v NullableMongoDBAccessLogsListView) Get() *MongoDBAccessLogsListView {
	return v.value
}

func (v *NullableMongoDBAccessLogsListView) Set(val *MongoDBAccessLogsListView) {
	v.value = val
	v.isSet = true
}

func (v NullableMongoDBAccessLogsListView) IsSet() bool {
	return v.isSet
}

func (v *NullableMongoDBAccessLogsListView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongoDBAccessLogsListView(val *MongoDBAccessLogsListView) *NullableMongoDBAccessLogsListView {
	return &NullableMongoDBAccessLogsListView{value: val, isSet: true}
}

func (v NullableMongoDBAccessLogsListView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongoDBAccessLogsListView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


