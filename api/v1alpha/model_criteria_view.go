/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// CriteriaView - Rules by which MongoDB MongoDB Cloud archives data.  Use the **criteria.type** field to choose how MongoDB Cloud selects data to archive. Choose data using the age of the data or a MongoDB query. **\"criteria.type\": \"DATE\"** selects documents to archive based on a date. **\"criteria.type\": \"CUSTOM\"** selects documents to archive based on a custom JSON query. MongoDB Cloud doesn't support **\"criteria.type\": \"CUSTOM\"** when **\"collectionType\": \"TIMESERIES\"**.
type CriteriaView struct {
	CustomCriteriaView *CustomCriteriaView
	DateCriteriaView *DateCriteriaView
}

// CustomCriteriaViewAsCriteriaView is a convenience function that returns CustomCriteriaView wrapped in CriteriaView
func CustomCriteriaViewAsCriteriaView(v *CustomCriteriaView) CriteriaView {
	return CriteriaView{
		CustomCriteriaView: v,
	}
}

// DateCriteriaViewAsCriteriaView is a convenience function that returns DateCriteriaView wrapped in CriteriaView
func DateCriteriaViewAsCriteriaView(v *DateCriteriaView) CriteriaView {
	return CriteriaView{
		DateCriteriaView: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CriteriaView) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'CUSTOM'
	if jsonDict["type"] == "CUSTOM" {
		// try to unmarshal JSON data into CustomCriteriaView
		err = json.Unmarshal(data, &dst.CustomCriteriaView)
		if err == nil {
			return nil // data stored in dst.CustomCriteriaView, return on the first match
		} else {
			dst.CustomCriteriaView = nil
			return fmt.Errorf("failed to unmarshal CriteriaView as CustomCriteriaView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CustomCriteriaView'
	if jsonDict["type"] == "CustomCriteriaView" {
		// try to unmarshal JSON data into CustomCriteriaView
		err = json.Unmarshal(data, &dst.CustomCriteriaView)
		if err == nil {
			return nil // data stored in dst.CustomCriteriaView, return on the first match
		} else {
			dst.CustomCriteriaView = nil
			return fmt.Errorf("failed to unmarshal CriteriaView as CustomCriteriaView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DATE'
	if jsonDict["type"] == "DATE" {
		// try to unmarshal JSON data into DateCriteriaView
		err = json.Unmarshal(data, &dst.DateCriteriaView)
		if err == nil {
			return nil // data stored in dst.DateCriteriaView, return on the first match
		} else {
			dst.DateCriteriaView = nil
			return fmt.Errorf("failed to unmarshal CriteriaView as DateCriteriaView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DateCriteriaView'
	if jsonDict["type"] == "DateCriteriaView" {
		// try to unmarshal JSON data into DateCriteriaView
		err = json.Unmarshal(data, &dst.DateCriteriaView)
		if err == nil {
			return nil // data stored in dst.DateCriteriaView, return on the first match
		} else {
			dst.DateCriteriaView = nil
			return fmt.Errorf("failed to unmarshal CriteriaView as DateCriteriaView: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CriteriaView) MarshalJSON() ([]byte, error) {
	if src.CustomCriteriaView != nil {
		return json.Marshal(&src.CustomCriteriaView)
	}

	if src.DateCriteriaView != nil {
		return json.Marshal(&src.DateCriteriaView)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CriteriaView) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CustomCriteriaView != nil {
		return obj.CustomCriteriaView
	}

	if obj.DateCriteriaView != nil {
		return obj.DateCriteriaView
	}

	// all schemas are nil
	return nil
}

type NullableCriteriaView struct {
	value *CriteriaView
	isSet bool
}

func (v NullableCriteriaView) Get() *CriteriaView {
	return v.value
}

func (v *NullableCriteriaView) Set(val *CriteriaView) {
	v.value = val
	v.isSet = true
}

func (v NullableCriteriaView) IsSet() bool {
	return v.isSet
}

func (v *NullableCriteriaView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCriteriaView(val *CriteriaView) *NullableCriteriaView {
	return &NullableCriteriaView{value: val, isSet: true}
}

func (v NullableCriteriaView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCriteriaView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


