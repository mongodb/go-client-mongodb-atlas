/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// OrgEventTypeViewForOrg Unique identifier of event type.
type OrgEventTypeViewForOrg string

// List of OrgEventTypeViewForOrg
const (
	ORGEVENTTYPEVIEWFORORG_ORG_CREATED OrgEventTypeViewForOrg = "ORG_CREATED"
	ORGEVENTTYPEVIEWFORORG_ORG_CREDIT_CARD_ADDED OrgEventTypeViewForOrg = "ORG_CREDIT_CARD_ADDED"
	ORGEVENTTYPEVIEWFORORG_ORG_CREDIT_CARD_UPDATED OrgEventTypeViewForOrg = "ORG_CREDIT_CARD_UPDATED"
	ORGEVENTTYPEVIEWFORORG_ORG_CREDIT_CARD_CURRENT OrgEventTypeViewForOrg = "ORG_CREDIT_CARD_CURRENT"
	ORGEVENTTYPEVIEWFORORG_ORG_CREDIT_CARD_ABOUT_TO_EXPIRE OrgEventTypeViewForOrg = "ORG_CREDIT_CARD_ABOUT_TO_EXPIRE"
	ORGEVENTTYPEVIEWFORORG_ORG_PAYPAL_LINKED OrgEventTypeViewForOrg = "ORG_PAYPAL_LINKED"
	ORGEVENTTYPEVIEWFORORG_ORG_PAYPAL_UPDATED OrgEventTypeViewForOrg = "ORG_PAYPAL_UPDATED"
	ORGEVENTTYPEVIEWFORORG_ORG_PAYPAL_CANCELLED OrgEventTypeViewForOrg = "ORG_PAYPAL_CANCELLED"
	ORGEVENTTYPEVIEWFORORG_ORG_OVERRIDE_PAYMENT_METHOD_ADDED OrgEventTypeViewForOrg = "ORG_OVERRIDE_PAYMENT_METHOD_ADDED"
	ORGEVENTTYPEVIEWFORORG_ORG_ACTIVATED OrgEventTypeViewForOrg = "ORG_ACTIVATED"
	ORGEVENTTYPEVIEWFORORG_ORG_TEMPORARILY_ACTIVATED OrgEventTypeViewForOrg = "ORG_TEMPORARILY_ACTIVATED"
	ORGEVENTTYPEVIEWFORORG_ORG_SUSPENDED OrgEventTypeViewForOrg = "ORG_SUSPENDED"
	ORGEVENTTYPEVIEWFORORG_ORG_ADMIN_SUSPENDED OrgEventTypeViewForOrg = "ORG_ADMIN_SUSPENDED"
	ORGEVENTTYPEVIEWFORORG_ORG_ADMIN_LOCKED OrgEventTypeViewForOrg = "ORG_ADMIN_LOCKED"
	ORGEVENTTYPEVIEWFORORG_ORG_CLUSTERS_DELETED OrgEventTypeViewForOrg = "ORG_CLUSTERS_DELETED"
	ORGEVENTTYPEVIEWFORORG_ORG_CLUSTERS_PAUSED OrgEventTypeViewForOrg = "ORG_CLUSTERS_PAUSED"
	ORGEVENTTYPEVIEWFORORG_ORG_LOCKED OrgEventTypeViewForOrg = "ORG_LOCKED"
	ORGEVENTTYPEVIEWFORORG_ORG_RENAMED OrgEventTypeViewForOrg = "ORG_RENAMED"
	ORGEVENTTYPEVIEWFORORG_ALL_ORG_USERS_HAVE_MFA OrgEventTypeViewForOrg = "ALL_ORG_USERS_HAVE_MFA"
	ORGEVENTTYPEVIEWFORORG_ORG_USERS_WITHOUT_MFA OrgEventTypeViewForOrg = "ORG_USERS_WITHOUT_MFA"
	ORGEVENTTYPEVIEWFORORG_ORG_INVOICE_UNDER_THRESHOLD OrgEventTypeViewForOrg = "ORG_INVOICE_UNDER_THRESHOLD"
	ORGEVENTTYPEVIEWFORORG_ORG_INVOICE_OVER_THRESHOLD OrgEventTypeViewForOrg = "ORG_INVOICE_OVER_THRESHOLD"
	ORGEVENTTYPEVIEWFORORG_ORG_DAILY_BILL_UNDER_THRESHOLD OrgEventTypeViewForOrg = "ORG_DAILY_BILL_UNDER_THRESHOLD"
	ORGEVENTTYPEVIEWFORORG_ORG_DAILY_BILL_OVER_THRESHOLD OrgEventTypeViewForOrg = "ORG_DAILY_BILL_OVER_THRESHOLD"
	ORGEVENTTYPEVIEWFORORG_ORG_GROUP_CHARGES_UNDER_THRESHOLD OrgEventTypeViewForOrg = "ORG_GROUP_CHARGES_UNDER_THRESHOLD"
	ORGEVENTTYPEVIEWFORORG_ORG_GROUP_CHARGES_OVER_THRESHOLD OrgEventTypeViewForOrg = "ORG_GROUP_CHARGES_OVER_THRESHOLD"
	ORGEVENTTYPEVIEWFORORG_ORG_TWO_FACTOR_AUTH_REQUIRED OrgEventTypeViewForOrg = "ORG_TWO_FACTOR_AUTH_REQUIRED"
	ORGEVENTTYPEVIEWFORORG_ORG_TWO_FACTOR_AUTH_OPTIONAL OrgEventTypeViewForOrg = "ORG_TWO_FACTOR_AUTH_OPTIONAL"
	ORGEVENTTYPEVIEWFORORG_ORG_PUBLIC_API_ACCESS_LIST_REQUIRED OrgEventTypeViewForOrg = "ORG_PUBLIC_API_ACCESS_LIST_REQUIRED"
	ORGEVENTTYPEVIEWFORORG_ORG_PUBLIC_API_ACCESS_LIST_NOT_REQUIRED OrgEventTypeViewForOrg = "ORG_PUBLIC_API_ACCESS_LIST_NOT_REQUIRED"
	ORGEVENTTYPEVIEWFORORG_ORG_EMPLOYEE_ACCESS_RESTRICTED OrgEventTypeViewForOrg = "ORG_EMPLOYEE_ACCESS_RESTRICTED"
	ORGEVENTTYPEVIEWFORORG_ORG_EMPLOYEE_ACCESS_UNRESTRICTED OrgEventTypeViewForOrg = "ORG_EMPLOYEE_ACCESS_UNRESTRICTED"
	ORGEVENTTYPEVIEWFORORG_ORG_SFDC_ACCOUNT_ID_CHANGED OrgEventTypeViewForOrg = "ORG_SFDC_ACCOUNT_ID_CHANGED"
	ORGEVENTTYPEVIEWFORORG_ORG_CONNECTED_TO_MLAB OrgEventTypeViewForOrg = "ORG_CONNECTED_TO_MLAB"
	ORGEVENTTYPEVIEWFORORG_ORG_DISCONNECTED_FROM_MLAB OrgEventTypeViewForOrg = "ORG_DISCONNECTED_FROM_MLAB"
	ORGEVENTTYPEVIEWFORORG_ORG_IDP_CERTIFICATE_CURRENT OrgEventTypeViewForOrg = "ORG_IDP_CERTIFICATE_CURRENT"
	ORGEVENTTYPEVIEWFORORG_ORG_IDP_CERTIFICATE_ABOUT_TO_EXPIRE OrgEventTypeViewForOrg = "ORG_IDP_CERTIFICATE_ABOUT_TO_EXPIRE"
	ORGEVENTTYPEVIEWFORORG_ORG_CONNECTED_TO_VERCEL OrgEventTypeViewForOrg = "ORG_CONNECTED_TO_VERCEL"
	ORGEVENTTYPEVIEWFORORG_ORG_DISCONNECTED_FROM_VERCEL OrgEventTypeViewForOrg = "ORG_DISCONNECTED_FROM_VERCEL"
	ORGEVENTTYPEVIEWFORORG_ORG_CONNECTION_UNINSTALLED_FROM_VERCEL OrgEventTypeViewForOrg = "ORG_CONNECTION_UNINSTALLED_FROM_VERCEL"
	ORGEVENTTYPEVIEWFORORG_ORG_UI_IP_ACCESS_LIST_ENABLED OrgEventTypeViewForOrg = "ORG_UI_IP_ACCESS_LIST_ENABLED"
	ORGEVENTTYPEVIEWFORORG_ORG_UI_IP_ACCESS_LIST_DISABLED OrgEventTypeViewForOrg = "ORG_UI_IP_ACCESS_LIST_DISABLED"
	ORGEVENTTYPEVIEWFORORG_ORG_EDITED_UI_IP_ACCESS_LIST_ENTRIES OrgEventTypeViewForOrg = "ORG_EDITED_UI_IP_ACCESS_LIST_ENTRIES"
)

// All allowed values of OrgEventTypeViewForOrg enum
var AllowedOrgEventTypeViewForOrgEnumValues = []OrgEventTypeViewForOrg{
	"ORG_CREATED",
	"ORG_CREDIT_CARD_ADDED",
	"ORG_CREDIT_CARD_UPDATED",
	"ORG_CREDIT_CARD_CURRENT",
	"ORG_CREDIT_CARD_ABOUT_TO_EXPIRE",
	"ORG_PAYPAL_LINKED",
	"ORG_PAYPAL_UPDATED",
	"ORG_PAYPAL_CANCELLED",
	"ORG_OVERRIDE_PAYMENT_METHOD_ADDED",
	"ORG_ACTIVATED",
	"ORG_TEMPORARILY_ACTIVATED",
	"ORG_SUSPENDED",
	"ORG_ADMIN_SUSPENDED",
	"ORG_ADMIN_LOCKED",
	"ORG_CLUSTERS_DELETED",
	"ORG_CLUSTERS_PAUSED",
	"ORG_LOCKED",
	"ORG_RENAMED",
	"ALL_ORG_USERS_HAVE_MFA",
	"ORG_USERS_WITHOUT_MFA",
	"ORG_INVOICE_UNDER_THRESHOLD",
	"ORG_INVOICE_OVER_THRESHOLD",
	"ORG_DAILY_BILL_UNDER_THRESHOLD",
	"ORG_DAILY_BILL_OVER_THRESHOLD",
	"ORG_GROUP_CHARGES_UNDER_THRESHOLD",
	"ORG_GROUP_CHARGES_OVER_THRESHOLD",
	"ORG_TWO_FACTOR_AUTH_REQUIRED",
	"ORG_TWO_FACTOR_AUTH_OPTIONAL",
	"ORG_PUBLIC_API_ACCESS_LIST_REQUIRED",
	"ORG_PUBLIC_API_ACCESS_LIST_NOT_REQUIRED",
	"ORG_EMPLOYEE_ACCESS_RESTRICTED",
	"ORG_EMPLOYEE_ACCESS_UNRESTRICTED",
	"ORG_SFDC_ACCOUNT_ID_CHANGED",
	"ORG_CONNECTED_TO_MLAB",
	"ORG_DISCONNECTED_FROM_MLAB",
	"ORG_IDP_CERTIFICATE_CURRENT",
	"ORG_IDP_CERTIFICATE_ABOUT_TO_EXPIRE",
	"ORG_CONNECTED_TO_VERCEL",
	"ORG_DISCONNECTED_FROM_VERCEL",
	"ORG_CONNECTION_UNINSTALLED_FROM_VERCEL",
	"ORG_UI_IP_ACCESS_LIST_ENABLED",
	"ORG_UI_IP_ACCESS_LIST_DISABLED",
	"ORG_EDITED_UI_IP_ACCESS_LIST_ENTRIES",
}

func (v *OrgEventTypeViewForOrg) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrgEventTypeViewForOrg(value)
	for _, existing := range AllowedOrgEventTypeViewForOrgEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrgEventTypeViewForOrg", value)
}

// NewOrgEventTypeViewForOrgFromValue returns a pointer to a valid OrgEventTypeViewForOrg
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrgEventTypeViewForOrgFromValue(v string) (*OrgEventTypeViewForOrg, error) {
	ev := OrgEventTypeViewForOrg(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrgEventTypeViewForOrg: valid values are %v", v, AllowedOrgEventTypeViewForOrgEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrgEventTypeViewForOrg) IsValid() bool {
	for _, existing := range AllowedOrgEventTypeViewForOrgEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrgEventTypeViewForOrg value
func (v OrgEventTypeViewForOrg) Ptr() *OrgEventTypeViewForOrg {
	return &v
}

type NullableOrgEventTypeViewForOrg struct {
	value *OrgEventTypeViewForOrg
	isSet bool
}

func (v NullableOrgEventTypeViewForOrg) Get() *OrgEventTypeViewForOrg {
	return v.value
}

func (v *NullableOrgEventTypeViewForOrg) Set(val *OrgEventTypeViewForOrg) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgEventTypeViewForOrg) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgEventTypeViewForOrg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgEventTypeViewForOrg(val *OrgEventTypeViewForOrg) *NullableOrgEventTypeViewForOrg {
	return &NullableOrgEventTypeViewForOrg{value: val, isSet: true}
}

func (v NullableOrgEventTypeViewForOrg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgEventTypeViewForOrg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

