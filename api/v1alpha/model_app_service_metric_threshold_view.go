/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// AppServiceMetricThresholdView - Threshold for the metric that, when exceeded, triggers an alert. The metric threshold pertains to event types which reflects changes of measurements and metrics in the app services.
type AppServiceMetricThresholdView struct {
	DataMetricThresholdView *DataMetricThresholdView
	RawMetricThresholdView *RawMetricThresholdView
	TimeMetricThresholdView *TimeMetricThresholdView
}

// DataMetricThresholdViewAsAppServiceMetricThresholdView is a convenience function that returns DataMetricThresholdView wrapped in AppServiceMetricThresholdView
func DataMetricThresholdViewAsAppServiceMetricThresholdView(v *DataMetricThresholdView) AppServiceMetricThresholdView {
	return AppServiceMetricThresholdView{
		DataMetricThresholdView: v,
	}
}

// RawMetricThresholdViewAsAppServiceMetricThresholdView is a convenience function that returns RawMetricThresholdView wrapped in AppServiceMetricThresholdView
func RawMetricThresholdViewAsAppServiceMetricThresholdView(v *RawMetricThresholdView) AppServiceMetricThresholdView {
	return AppServiceMetricThresholdView{
		RawMetricThresholdView: v,
	}
}

// TimeMetricThresholdViewAsAppServiceMetricThresholdView is a convenience function that returns TimeMetricThresholdView wrapped in AppServiceMetricThresholdView
func TimeMetricThresholdViewAsAppServiceMetricThresholdView(v *TimeMetricThresholdView) AppServiceMetricThresholdView {
	return AppServiceMetricThresholdView{
		TimeMetricThresholdView: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AppServiceMetricThresholdView) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'DataMetricThresholdView'
	if jsonDict["metricName"] == "DataMetricThresholdView" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_AUTH_LOGIN_FAIL'
	if jsonDict["metricName"] == "REALM_AUTH_LOGIN_FAIL" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_ENDPOINTS_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_ENDPOINTS_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_ENDPOINTS_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_ENDPOINTS_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_ENDPOINTS_FAILED_REQUESTS'
	if jsonDict["metricName"] == "REALM_ENDPOINTS_FAILED_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_ENDPOINTS_RESPONSE_MS'
	if jsonDict["metricName"] == "REALM_ENDPOINTS_RESPONSE_MS" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_GQL_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_GQL_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_GQL_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_GQL_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_GQL_FAILED_REQUESTS'
	if jsonDict["metricName"] == "REALM_GQL_FAILED_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_GQL_RESPONSE_MS'
	if jsonDict["metricName"] == "REALM_GQL_RESPONSE_MS" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_OVERALL_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_OVERALL_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_OVERALL_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_OVERALL_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_OVERALL_FAILED_REQUESTS'
	if jsonDict["metricName"] == "REALM_OVERALL_FAILED_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDKFNS_FAILED_REQUESTS'
	if jsonDict["metricName"] == "REALM_SDKFNS_FAILED_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_FNS_RESPONSE_MS'
	if jsonDict["metricName"] == "REALM_SDK_FNS_RESPONSE_MS" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_FUNCTIONS_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_SDK_FUNCTIONS_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_FUNCTIONS_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_SDK_FUNCTIONS_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_MQL_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_SDK_MQL_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_MQL_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_SDK_MQL_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_MQL_RESPONSE_MS'
	if jsonDict["metricName"] == "REALM_SDK_MQL_RESPONSE_MS" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_CURRENT_OPLOG_LAG_MS_SUM'
	if jsonDict["metricName"] == "REALM_SYNC_CURRENT_OPLOG_LAG_MS_SUM" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_SYNC_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_NUM_UNSYNCABLE_DOCS_PERCENT'
	if jsonDict["metricName"] == "REALM_SYNC_NUM_UNSYNCABLE_DOCS_PERCENT" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_TRIGGERS_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_TRIGGERS_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_TRIGGERS_CURRENT_OPLOG_LAG_MS_SUM'
	if jsonDict["metricName"] == "REALM_TRIGGERS_CURRENT_OPLOG_LAG_MS_SUM" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_TRIGGERS_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_TRIGGERS_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThresholdView
		err = json.Unmarshal(data, &dst.DataMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.DataMetricThresholdView, return on the first match
		} else {
			dst.DataMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as DataMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_TRIGGERS_FAILED_REQUESTS'
	if jsonDict["metricName"] == "REALM_TRIGGERS_FAILED_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_TRIGGERS_RESPONSE_MS'
	if jsonDict["metricName"] == "REALM_TRIGGERS_RESPONSE_MS" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RawMetricThresholdView'
	if jsonDict["metricName"] == "RawMetricThresholdView" {
		// try to unmarshal JSON data into RawMetricThresholdView
		err = json.Unmarshal(data, &dst.RawMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.RawMetricThresholdView, return on the first match
		} else {
			dst.RawMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as RawMetricThresholdView: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TimeMetricThresholdView'
	if jsonDict["metricName"] == "TimeMetricThresholdView" {
		// try to unmarshal JSON data into TimeMetricThresholdView
		err = json.Unmarshal(data, &dst.TimeMetricThresholdView)
		if err == nil {
			return nil // data stored in dst.TimeMetricThresholdView, return on the first match
		} else {
			dst.TimeMetricThresholdView = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThresholdView as TimeMetricThresholdView: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AppServiceMetricThresholdView) MarshalJSON() ([]byte, error) {
	if src.DataMetricThresholdView != nil {
		return json.Marshal(&src.DataMetricThresholdView)
	}

	if src.RawMetricThresholdView != nil {
		return json.Marshal(&src.RawMetricThresholdView)
	}

	if src.TimeMetricThresholdView != nil {
		return json.Marshal(&src.TimeMetricThresholdView)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AppServiceMetricThresholdView) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataMetricThresholdView != nil {
		return obj.DataMetricThresholdView
	}

	if obj.RawMetricThresholdView != nil {
		return obj.RawMetricThresholdView
	}

	if obj.TimeMetricThresholdView != nil {
		return obj.TimeMetricThresholdView
	}

	// all schemas are nil
	return nil
}

type NullableAppServiceMetricThresholdView struct {
	value *AppServiceMetricThresholdView
	isSet bool
}

func (v NullableAppServiceMetricThresholdView) Get() *AppServiceMetricThresholdView {
	return v.value
}

func (v *NullableAppServiceMetricThresholdView) Set(val *AppServiceMetricThresholdView) {
	v.value = val
	v.isSet = true
}

func (v NullableAppServiceMetricThresholdView) IsSet() bool {
	return v.isSet
}

func (v *NullableAppServiceMetricThresholdView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppServiceMetricThresholdView(val *AppServiceMetricThresholdView) *NullableAppServiceMetricThresholdView {
	return &NullableAppServiceMetricThresholdView{value: val, isSet: true}
}

func (v NullableAppServiceMetricThresholdView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppServiceMetricThresholdView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


