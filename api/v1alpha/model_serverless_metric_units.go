/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// ServerlessMetricUnits Element used to express the quantity. This can be an element of time, storage capacity, and the like.
type ServerlessMetricUnits string

// List of ServerlessMetricUnits
const (
	SERVERLESSMETRICUNITS_RPU ServerlessMetricUnits = "RPU"
	SERVERLESSMETRICUNITS_THOUSAND_RPU ServerlessMetricUnits = "THOUSAND_RPU"
	SERVERLESSMETRICUNITS_MILLION_RPU ServerlessMetricUnits = "MILLION_RPU"
	SERVERLESSMETRICUNITS_WPU ServerlessMetricUnits = "WPU"
	SERVERLESSMETRICUNITS_THOUSAND_WPU ServerlessMetricUnits = "THOUSAND_WPU"
	SERVERLESSMETRICUNITS_MILLION_WPU ServerlessMetricUnits = "MILLION_WPU"
)

// All allowed values of ServerlessMetricUnits enum
var AllowedServerlessMetricUnitsEnumValues = []ServerlessMetricUnits{
	"RPU",
	"THOUSAND_RPU",
	"MILLION_RPU",
	"WPU",
	"THOUSAND_WPU",
	"MILLION_WPU",
}

func (v *ServerlessMetricUnits) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServerlessMetricUnits(value)
	for _, existing := range AllowedServerlessMetricUnitsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServerlessMetricUnits", value)
}

// NewServerlessMetricUnitsFromValue returns a pointer to a valid ServerlessMetricUnits
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServerlessMetricUnitsFromValue(v string) (*ServerlessMetricUnits, error) {
	ev := ServerlessMetricUnits(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServerlessMetricUnits: valid values are %v", v, AllowedServerlessMetricUnitsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServerlessMetricUnits) IsValid() bool {
	for _, existing := range AllowedServerlessMetricUnitsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServerlessMetricUnits value
func (v ServerlessMetricUnits) Ptr() *ServerlessMetricUnits {
	return &v
}

type NullableServerlessMetricUnits struct {
	value *ServerlessMetricUnits
	isSet bool
}

func (v NullableServerlessMetricUnits) Get() *ServerlessMetricUnits {
	return v.value
}

func (v *NullableServerlessMetricUnits) Set(val *ServerlessMetricUnits) {
	v.value = val
	v.isSet = true
}

func (v NullableServerlessMetricUnits) IsSet() bool {
	return v.isSet
}

func (v *NullableServerlessMetricUnits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerlessMetricUnits(val *ServerlessMetricUnits) *NullableServerlessMetricUnits {
	return &NullableServerlessMetricUnits{value: val, isSet: true}
}

func (v NullableServerlessMetricUnits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerlessMetricUnits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

