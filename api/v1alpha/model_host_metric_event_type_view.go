/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// HostMetricEventTypeView Unique identifier of event type.
type HostMetricEventTypeView string

// List of HostMetricEventTypeView
const (
	HOSTMETRICEVENTTYPEVIEW_INSIDE_METRIC_THRESHOLD HostMetricEventTypeView = "INSIDE_METRIC_THRESHOLD"
	HOSTMETRICEVENTTYPEVIEW_OUTSIDE_METRIC_THRESHOLD HostMetricEventTypeView = "OUTSIDE_METRIC_THRESHOLD"
)

// All allowed values of HostMetricEventTypeView enum
var AllowedHostMetricEventTypeViewEnumValues = []HostMetricEventTypeView{
	"INSIDE_METRIC_THRESHOLD",
	"OUTSIDE_METRIC_THRESHOLD",
}

func (v *HostMetricEventTypeView) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HostMetricEventTypeView(value)
	for _, existing := range AllowedHostMetricEventTypeViewEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HostMetricEventTypeView", value)
}

// NewHostMetricEventTypeViewFromValue returns a pointer to a valid HostMetricEventTypeView
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostMetricEventTypeViewFromValue(v string) (*HostMetricEventTypeView, error) {
	ev := HostMetricEventTypeView(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HostMetricEventTypeView: valid values are %v", v, AllowedHostMetricEventTypeViewEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostMetricEventTypeView) IsValid() bool {
	for _, existing := range AllowedHostMetricEventTypeViewEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HostMetricEventTypeView value
func (v HostMetricEventTypeView) Ptr() *HostMetricEventTypeView {
	return &v
}

type NullableHostMetricEventTypeView struct {
	value *HostMetricEventTypeView
	isSet bool
}

func (v NullableHostMetricEventTypeView) Get() *HostMetricEventTypeView {
	return v.value
}

func (v *NullableHostMetricEventTypeView) Set(val *HostMetricEventTypeView) {
	v.value = val
	v.isSet = true
}

func (v NullableHostMetricEventTypeView) IsSet() bool {
	return v.isSet
}

func (v *NullableHostMetricEventTypeView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostMetricEventTypeView(val *HostMetricEventTypeView) *NullableHostMetricEventTypeView {
	return &NullableHostMetricEventTypeView{value: val, isSet: true}
}

func (v NullableHostMetricEventTypeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostMetricEventTypeView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

