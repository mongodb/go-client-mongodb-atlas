/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// DefaultAlertViewForNdsGroupEventTypeName - Incident that triggered this alert.
type DefaultAlertViewForNdsGroupEventTypeName struct {
	String *string
}

// stringAsDefaultAlertViewForNdsGroupEventTypeName is a convenience function that returns string wrapped in DefaultAlertViewForNdsGroupEventTypeName
func StringAsDefaultAlertViewForNdsGroupEventTypeName(v *string) DefaultAlertViewForNdsGroupEventTypeName {
	return DefaultAlertViewForNdsGroupEventTypeName{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DefaultAlertViewForNdsGroupEventTypeName) UnmarshalJSON(data []byte) error {
	var err error
        match := 0
        // try to unmarshal data into String
        err = json.Unmarshal(data, &dst.String)
        if err == nil {
                jsonstring, _ := json.Marshal(dst.String)
                if string(jsonstring) == "{}" { // empty struct
                        dst.String = nil
                } else {
                        match++
                }
        } else {
                dst.String = nil
        }

        if match > 1 { // more than 1 match
                // reset to nil
                dst.String = nil

                return fmt.Errorf("data matches more than one schema in oneOf(DefaultAlertViewForNdsGroupEventTypeName)")
        } else if match == 1 {
                return nil // exactly one match
        } else { // no match
                return fmt.Errorf("data failed to match schemas in oneOf(DefaultAlertViewForNdsGroupEventTypeName)")
        }
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DefaultAlertViewForNdsGroupEventTypeName) MarshalJSON() ([]byte, error) {
	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DefaultAlertViewForNdsGroupEventTypeName) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDefaultAlertViewForNdsGroupEventTypeName struct {
	value *DefaultAlertViewForNdsGroupEventTypeName
	isSet bool
}

func (v NullableDefaultAlertViewForNdsGroupEventTypeName) Get() *DefaultAlertViewForNdsGroupEventTypeName {
	return v.value
}

func (v *NullableDefaultAlertViewForNdsGroupEventTypeName) Set(val *DefaultAlertViewForNdsGroupEventTypeName) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultAlertViewForNdsGroupEventTypeName) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultAlertViewForNdsGroupEventTypeName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultAlertViewForNdsGroupEventTypeName(val *DefaultAlertViewForNdsGroupEventTypeName) *NullableDefaultAlertViewForNdsGroupEventTypeName {
	return &NullableDefaultAlertViewForNdsGroupEventTypeName{value: val, isSet: true}
}

func (v NullableDefaultAlertViewForNdsGroupEventTypeName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultAlertViewForNdsGroupEventTypeName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


