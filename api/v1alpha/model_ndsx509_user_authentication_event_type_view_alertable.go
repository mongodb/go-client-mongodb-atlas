/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// NDSX509UserAuthenticationEventTypeViewAlertable Event type that triggers an alert.
type NDSX509UserAuthenticationEventTypeViewAlertable string

// List of NDSX509UserAuthenticationEventTypeViewAlertable
const (
	NDSX509USERAUTHENTICATIONEVENTTYPEVIEWALERTABLE_CUSTOMER_CA_EXPIRATION_CHECK NDSX509UserAuthenticationEventTypeViewAlertable = "NDS_X509_USER_AUTHENTICATION_CUSTOMER_CA_EXPIRATION_CHECK"
	NDSX509USERAUTHENTICATIONEVENTTYPEVIEWALERTABLE_CUSTOMER_CRL_EXPIRATION_CHECK NDSX509UserAuthenticationEventTypeViewAlertable = "NDS_X509_USER_AUTHENTICATION_CUSTOMER_CRL_EXPIRATION_CHECK"
	NDSX509USERAUTHENTICATIONEVENTTYPEVIEWALERTABLE_MANAGED_USER_CERTS_EXPIRATION_CHECK NDSX509UserAuthenticationEventTypeViewAlertable = "NDS_X509_USER_AUTHENTICATION_MANAGED_USER_CERTS_EXPIRATION_CHECK"
)

// All allowed values of NDSX509UserAuthenticationEventTypeViewAlertable enum
var AllowedNDSX509UserAuthenticationEventTypeViewAlertableEnumValues = []NDSX509UserAuthenticationEventTypeViewAlertable{
	"NDS_X509_USER_AUTHENTICATION_CUSTOMER_CA_EXPIRATION_CHECK",
	"NDS_X509_USER_AUTHENTICATION_CUSTOMER_CRL_EXPIRATION_CHECK",
	"NDS_X509_USER_AUTHENTICATION_MANAGED_USER_CERTS_EXPIRATION_CHECK",
}

func (v *NDSX509UserAuthenticationEventTypeViewAlertable) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NDSX509UserAuthenticationEventTypeViewAlertable(value)
	for _, existing := range AllowedNDSX509UserAuthenticationEventTypeViewAlertableEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NDSX509UserAuthenticationEventTypeViewAlertable", value)
}

// NewNDSX509UserAuthenticationEventTypeViewAlertableFromValue returns a pointer to a valid NDSX509UserAuthenticationEventTypeViewAlertable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNDSX509UserAuthenticationEventTypeViewAlertableFromValue(v string) (*NDSX509UserAuthenticationEventTypeViewAlertable, error) {
	ev := NDSX509UserAuthenticationEventTypeViewAlertable(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NDSX509UserAuthenticationEventTypeViewAlertable: valid values are %v", v, AllowedNDSX509UserAuthenticationEventTypeViewAlertableEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NDSX509UserAuthenticationEventTypeViewAlertable) IsValid() bool {
	for _, existing := range AllowedNDSX509UserAuthenticationEventTypeViewAlertableEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NDSX509UserAuthenticationEventTypeViewAlertable value
func (v NDSX509UserAuthenticationEventTypeViewAlertable) Ptr() *NDSX509UserAuthenticationEventTypeViewAlertable {
	return &v
}

type NullableNDSX509UserAuthenticationEventTypeViewAlertable struct {
	value *NDSX509UserAuthenticationEventTypeViewAlertable
	isSet bool
}

func (v NullableNDSX509UserAuthenticationEventTypeViewAlertable) Get() *NDSX509UserAuthenticationEventTypeViewAlertable {
	return v.value
}

func (v *NullableNDSX509UserAuthenticationEventTypeViewAlertable) Set(val *NDSX509UserAuthenticationEventTypeViewAlertable) {
	v.value = val
	v.isSet = true
}

func (v NullableNDSX509UserAuthenticationEventTypeViewAlertable) IsSet() bool {
	return v.isSet
}

func (v *NullableNDSX509UserAuthenticationEventTypeViewAlertable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNDSX509UserAuthenticationEventTypeViewAlertable(val *NDSX509UserAuthenticationEventTypeViewAlertable) *NullableNDSX509UserAuthenticationEventTypeViewAlertable {
	return &NullableNDSX509UserAuthenticationEventTypeViewAlertable{value: val, isSet: true}
}

func (v NullableNDSX509UserAuthenticationEventTypeViewAlertable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNDSX509UserAuthenticationEventTypeViewAlertable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

