/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// checks if the DiskPartitionView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskPartitionView{}

// DiskPartitionView struct for DiskPartitionView
type DiskPartitionView struct {
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links,omitempty"`
	// Human-readable label of the disk or partition to which the measurements apply.
	PartitionName *string `json:"partitionName,omitempty"`
}

// NewDiskPartitionView instantiates a new DiskPartitionView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskPartitionView() *DiskPartitionView {
	this := DiskPartitionView{}
	return &this
}

// NewDiskPartitionViewWithDefaults instantiates a new DiskPartitionView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskPartitionViewWithDefaults() *DiskPartitionView {
	this := DiskPartitionView{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DiskPartitionView) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPartitionView) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DiskPartitionView) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *DiskPartitionView) SetLinks(v []Link) {
	o.Links = v
}

// GetPartitionName returns the PartitionName field value if set, zero value otherwise.
func (o *DiskPartitionView) GetPartitionName() string {
	if o == nil || IsNil(o.PartitionName) {
		var ret string
		return ret
	}
	return *o.PartitionName
}

// GetPartitionNameOk returns a tuple with the PartitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskPartitionView) GetPartitionNameOk() (*string, bool) {
	if o == nil || IsNil(o.PartitionName) {
		return nil, false
	}
	return o.PartitionName, true
}

// HasPartitionName returns a boolean if a field has been set.
func (o *DiskPartitionView) HasPartitionName() bool {
	if o != nil && !IsNil(o.PartitionName) {
		return true
	}

	return false
}

// SetPartitionName gets a reference to the given string and assigns it to the PartitionName field.
func (o *DiskPartitionView) SetPartitionName(v string) {
	o.PartitionName = &v
}

func (o DiskPartitionView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskPartitionView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: links is readOnly
	// skip: partitionName is readOnly
	return toSerialize, nil
}

type NullableDiskPartitionView struct {
	value *DiskPartitionView
	isSet bool
}

func (v NullableDiskPartitionView) Get() *DiskPartitionView {
	return v.value
}

func (v *NullableDiskPartitionView) Set(val *DiskPartitionView) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskPartitionView) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskPartitionView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskPartitionView(val *DiskPartitionView) *NullableDiskPartitionView {
	return &NullableDiskPartitionView{value: val, isSet: true}
}

func (v NullableDiskPartitionView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskPartitionView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


