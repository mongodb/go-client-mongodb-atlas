/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// ApiNamespaceObjView Human-readable label that identifies the namespace on the specified host. The resource expresses this parameter value as `<database>.<collection>`.
type ApiNamespaceObjView struct {
	// Human-readable label that identifies the namespace on the specified host. The resource expresses this parameter value as `<database>.<collection>`.
	Namespace *string `json:"namespace,omitempty"`
	// Human-readable label that identifies the type of namespace.
	Type *string `json:"type,omitempty"`
}

// NewApiNamespaceObjView instantiates a new ApiNamespaceObjView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiNamespaceObjView() *ApiNamespaceObjView {
	this := ApiNamespaceObjView{}
	return &this
}

// NewApiNamespaceObjViewWithDefaults instantiates a new ApiNamespaceObjView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiNamespaceObjViewWithDefaults() *ApiNamespaceObjView {
	this := ApiNamespaceObjView{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *ApiNamespaceObjView) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiNamespaceObjView) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *ApiNamespaceObjView) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *ApiNamespaceObjView) SetNamespace(v string) {
	o.Namespace = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApiNamespaceObjView) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiNamespaceObjView) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApiNamespaceObjView) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApiNamespaceObjView) SetType(v string) {
	o.Type = &v
}

func (o ApiNamespaceObjView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableApiNamespaceObjView struct {
	value *ApiNamespaceObjView
	isSet bool
}

func (v NullableApiNamespaceObjView) Get() *ApiNamespaceObjView {
	return v.value
}

func (v *NullableApiNamespaceObjView) Set(val *ApiNamespaceObjView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiNamespaceObjView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiNamespaceObjView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiNamespaceObjView(val *ApiNamespaceObjView) *NullableApiNamespaceObjView {
	return &NullableApiNamespaceObjView{value: val, isSet: true}
}

func (v NullableApiNamespaceObjView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiNamespaceObjView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


