/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
	"fmt"
)

// DataExplorerAccessedEventTypeView Unique identifier of event type.
type DataExplorerAccessedEventTypeView string

// List of DataExplorerAccessedEventTypeView
const (
	DATAEXPLORERACCESSEDEVENTTYPEVIEW_EXPLORER DataExplorerAccessedEventTypeView = "DATA_EXPLORER"
	DATAEXPLORERACCESSEDEVENTTYPEVIEW_EXPLORER_CRUD_ATTEMPT DataExplorerAccessedEventTypeView = "DATA_EXPLORER_CRUD_ATTEMPT"
	DATAEXPLORERACCESSEDEVENTTYPEVIEW_EXPLORER_CRUD_ERROR DataExplorerAccessedEventTypeView = "DATA_EXPLORER_CRUD_ERROR"
	DATAEXPLORERACCESSEDEVENTTYPEVIEW_EXPLORER_CRUD DataExplorerAccessedEventTypeView = "DATA_EXPLORER_CRUD"
)

// All allowed values of DataExplorerAccessedEventTypeView enum
var AllowedDataExplorerAccessedEventTypeViewEnumValues = []DataExplorerAccessedEventTypeView{
	"DATA_EXPLORER",
	"DATA_EXPLORER_CRUD_ATTEMPT",
	"DATA_EXPLORER_CRUD_ERROR",
	"DATA_EXPLORER_CRUD",
}

func (v *DataExplorerAccessedEventTypeView) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataExplorerAccessedEventTypeView(value)
	for _, existing := range AllowedDataExplorerAccessedEventTypeViewEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataExplorerAccessedEventTypeView", value)
}

// NewDataExplorerAccessedEventTypeViewFromValue returns a pointer to a valid DataExplorerAccessedEventTypeView
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataExplorerAccessedEventTypeViewFromValue(v string) (*DataExplorerAccessedEventTypeView, error) {
	ev := DataExplorerAccessedEventTypeView(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataExplorerAccessedEventTypeView: valid values are %v", v, AllowedDataExplorerAccessedEventTypeViewEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataExplorerAccessedEventTypeView) IsValid() bool {
	for _, existing := range AllowedDataExplorerAccessedEventTypeViewEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataExplorerAccessedEventTypeView value
func (v DataExplorerAccessedEventTypeView) Ptr() *DataExplorerAccessedEventTypeView {
	return &v
}

type NullableDataExplorerAccessedEventTypeView struct {
	value *DataExplorerAccessedEventTypeView
	isSet bool
}

func (v NullableDataExplorerAccessedEventTypeView) Get() *DataExplorerAccessedEventTypeView {
	return v.value
}

func (v *NullableDataExplorerAccessedEventTypeView) Set(val *DataExplorerAccessedEventTypeView) {
	v.value = val
	v.isSet = true
}

func (v NullableDataExplorerAccessedEventTypeView) IsSet() bool {
	return v.isSet
}

func (v *NullableDataExplorerAccessedEventTypeView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataExplorerAccessedEventTypeView(val *DataExplorerAccessedEventTypeView) *NullableDataExplorerAccessedEventTypeView {
	return &NullableDataExplorerAccessedEventTypeView{value: val, isSet: true}
}

func (v NullableDataExplorerAccessedEventTypeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataExplorerAccessedEventTypeView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

