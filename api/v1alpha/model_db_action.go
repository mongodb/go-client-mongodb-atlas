/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha

import (
	"encoding/json"
)

// DBAction Privilege action that the role grants.
type DBAction struct {
	// Human-readable label that identifies the privilege action.
	Action string `json:"action"`
	// List of resources on which you grant the action.
	Resources []DBResource `json:"resources,omitempty"`
}

// NewDBAction instantiates a new DBAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDBAction() *DBAction {
	this := DBAction{}
	return &this
}

// NewDBActionWithDefaults instantiates a new DBAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDBActionWithDefaults() *DBAction {
	this := DBAction{}
	return &this
}

// GetAction returns the Action field value
func (o *DBAction) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *DBAction) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *DBAction) SetAction(v string) {
	o.Action = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *DBAction) GetResources() []DBResource {
	if o == nil || o.Resources == nil {
		var ret []DBResource
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DBAction) GetResourcesOk() ([]DBResource, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *DBAction) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given []DBResource and assigns it to the Resources field.
func (o *DBAction) SetResources(v []DBResource) {
	o.Resources = v
}

func (o DBAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["action"] = o.Action
	}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableDBAction struct {
	value *DBAction
	isSet bool
}

func (v NullableDBAction) Get() *DBAction {
	return v.value
}

func (v *NullableDBAction) Set(val *DBAction) {
	v.value = val
	v.isSet = true
}

func (v NullableDBAction) IsSet() bool {
	return v.isSet
}

func (v *NullableDBAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDBAction(val *DBAction) *NullableDBAction {
	return &NullableDBAction{value: val, isSet: true}
}

func (v NullableDBAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDBAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


