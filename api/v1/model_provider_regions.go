/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ProviderRegions struct for ProviderRegions
type ProviderRegions struct {
	// List of instances sizes that this cloud provider supports.
	InstanceSizes []ApiInstanceSizeView `json:"instanceSizes,omitempty"`
	// Human-readable label that identifies the Cloud provider.
	Provider *string `json:"provider,omitempty"`
}

// NewProviderRegions instantiates a new ProviderRegions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderRegions() *ProviderRegions {
	this := ProviderRegions{}
	return &this
}

// NewProviderRegionsWithDefaults instantiates a new ProviderRegions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderRegionsWithDefaults() *ProviderRegions {
	this := ProviderRegions{}
	return &this
}

// GetInstanceSizes returns the InstanceSizes field value if set, zero value otherwise.
func (o *ProviderRegions) GetInstanceSizes() []ApiInstanceSizeView {
	if o == nil || o.InstanceSizes == nil {
		var ret []ApiInstanceSizeView
		return ret
	}
	return o.InstanceSizes
}

// GetInstanceSizesOk returns a tuple with the InstanceSizes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderRegions) GetInstanceSizesOk() ([]ApiInstanceSizeView, bool) {
	if o == nil || o.InstanceSizes == nil {
		return nil, false
	}
	return o.InstanceSizes, true
}

// HasInstanceSizes returns a boolean if a field has been set.
func (o *ProviderRegions) HasInstanceSizes() bool {
	if o != nil && o.InstanceSizes != nil {
		return true
	}

	return false
}

// SetInstanceSizes gets a reference to the given []ApiInstanceSizeView and assigns it to the InstanceSizes field.
func (o *ProviderRegions) SetInstanceSizes(v []ApiInstanceSizeView) {
	o.InstanceSizes = v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *ProviderRegions) GetProvider() string {
	if o == nil || o.Provider == nil {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderRegions) GetProviderOk() (*string, bool) {
	if o == nil || o.Provider == nil {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *ProviderRegions) HasProvider() bool {
	if o != nil && o.Provider != nil {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *ProviderRegions) SetProvider(v string) {
	o.Provider = &v
}

func (o ProviderRegions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InstanceSizes != nil {
		toSerialize["instanceSizes"] = o.InstanceSizes
	}
	if o.Provider != nil {
		toSerialize["provider"] = o.Provider
	}
	return json.Marshal(toSerialize)
}

type NullableProviderRegions struct {
	value *ProviderRegions
	isSet bool
}

func (v NullableProviderRegions) Get() *ProviderRegions {
	return v.value
}

func (v *NullableProviderRegions) Set(val *ProviderRegions) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderRegions) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderRegions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderRegions(val *ProviderRegions) *NullableProviderRegions {
	return &NullableProviderRegions{value: val, isSet: true}
}

func (v NullableProviderRegions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderRegions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


