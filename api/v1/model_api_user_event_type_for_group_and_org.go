/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// ApiUserEventTypeForGroupAndOrg Unique identifier of event type.
type ApiUserEventTypeForGroupAndOrg string

// List of ApiUserEventTypeForGroupAndOrg
const (
	APIUSEREVENTTYPEFORGROUPANDORG_CREATED ApiUserEventTypeForGroupAndOrg = "API_KEY_CREATED"
	APIUSEREVENTTYPEFORGROUPANDORG_DELETED ApiUserEventTypeForGroupAndOrg = "API_KEY_DELETED"
	APIUSEREVENTTYPEFORGROUPANDORG_ACCESS_LIST_ENTRY_ADDED ApiUserEventTypeForGroupAndOrg = "API_KEY_ACCESS_LIST_ENTRY_ADDED"
	APIUSEREVENTTYPEFORGROUPANDORG_ACCESS_LIST_ENTRY_DELETED ApiUserEventTypeForGroupAndOrg = "API_KEY_ACCESS_LIST_ENTRY_DELETED"
	APIUSEREVENTTYPEFORGROUPANDORG_ROLES_CHANGED ApiUserEventTypeForGroupAndOrg = "API_KEY_ROLES_CHANGED"
	APIUSEREVENTTYPEFORGROUPANDORG_DESCRIPTION_CHANGED ApiUserEventTypeForGroupAndOrg = "API_KEY_DESCRIPTION_CHANGED"
	APIUSEREVENTTYPEFORGROUPANDORG_ADDED_TO_GROUP ApiUserEventTypeForGroupAndOrg = "API_KEY_ADDED_TO_GROUP"
	APIUSEREVENTTYPEFORGROUPANDORG_REMOVED_FROM_GROUP ApiUserEventTypeForGroupAndOrg = "API_KEY_REMOVED_FROM_GROUP"
)

// All allowed values of ApiUserEventTypeForGroupAndOrg enum
var AllowedApiUserEventTypeForGroupAndOrgEnumValues = []ApiUserEventTypeForGroupAndOrg{
	"API_KEY_CREATED",
	"API_KEY_DELETED",
	"API_KEY_ACCESS_LIST_ENTRY_ADDED",
	"API_KEY_ACCESS_LIST_ENTRY_DELETED",
	"API_KEY_ROLES_CHANGED",
	"API_KEY_DESCRIPTION_CHANGED",
	"API_KEY_ADDED_TO_GROUP",
	"API_KEY_REMOVED_FROM_GROUP",
}

func (v *ApiUserEventTypeForGroupAndOrg) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiUserEventTypeForGroupAndOrg(value)
	for _, existing := range AllowedApiUserEventTypeForGroupAndOrgEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiUserEventTypeForGroupAndOrg", value)
}

// NewApiUserEventTypeForGroupAndOrgFromValue returns a pointer to a valid ApiUserEventTypeForGroupAndOrg
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiUserEventTypeForGroupAndOrgFromValue(v string) (*ApiUserEventTypeForGroupAndOrg, error) {
	ev := ApiUserEventTypeForGroupAndOrg(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiUserEventTypeForGroupAndOrg: valid values are %v", v, AllowedApiUserEventTypeForGroupAndOrgEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiUserEventTypeForGroupAndOrg) IsValid() bool {
	for _, existing := range AllowedApiUserEventTypeForGroupAndOrgEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiUserEventTypeForGroupAndOrg value
func (v ApiUserEventTypeForGroupAndOrg) Ptr() *ApiUserEventTypeForGroupAndOrg {
	return &v
}

type NullableApiUserEventTypeForGroupAndOrg struct {
	value *ApiUserEventTypeForGroupAndOrg
	isSet bool
}

func (v NullableApiUserEventTypeForGroupAndOrg) Get() *ApiUserEventTypeForGroupAndOrg {
	return v.value
}

func (v *NullableApiUserEventTypeForGroupAndOrg) Set(val *ApiUserEventTypeForGroupAndOrg) {
	v.value = val
	v.isSet = true
}

func (v NullableApiUserEventTypeForGroupAndOrg) IsSet() bool {
	return v.isSet
}

func (v *NullableApiUserEventTypeForGroupAndOrg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiUserEventTypeForGroupAndOrg(val *ApiUserEventTypeForGroupAndOrg) *NullableApiUserEventTypeForGroupAndOrg {
	return &NullableApiUserEventTypeForGroupAndOrg{value: val, isSet: true}
}

func (v NullableApiUserEventTypeForGroupAndOrg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiUserEventTypeForGroupAndOrg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

