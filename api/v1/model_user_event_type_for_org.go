/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// UserEventTypeForOrg Unique identifier of event type.
type UserEventTypeForOrg string

// List of UserEventTypeForOrg
const (
	USEREVENTTYPEFORORG_JOINED_ORG UserEventTypeForOrg = "JOINED_ORG"
	USEREVENTTYPEFORORG_JOINED_TEAM UserEventTypeForOrg = "JOINED_TEAM"
	USEREVENTTYPEFORORG_INVITED_TO_ORG UserEventTypeForOrg = "INVITED_TO_ORG"
	USEREVENTTYPEFORORG_REMOVED_FROM_ORG UserEventTypeForOrg = "REMOVED_FROM_ORG"
	USEREVENTTYPEFORORG_REMOVED_FROM_TEAM UserEventTypeForOrg = "REMOVED_FROM_TEAM"
	USEREVENTTYPEFORORG_USER_ROLES_CHANGED_AUDIT UserEventTypeForOrg = "USER_ROLES_CHANGED_AUDIT"
	USEREVENTTYPEFORORG_ORG_FLEX_CONSULTING_PURCHASED UserEventTypeForOrg = "ORG_FLEX_CONSULTING_PURCHASED"
	USEREVENTTYPEFORORG_ORG_FLEX_CONSULTING_PURCHASE_FAILED UserEventTypeForOrg = "ORG_FLEX_CONSULTING_PURCHASE_FAILED"
)

// All allowed values of UserEventTypeForOrg enum
var AllowedUserEventTypeForOrgEnumValues = []UserEventTypeForOrg{
	"JOINED_ORG",
	"JOINED_TEAM",
	"INVITED_TO_ORG",
	"REMOVED_FROM_ORG",
	"REMOVED_FROM_TEAM",
	"USER_ROLES_CHANGED_AUDIT",
	"ORG_FLEX_CONSULTING_PURCHASED",
	"ORG_FLEX_CONSULTING_PURCHASE_FAILED",
}

func (v *UserEventTypeForOrg) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserEventTypeForOrg(value)
	for _, existing := range AllowedUserEventTypeForOrgEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserEventTypeForOrg", value)
}

// NewUserEventTypeForOrgFromValue returns a pointer to a valid UserEventTypeForOrg
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserEventTypeForOrgFromValue(v string) (*UserEventTypeForOrg, error) {
	ev := UserEventTypeForOrg(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserEventTypeForOrg: valid values are %v", v, AllowedUserEventTypeForOrgEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserEventTypeForOrg) IsValid() bool {
	for _, existing := range AllowedUserEventTypeForOrgEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserEventTypeForOrg value
func (v UserEventTypeForOrg) Ptr() *UserEventTypeForOrg {
	return &v
}

type NullableUserEventTypeForOrg struct {
	value *UserEventTypeForOrg
	isSet bool
}

func (v NullableUserEventTypeForOrg) Get() *UserEventTypeForOrg {
	return v.value
}

func (v *NullableUserEventTypeForOrg) Set(val *UserEventTypeForOrg) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEventTypeForOrg) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEventTypeForOrg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEventTypeForOrg(val *UserEventTypeForOrg) *NullableUserEventTypeForOrg {
	return &NullableUserEventTypeForOrg{value: val, isSet: true}
}

func (v NullableUserEventTypeForOrg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEventTypeForOrg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

