/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// TeamEventTypeForGroup Unique identifier of event type.
type TeamEventTypeForGroup string

// List of TeamEventTypeForGroup
const (
	TEAMEVENTTYPEFORGROUP_ADDED_TO_GROUP TeamEventTypeForGroup = "TEAM_ADDED_TO_GROUP"
	TEAMEVENTTYPEFORGROUP_REMOVED_FROM_GROUP TeamEventTypeForGroup = "TEAM_REMOVED_FROM_GROUP"
	TEAMEVENTTYPEFORGROUP_ROLES_MODIFIED TeamEventTypeForGroup = "TEAM_ROLES_MODIFIED"
)

// All allowed values of TeamEventTypeForGroup enum
var AllowedTeamEventTypeForGroupEnumValues = []TeamEventTypeForGroup{
	"TEAM_ADDED_TO_GROUP",
	"TEAM_REMOVED_FROM_GROUP",
	"TEAM_ROLES_MODIFIED",
}

func (v *TeamEventTypeForGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TeamEventTypeForGroup(value)
	for _, existing := range AllowedTeamEventTypeForGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TeamEventTypeForGroup", value)
}

// NewTeamEventTypeForGroupFromValue returns a pointer to a valid TeamEventTypeForGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTeamEventTypeForGroupFromValue(v string) (*TeamEventTypeForGroup, error) {
	ev := TeamEventTypeForGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TeamEventTypeForGroup: valid values are %v", v, AllowedTeamEventTypeForGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TeamEventTypeForGroup) IsValid() bool {
	for _, existing := range AllowedTeamEventTypeForGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TeamEventTypeForGroup value
func (v TeamEventTypeForGroup) Ptr() *TeamEventTypeForGroup {
	return &v
}

type NullableTeamEventTypeForGroup struct {
	value *TeamEventTypeForGroup
	isSet bool
}

func (v NullableTeamEventTypeForGroup) Get() *TeamEventTypeForGroup {
	return v.value
}

func (v *NullableTeamEventTypeForGroup) Set(val *TeamEventTypeForGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamEventTypeForGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamEventTypeForGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamEventTypeForGroup(val *TeamEventTypeForGroup) *NullableTeamEventTypeForGroup {
	return &NullableTeamEventTypeForGroup{value: val, isSet: true}
}

func (v NullableTeamEventTypeForGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamEventTypeForGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

