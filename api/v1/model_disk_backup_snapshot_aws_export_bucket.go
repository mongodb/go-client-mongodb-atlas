/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DiskBackupSnapshotAWSExportBucket struct for DiskBackupSnapshotAWSExportBucket
type DiskBackupSnapshotAWSExportBucket struct {
	// Unique 24-hexadecimal character string that identifies the Amazon Web Services (AWS) Simple Storage Service (S3) export bucket.
	Id *string `json:"_id,omitempty"`
	// Human-readable label that identifies the AWS bucket that the role is authorized to access.
	BucketName *string `json:"bucketName,omitempty"`
	// Human-readable label that identifies the cloud provider that stores this snapshot.
	CloudProvider *string `json:"cloudProvider,omitempty"`
	// Unique 24-hexadecimal character string that identifies the AWS IAM role that MongoDB Cloud uses to access the AWS S3 bucket.
	IamRoleId *string `json:"iamRoleId,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links,omitempty"`
}

// NewDiskBackupSnapshotAWSExportBucket instantiates a new DiskBackupSnapshotAWSExportBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskBackupSnapshotAWSExportBucket() *DiskBackupSnapshotAWSExportBucket {
	this := DiskBackupSnapshotAWSExportBucket{}
	return &this
}

// NewDiskBackupSnapshotAWSExportBucketWithDefaults instantiates a new DiskBackupSnapshotAWSExportBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskBackupSnapshotAWSExportBucketWithDefaults() *DiskBackupSnapshotAWSExportBucket {
	this := DiskBackupSnapshotAWSExportBucket{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DiskBackupSnapshotAWSExportBucket) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskBackupSnapshotAWSExportBucket) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DiskBackupSnapshotAWSExportBucket) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DiskBackupSnapshotAWSExportBucket) SetId(v string) {
	o.Id = &v
}

// GetBucketName returns the BucketName field value if set, zero value otherwise.
func (o *DiskBackupSnapshotAWSExportBucket) GetBucketName() string {
	if o == nil || o.BucketName == nil {
		var ret string
		return ret
	}
	return *o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskBackupSnapshotAWSExportBucket) GetBucketNameOk() (*string, bool) {
	if o == nil || o.BucketName == nil {
		return nil, false
	}
	return o.BucketName, true
}

// HasBucketName returns a boolean if a field has been set.
func (o *DiskBackupSnapshotAWSExportBucket) HasBucketName() bool {
	if o != nil && o.BucketName != nil {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given string and assigns it to the BucketName field.
func (o *DiskBackupSnapshotAWSExportBucket) SetBucketName(v string) {
	o.BucketName = &v
}

// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise.
func (o *DiskBackupSnapshotAWSExportBucket) GetCloudProvider() string {
	if o == nil || o.CloudProvider == nil {
		var ret string
		return ret
	}
	return *o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskBackupSnapshotAWSExportBucket) GetCloudProviderOk() (*string, bool) {
	if o == nil || o.CloudProvider == nil {
		return nil, false
	}
	return o.CloudProvider, true
}

// HasCloudProvider returns a boolean if a field has been set.
func (o *DiskBackupSnapshotAWSExportBucket) HasCloudProvider() bool {
	if o != nil && o.CloudProvider != nil {
		return true
	}

	return false
}

// SetCloudProvider gets a reference to the given string and assigns it to the CloudProvider field.
func (o *DiskBackupSnapshotAWSExportBucket) SetCloudProvider(v string) {
	o.CloudProvider = &v
}

// GetIamRoleId returns the IamRoleId field value if set, zero value otherwise.
func (o *DiskBackupSnapshotAWSExportBucket) GetIamRoleId() string {
	if o == nil || o.IamRoleId == nil {
		var ret string
		return ret
	}
	return *o.IamRoleId
}

// GetIamRoleIdOk returns a tuple with the IamRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskBackupSnapshotAWSExportBucket) GetIamRoleIdOk() (*string, bool) {
	if o == nil || o.IamRoleId == nil {
		return nil, false
	}
	return o.IamRoleId, true
}

// HasIamRoleId returns a boolean if a field has been set.
func (o *DiskBackupSnapshotAWSExportBucket) HasIamRoleId() bool {
	if o != nil && o.IamRoleId != nil {
		return true
	}

	return false
}

// SetIamRoleId gets a reference to the given string and assigns it to the IamRoleId field.
func (o *DiskBackupSnapshotAWSExportBucket) SetIamRoleId(v string) {
	o.IamRoleId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DiskBackupSnapshotAWSExportBucket) GetLinks() []Link {
	if o == nil || o.Links == nil {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskBackupSnapshotAWSExportBucket) GetLinksOk() ([]Link, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DiskBackupSnapshotAWSExportBucket) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *DiskBackupSnapshotAWSExportBucket) SetLinks(v []Link) {
	o.Links = v
}

func (o DiskBackupSnapshotAWSExportBucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["_id"] = o.Id
	}
	if o.BucketName != nil {
		toSerialize["bucketName"] = o.BucketName
	}
	if o.CloudProvider != nil {
		toSerialize["cloudProvider"] = o.CloudProvider
	}
	if o.IamRoleId != nil {
		toSerialize["iamRoleId"] = o.IamRoleId
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableDiskBackupSnapshotAWSExportBucket struct {
	value *DiskBackupSnapshotAWSExportBucket
	isSet bool
}

func (v NullableDiskBackupSnapshotAWSExportBucket) Get() *DiskBackupSnapshotAWSExportBucket {
	return v.value
}

func (v *NullableDiskBackupSnapshotAWSExportBucket) Set(val *DiskBackupSnapshotAWSExportBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskBackupSnapshotAWSExportBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskBackupSnapshotAWSExportBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskBackupSnapshotAWSExportBucket(val *DiskBackupSnapshotAWSExportBucket) *NullableDiskBackupSnapshotAWSExportBucket {
	return &NullableDiskBackupSnapshotAWSExportBucket{value: val, isSet: true}
}

func (v NullableDiskBackupSnapshotAWSExportBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskBackupSnapshotAWSExportBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


