/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// DataLakeAtlasStoreAllOf struct for DataLakeAtlasStoreAllOf
type DataLakeAtlasStoreAllOf struct {
	// Human-readable label of the MongoDB Cloud cluster on which the store is based.
	ClusterName *string `json:"clusterName,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the project.
	ProjectId *string `json:"projectId,omitempty"`
	ReadPreference *DataLakeAtlasStoreReadPreference `json:"readPreference,omitempty"`
}

// NewDataLakeAtlasStoreAllOf instantiates a new DataLakeAtlasStoreAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLakeAtlasStoreAllOf() *DataLakeAtlasStoreAllOf {
	this := DataLakeAtlasStoreAllOf{}
	return &this
}

// NewDataLakeAtlasStoreAllOfWithDefaults instantiates a new DataLakeAtlasStoreAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLakeAtlasStoreAllOfWithDefaults() *DataLakeAtlasStoreAllOf {
	this := DataLakeAtlasStoreAllOf{}
	return &this
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *DataLakeAtlasStoreAllOf) GetClusterName() string {
	if o == nil || o.ClusterName == nil {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStoreAllOf) GetClusterNameOk() (*string, bool) {
	if o == nil || o.ClusterName == nil {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *DataLakeAtlasStoreAllOf) HasClusterName() bool {
	if o != nil && o.ClusterName != nil {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *DataLakeAtlasStoreAllOf) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *DataLakeAtlasStoreAllOf) GetProjectId() string {
	if o == nil || o.ProjectId == nil {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStoreAllOf) GetProjectIdOk() (*string, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *DataLakeAtlasStoreAllOf) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *DataLakeAtlasStoreAllOf) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetReadPreference returns the ReadPreference field value if set, zero value otherwise.
func (o *DataLakeAtlasStoreAllOf) GetReadPreference() DataLakeAtlasStoreReadPreference {
	if o == nil || o.ReadPreference == nil {
		var ret DataLakeAtlasStoreReadPreference
		return ret
	}
	return *o.ReadPreference
}

// GetReadPreferenceOk returns a tuple with the ReadPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStoreAllOf) GetReadPreferenceOk() (*DataLakeAtlasStoreReadPreference, bool) {
	if o == nil || o.ReadPreference == nil {
		return nil, false
	}
	return o.ReadPreference, true
}

// HasReadPreference returns a boolean if a field has been set.
func (o *DataLakeAtlasStoreAllOf) HasReadPreference() bool {
	if o != nil && o.ReadPreference != nil {
		return true
	}

	return false
}

// SetReadPreference gets a reference to the given DataLakeAtlasStoreReadPreference and assigns it to the ReadPreference field.
func (o *DataLakeAtlasStoreAllOf) SetReadPreference(v DataLakeAtlasStoreReadPreference) {
	o.ReadPreference = &v
}

func (o DataLakeAtlasStoreAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterName != nil {
		toSerialize["clusterName"] = o.ClusterName
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.ReadPreference != nil {
		toSerialize["readPreference"] = o.ReadPreference
	}
	return json.Marshal(toSerialize)
}

type NullableDataLakeAtlasStoreAllOf struct {
	value *DataLakeAtlasStoreAllOf
	isSet bool
}

func (v NullableDataLakeAtlasStoreAllOf) Get() *DataLakeAtlasStoreAllOf {
	return v.value
}

func (v *NullableDataLakeAtlasStoreAllOf) Set(val *DataLakeAtlasStoreAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLakeAtlasStoreAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLakeAtlasStoreAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLakeAtlasStoreAllOf(val *DataLakeAtlasStoreAllOf) *NullableDataLakeAtlasStoreAllOf {
	return &NullableDataLakeAtlasStoreAllOf{value: val, isSet: true}
}

func (v NullableDataLakeAtlasStoreAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLakeAtlasStoreAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


