/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ClusterEventTypeForNdsGroup Unique identifier of event type.
type ClusterEventTypeForNdsGroup string

// List of ClusterEventTypeForNdsGroup
const (
	CLUSTEREVENTTYPEFORNDSGROUP_PRESENT ClusterEventTypeForNdsGroup = "CLUSTER_MONGOS_IS_PRESENT"
	CLUSTEREVENTTYPEFORNDSGROUP_MISSING ClusterEventTypeForNdsGroup = "CLUSTER_MONGOS_IS_MISSING"
)

// All allowed values of ClusterEventTypeForNdsGroup enum
var AllowedClusterEventTypeForNdsGroupEnumValues = []ClusterEventTypeForNdsGroup{
	"CLUSTER_MONGOS_IS_PRESENT",
	"CLUSTER_MONGOS_IS_MISSING",
}

func (v *ClusterEventTypeForNdsGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterEventTypeForNdsGroup(value)
	for _, existing := range AllowedClusterEventTypeForNdsGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterEventTypeForNdsGroup", value)
}

// NewClusterEventTypeForNdsGroupFromValue returns a pointer to a valid ClusterEventTypeForNdsGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterEventTypeForNdsGroupFromValue(v string) (*ClusterEventTypeForNdsGroup, error) {
	ev := ClusterEventTypeForNdsGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterEventTypeForNdsGroup: valid values are %v", v, AllowedClusterEventTypeForNdsGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterEventTypeForNdsGroup) IsValid() bool {
	for _, existing := range AllowedClusterEventTypeForNdsGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterEventTypeForNdsGroup value
func (v ClusterEventTypeForNdsGroup) Ptr() *ClusterEventTypeForNdsGroup {
	return &v
}

type NullableClusterEventTypeForNdsGroup struct {
	value *ClusterEventTypeForNdsGroup
	isSet bool
}

func (v NullableClusterEventTypeForNdsGroup) Get() *ClusterEventTypeForNdsGroup {
	return v.value
}

func (v *NullableClusterEventTypeForNdsGroup) Set(val *ClusterEventTypeForNdsGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterEventTypeForNdsGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterEventTypeForNdsGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterEventTypeForNdsGroup(val *ClusterEventTypeForNdsGroup) *NullableClusterEventTypeForNdsGroup {
	return &NullableClusterEventTypeForNdsGroup{value: val, isSet: true}
}

func (v NullableClusterEventTypeForNdsGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterEventTypeForNdsGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

