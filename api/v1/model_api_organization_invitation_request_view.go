/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ApiOrganizationInvitationRequestView struct for ApiOrganizationInvitationRequestView
type ApiOrganizationInvitationRequestView struct {
	// One or more organization or project level roles to assign to the MongoDB Cloud user.
	Roles []string `json:"roles,omitempty"`
	// List of teams to which you want to invite the desired MongoDB Cloud user.
	TeamIds []string `json:"teamIds,omitempty"`
	// Email address that belongs to the desired MongoDB Cloud user.
	Username *string `json:"username,omitempty"`
}

// NewApiOrganizationInvitationRequestView instantiates a new ApiOrganizationInvitationRequestView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiOrganizationInvitationRequestView() *ApiOrganizationInvitationRequestView {
	this := ApiOrganizationInvitationRequestView{}
	return &this
}

// NewApiOrganizationInvitationRequestViewWithDefaults instantiates a new ApiOrganizationInvitationRequestView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiOrganizationInvitationRequestViewWithDefaults() *ApiOrganizationInvitationRequestView {
	this := ApiOrganizationInvitationRequestView{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *ApiOrganizationInvitationRequestView) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOrganizationInvitationRequestView) GetRolesOk() ([]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *ApiOrganizationInvitationRequestView) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *ApiOrganizationInvitationRequestView) SetRoles(v []string) {
	o.Roles = v
}

// GetTeamIds returns the TeamIds field value if set, zero value otherwise.
func (o *ApiOrganizationInvitationRequestView) GetTeamIds() []string {
	if o == nil || o.TeamIds == nil {
		var ret []string
		return ret
	}
	return o.TeamIds
}

// GetTeamIdsOk returns a tuple with the TeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOrganizationInvitationRequestView) GetTeamIdsOk() ([]string, bool) {
	if o == nil || o.TeamIds == nil {
		return nil, false
	}
	return o.TeamIds, true
}

// HasTeamIds returns a boolean if a field has been set.
func (o *ApiOrganizationInvitationRequestView) HasTeamIds() bool {
	if o != nil && o.TeamIds != nil {
		return true
	}

	return false
}

// SetTeamIds gets a reference to the given []string and assigns it to the TeamIds field.
func (o *ApiOrganizationInvitationRequestView) SetTeamIds(v []string) {
	o.TeamIds = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ApiOrganizationInvitationRequestView) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOrganizationInvitationRequestView) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ApiOrganizationInvitationRequestView) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ApiOrganizationInvitationRequestView) SetUsername(v string) {
	o.Username = &v
}

func (o ApiOrganizationInvitationRequestView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.TeamIds != nil {
		toSerialize["teamIds"] = o.TeamIds
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableApiOrganizationInvitationRequestView struct {
	value *ApiOrganizationInvitationRequestView
	isSet bool
}

func (v NullableApiOrganizationInvitationRequestView) Get() *ApiOrganizationInvitationRequestView {
	return v.value
}

func (v *NullableApiOrganizationInvitationRequestView) Set(val *ApiOrganizationInvitationRequestView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiOrganizationInvitationRequestView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiOrganizationInvitationRequestView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiOrganizationInvitationRequestView(val *ApiOrganizationInvitationRequestView) *NullableApiOrganizationInvitationRequestView {
	return &NullableApiOrganizationInvitationRequestView{value: val, isSet: true}
}

func (v NullableApiOrganizationInvitationRequestView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiOrganizationInvitationRequestView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


