/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// TokenFilterdaitchMokotoffSoundex Filter that creates tokens for words that sound the same based on the Daitch-Mokotoff Soundex phonetic algorithm. This filter can generate multiple encodings for each input, where each encoded token is a 6 digit number.  **NOTE**: Don't use the **daitchMokotoffSoundex** token filter in:  -Synonym or autocomplete mapping definitions - Operators where **fuzzy** is enabled. Atlas Search supports the **fuzzy** option only for the **autocomplete**, **term**, and **text** operators.
type TokenFilterdaitchMokotoffSoundex struct {
	// Value that indicates whether to include or omit the original tokens in the output of the token filter.  Choose `include` if you want to support queries on both the original tokens as well as the converted forms.   Choose `omit` if you want to query only on the converted forms of the original tokens.
	OriginalTokens *string `json:"originalTokens,omitempty"`
	// Human-readable label that identifies this token filter type.
	Type string `json:"type"`
}

// NewTokenFilterdaitchMokotoffSoundex instantiates a new TokenFilterdaitchMokotoffSoundex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenFilterdaitchMokotoffSoundex() *TokenFilterdaitchMokotoffSoundex {
	this := TokenFilterdaitchMokotoffSoundex{}
	var originalTokens string = "include"
	this.OriginalTokens = &originalTokens
	return &this
}

// NewTokenFilterdaitchMokotoffSoundexWithDefaults instantiates a new TokenFilterdaitchMokotoffSoundex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenFilterdaitchMokotoffSoundexWithDefaults() *TokenFilterdaitchMokotoffSoundex {
	this := TokenFilterdaitchMokotoffSoundex{}
	var originalTokens string = "include"
	this.OriginalTokens = &originalTokens
	return &this
}

// GetOriginalTokens returns the OriginalTokens field value if set, zero value otherwise.
func (o *TokenFilterdaitchMokotoffSoundex) GetOriginalTokens() string {
	if o == nil || o.OriginalTokens == nil {
		var ret string
		return ret
	}
	return *o.OriginalTokens
}

// GetOriginalTokensOk returns a tuple with the OriginalTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenFilterdaitchMokotoffSoundex) GetOriginalTokensOk() (*string, bool) {
	if o == nil || o.OriginalTokens == nil {
		return nil, false
	}
	return o.OriginalTokens, true
}

// HasOriginalTokens returns a boolean if a field has been set.
func (o *TokenFilterdaitchMokotoffSoundex) HasOriginalTokens() bool {
	if o != nil && o.OriginalTokens != nil {
		return true
	}

	return false
}

// SetOriginalTokens gets a reference to the given string and assigns it to the OriginalTokens field.
func (o *TokenFilterdaitchMokotoffSoundex) SetOriginalTokens(v string) {
	o.OriginalTokens = &v
}

// GetType returns the Type field value
func (o *TokenFilterdaitchMokotoffSoundex) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TokenFilterdaitchMokotoffSoundex) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TokenFilterdaitchMokotoffSoundex) SetType(v string) {
	o.Type = v
}

func (o TokenFilterdaitchMokotoffSoundex) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OriginalTokens != nil {
		toSerialize["originalTokens"] = o.OriginalTokens
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTokenFilterdaitchMokotoffSoundex struct {
	value *TokenFilterdaitchMokotoffSoundex
	isSet bool
}

func (v NullableTokenFilterdaitchMokotoffSoundex) Get() *TokenFilterdaitchMokotoffSoundex {
	return v.value
}

func (v *NullableTokenFilterdaitchMokotoffSoundex) Set(val *TokenFilterdaitchMokotoffSoundex) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenFilterdaitchMokotoffSoundex) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenFilterdaitchMokotoffSoundex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenFilterdaitchMokotoffSoundex(val *TokenFilterdaitchMokotoffSoundex) *NullableTokenFilterdaitchMokotoffSoundex {
	return &NullableTokenFilterdaitchMokotoffSoundex{value: val, isSet: true}
}

func (v NullableTokenFilterdaitchMokotoffSoundex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenFilterdaitchMokotoffSoundex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


