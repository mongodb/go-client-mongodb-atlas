/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// ReplicaSetEventType Incident that triggered this alert.
type ReplicaSetEventType string

// List of ReplicaSetEventType
const (
	REPLICASETEVENTTYPE_MEMBER_ADDED ReplicaSetEventType = "MEMBER_ADDED"
	REPLICASETEVENTTYPE_MEMBER_REMOVED ReplicaSetEventType = "MEMBER_REMOVED"
	REPLICASETEVENTTYPE_CONFIGURATION_CHANGED ReplicaSetEventType = "CONFIGURATION_CHANGED"
	REPLICASETEVENTTYPE_ENOUGH_HEALTHY_MEMBERS ReplicaSetEventType = "ENOUGH_HEALTHY_MEMBERS"
	REPLICASETEVENTTYPE_TOO_FEW_HEALTHY_MEMBERS ReplicaSetEventType = "TOO_FEW_HEALTHY_MEMBERS"
	REPLICASETEVENTTYPE_TOO_MANY_UNHEALTHY_MEMBERS ReplicaSetEventType = "TOO_MANY_UNHEALTHY_MEMBERS"
	REPLICASETEVENTTYPE_PRIMARY_ELECTED ReplicaSetEventType = "PRIMARY_ELECTED"
	REPLICASETEVENTTYPE_REPLICATION_OPLOG_WINDOW_TREND_HEALTHY ReplicaSetEventType = "REPLICATION_OPLOG_WINDOW_TREND_HEALTHY"
	REPLICASETEVENTTYPE_REPLICATION_OPLOG_WINDOW_HEALTHY ReplicaSetEventType = "REPLICATION_OPLOG_WINDOW_HEALTHY"
	REPLICASETEVENTTYPE_REPLICATION_OPLOG_WINDOW_RUNNING_OUT ReplicaSetEventType = "REPLICATION_OPLOG_WINDOW_RUNNING_OUT"
	REPLICASETEVENTTYPE_ONE_PRIMARY ReplicaSetEventType = "ONE_PRIMARY"
	REPLICASETEVENTTYPE_MULTIPLE_PRIMARIES ReplicaSetEventType = "MULTIPLE_PRIMARIES"
	REPLICASETEVENTTYPE_NO_PRIMARY ReplicaSetEventType = "NO_PRIMARY"
	REPLICASETEVENTTYPE_TOO_MANY_ELECTIONS ReplicaSetEventType = "TOO_MANY_ELECTIONS"
	REPLICASETEVENTTYPE_SERVERLESS_PROXIES_REPORTING ReplicaSetEventType = "SERVERLESS_PROXIES_REPORTING"
	REPLICASETEVENTTYPE_SERVERLESS_PROXIES_STOPPED_REPORTING ReplicaSetEventType = "SERVERLESS_PROXIES_STOPPED_REPORTING"
)

// All allowed values of ReplicaSetEventType enum
var AllowedReplicaSetEventTypeEnumValues = []ReplicaSetEventType{
	"MEMBER_ADDED",
	"MEMBER_REMOVED",
	"CONFIGURATION_CHANGED",
	"ENOUGH_HEALTHY_MEMBERS",
	"TOO_FEW_HEALTHY_MEMBERS",
	"TOO_MANY_UNHEALTHY_MEMBERS",
	"PRIMARY_ELECTED",
	"REPLICATION_OPLOG_WINDOW_TREND_HEALTHY",
	"REPLICATION_OPLOG_WINDOW_HEALTHY",
	"REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
	"ONE_PRIMARY",
	"MULTIPLE_PRIMARIES",
	"NO_PRIMARY",
	"TOO_MANY_ELECTIONS",
	"SERVERLESS_PROXIES_REPORTING",
	"SERVERLESS_PROXIES_STOPPED_REPORTING",
}

func (v *ReplicaSetEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicaSetEventType(value)
	for _, existing := range AllowedReplicaSetEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicaSetEventType", value)
}

// NewReplicaSetEventTypeFromValue returns a pointer to a valid ReplicaSetEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicaSetEventTypeFromValue(v string) (*ReplicaSetEventType, error) {
	ev := ReplicaSetEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicaSetEventType: valid values are %v", v, AllowedReplicaSetEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicaSetEventType) IsValid() bool {
	for _, existing := range AllowedReplicaSetEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicaSetEventType value
func (v ReplicaSetEventType) Ptr() *ReplicaSetEventType {
	return &v
}

type NullableReplicaSetEventType struct {
	value *ReplicaSetEventType
	isSet bool
}

func (v NullableReplicaSetEventType) Get() *ReplicaSetEventType {
	return v.value
}

func (v *NullableReplicaSetEventType) Set(val *ReplicaSetEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaSetEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaSetEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaSetEventType(val *ReplicaSetEventType) *NullableReplicaSetEventType {
	return &NullableReplicaSetEventType{value: val, isSet: true}
}

func (v NullableReplicaSetEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaSetEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

