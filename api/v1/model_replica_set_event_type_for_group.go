/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// ReplicaSetEventTypeForGroup Unique identifier of event type.
type ReplicaSetEventTypeForGroup string

// List of ReplicaSetEventTypeForGroup
const (
	REPLICASETEVENTTYPEFORGROUP_MEMBER_ADDED ReplicaSetEventTypeForGroup = "MEMBER_ADDED"
	REPLICASETEVENTTYPEFORGROUP_MEMBER_REMOVED ReplicaSetEventTypeForGroup = "MEMBER_REMOVED"
	REPLICASETEVENTTYPEFORGROUP_CONFIGURATION_CHANGED ReplicaSetEventTypeForGroup = "CONFIGURATION_CHANGED"
	REPLICASETEVENTTYPEFORGROUP_ENOUGH_HEALTHY_MEMBERS ReplicaSetEventTypeForGroup = "ENOUGH_HEALTHY_MEMBERS"
	REPLICASETEVENTTYPEFORGROUP_TOO_FEW_HEALTHY_MEMBERS ReplicaSetEventTypeForGroup = "TOO_FEW_HEALTHY_MEMBERS"
	REPLICASETEVENTTYPEFORGROUP_TOO_MANY_UNHEALTHY_MEMBERS ReplicaSetEventTypeForGroup = "TOO_MANY_UNHEALTHY_MEMBERS"
	REPLICASETEVENTTYPEFORGROUP_PRIMARY_ELECTED ReplicaSetEventTypeForGroup = "PRIMARY_ELECTED"
	REPLICASETEVENTTYPEFORGROUP_REPLICATION_OPLOG_WINDOW_TREND_HEALTHY ReplicaSetEventTypeForGroup = "REPLICATION_OPLOG_WINDOW_TREND_HEALTHY"
	REPLICASETEVENTTYPEFORGROUP_REPLICATION_OPLOG_WINDOW_HEALTHY ReplicaSetEventTypeForGroup = "REPLICATION_OPLOG_WINDOW_HEALTHY"
	REPLICASETEVENTTYPEFORGROUP_REPLICATION_OPLOG_WINDOW_RUNNING_OUT ReplicaSetEventTypeForGroup = "REPLICATION_OPLOG_WINDOW_RUNNING_OUT"
	REPLICASETEVENTTYPEFORGROUP_ONE_PRIMARY ReplicaSetEventTypeForGroup = "ONE_PRIMARY"
	REPLICASETEVENTTYPEFORGROUP_MULTIPLE_PRIMARIES ReplicaSetEventTypeForGroup = "MULTIPLE_PRIMARIES"
	REPLICASETEVENTTYPEFORGROUP_NO_PRIMARY ReplicaSetEventTypeForGroup = "NO_PRIMARY"
	REPLICASETEVENTTYPEFORGROUP_TOO_MANY_ELECTIONS ReplicaSetEventTypeForGroup = "TOO_MANY_ELECTIONS"
)

// All allowed values of ReplicaSetEventTypeForGroup enum
var AllowedReplicaSetEventTypeForGroupEnumValues = []ReplicaSetEventTypeForGroup{
	"MEMBER_ADDED",
	"MEMBER_REMOVED",
	"CONFIGURATION_CHANGED",
	"ENOUGH_HEALTHY_MEMBERS",
	"TOO_FEW_HEALTHY_MEMBERS",
	"TOO_MANY_UNHEALTHY_MEMBERS",
	"PRIMARY_ELECTED",
	"REPLICATION_OPLOG_WINDOW_TREND_HEALTHY",
	"REPLICATION_OPLOG_WINDOW_HEALTHY",
	"REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
	"ONE_PRIMARY",
	"MULTIPLE_PRIMARIES",
	"NO_PRIMARY",
	"TOO_MANY_ELECTIONS",
}

func (v *ReplicaSetEventTypeForGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicaSetEventTypeForGroup(value)
	for _, existing := range AllowedReplicaSetEventTypeForGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicaSetEventTypeForGroup", value)
}

// NewReplicaSetEventTypeForGroupFromValue returns a pointer to a valid ReplicaSetEventTypeForGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicaSetEventTypeForGroupFromValue(v string) (*ReplicaSetEventTypeForGroup, error) {
	ev := ReplicaSetEventTypeForGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicaSetEventTypeForGroup: valid values are %v", v, AllowedReplicaSetEventTypeForGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicaSetEventTypeForGroup) IsValid() bool {
	for _, existing := range AllowedReplicaSetEventTypeForGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicaSetEventTypeForGroup value
func (v ReplicaSetEventTypeForGroup) Ptr() *ReplicaSetEventTypeForGroup {
	return &v
}

type NullableReplicaSetEventTypeForGroup struct {
	value *ReplicaSetEventTypeForGroup
	isSet bool
}

func (v NullableReplicaSetEventTypeForGroup) Get() *ReplicaSetEventTypeForGroup {
	return v.value
}

func (v *NullableReplicaSetEventTypeForGroup) Set(val *ReplicaSetEventTypeForGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaSetEventTypeForGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaSetEventTypeForGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaSetEventTypeForGroup(val *ReplicaSetEventTypeForGroup) *NullableReplicaSetEventTypeForGroup {
	return &NullableReplicaSetEventTypeForGroup{value: val, isSet: true}
}

func (v NullableReplicaSetEventTypeForGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaSetEventTypeForGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

