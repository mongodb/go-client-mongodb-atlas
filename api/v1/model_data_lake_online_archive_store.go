/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DataLakeOnlineArchiveStore struct for DataLakeOnlineArchiveStore
type DataLakeOnlineArchiveStore struct {
	// ID of the Cluster the Online Archive belongs to.
	ClusterId string `json:"clusterId"`
	// Name of the Cluster the Online Archive belongs to.
	ClusterName string `json:"clusterName"`
	// ID of the Project the Online Archive belongs to.
	ProjectId string `json:"projectId"`
}

// NewDataLakeOnlineArchiveStore instantiates a new DataLakeOnlineArchiveStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLakeOnlineArchiveStore() *DataLakeOnlineArchiveStore {
	this := DataLakeOnlineArchiveStore{}
	return &this
}

// NewDataLakeOnlineArchiveStoreWithDefaults instantiates a new DataLakeOnlineArchiveStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLakeOnlineArchiveStoreWithDefaults() *DataLakeOnlineArchiveStore {
	this := DataLakeOnlineArchiveStore{}
	return &this
}

// GetClusterId returns the ClusterId field value
func (o *DataLakeOnlineArchiveStore) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *DataLakeOnlineArchiveStore) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *DataLakeOnlineArchiveStore) SetClusterId(v string) {
	o.ClusterId = v
}

// GetClusterName returns the ClusterName field value
func (o *DataLakeOnlineArchiveStore) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *DataLakeOnlineArchiveStore) GetClusterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *DataLakeOnlineArchiveStore) SetClusterName(v string) {
	o.ClusterName = v
}

// GetProjectId returns the ProjectId field value
func (o *DataLakeOnlineArchiveStore) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *DataLakeOnlineArchiveStore) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *DataLakeOnlineArchiveStore) SetProjectId(v string) {
	o.ProjectId = v
}

func (o DataLakeOnlineArchiveStore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clusterId"] = o.ClusterId
	}
	if true {
		toSerialize["clusterName"] = o.ClusterName
	}
	if true {
		toSerialize["projectId"] = o.ProjectId
	}
	return json.Marshal(toSerialize)
}

type NullableDataLakeOnlineArchiveStore struct {
	value *DataLakeOnlineArchiveStore
	isSet bool
}

func (v NullableDataLakeOnlineArchiveStore) Get() *DataLakeOnlineArchiveStore {
	return v.value
}

func (v *NullableDataLakeOnlineArchiveStore) Set(val *DataLakeOnlineArchiveStore) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLakeOnlineArchiveStore) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLakeOnlineArchiveStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLakeOnlineArchiveStore(val *DataLakeOnlineArchiveStore) *NullableDataLakeOnlineArchiveStore {
	return &NullableDataLakeOnlineArchiveStore{value: val, isSet: true}
}

func (v NullableDataLakeOnlineArchiveStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLakeOnlineArchiveStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


