/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ReplicaSetAlertableEventTypeForNdsGroup Incident that triggered this alert.
type ReplicaSetAlertableEventTypeForNdsGroup string

// List of ReplicaSetAlertableEventTypeForNdsGroup
const (
	REPLICASETALERTABLEEVENTTYPEFORNDSGROUP_REPLICATION_OPLOG_WINDOW_RUNNING_OUT ReplicaSetAlertableEventTypeForNdsGroup = "REPLICATION_OPLOG_WINDOW_RUNNING_OUT"
	REPLICASETALERTABLEEVENTTYPEFORNDSGROUP_NO_PRIMARY ReplicaSetAlertableEventTypeForNdsGroup = "NO_PRIMARY"
	REPLICASETALERTABLEEVENTTYPEFORNDSGROUP_PRIMARY_ELECTED ReplicaSetAlertableEventTypeForNdsGroup = "PRIMARY_ELECTED"
	REPLICASETALERTABLEEVENTTYPEFORNDSGROUP_TOO_MANY_ELECTIONS ReplicaSetAlertableEventTypeForNdsGroup = "TOO_MANY_ELECTIONS"
)

// All allowed values of ReplicaSetAlertableEventTypeForNdsGroup enum
var AllowedReplicaSetAlertableEventTypeForNdsGroupEnumValues = []ReplicaSetAlertableEventTypeForNdsGroup{
	"REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
	"NO_PRIMARY",
	"PRIMARY_ELECTED",
	"TOO_MANY_ELECTIONS",
}

func (v *ReplicaSetAlertableEventTypeForNdsGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicaSetAlertableEventTypeForNdsGroup(value)
	for _, existing := range AllowedReplicaSetAlertableEventTypeForNdsGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicaSetAlertableEventTypeForNdsGroup", value)
}

// NewReplicaSetAlertableEventTypeForNdsGroupFromValue returns a pointer to a valid ReplicaSetAlertableEventTypeForNdsGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicaSetAlertableEventTypeForNdsGroupFromValue(v string) (*ReplicaSetAlertableEventTypeForNdsGroup, error) {
	ev := ReplicaSetAlertableEventTypeForNdsGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicaSetAlertableEventTypeForNdsGroup: valid values are %v", v, AllowedReplicaSetAlertableEventTypeForNdsGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicaSetAlertableEventTypeForNdsGroup) IsValid() bool {
	for _, existing := range AllowedReplicaSetAlertableEventTypeForNdsGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicaSetAlertableEventTypeForNdsGroup value
func (v ReplicaSetAlertableEventTypeForNdsGroup) Ptr() *ReplicaSetAlertableEventTypeForNdsGroup {
	return &v
}

type NullableReplicaSetAlertableEventTypeForNdsGroup struct {
	value *ReplicaSetAlertableEventTypeForNdsGroup
	isSet bool
}

func (v NullableReplicaSetAlertableEventTypeForNdsGroup) Get() *ReplicaSetAlertableEventTypeForNdsGroup {
	return v.value
}

func (v *NullableReplicaSetAlertableEventTypeForNdsGroup) Set(val *ReplicaSetAlertableEventTypeForNdsGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaSetAlertableEventTypeForNdsGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaSetAlertableEventTypeForNdsGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaSetAlertableEventTypeForNdsGroup(val *ReplicaSetAlertableEventTypeForNdsGroup) *NullableReplicaSetAlertableEventTypeForNdsGroup {
	return &NullableReplicaSetAlertableEventTypeForNdsGroup{value: val, isSet: true}
}

func (v NullableReplicaSetAlertableEventTypeForNdsGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaSetAlertableEventTypeForNdsGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

