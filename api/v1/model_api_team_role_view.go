/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ApiTeamRoleView struct for ApiTeamRoleView
type ApiTeamRoleView struct {
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links,omitempty"`
	// One or more organization- or project-level roles to assign to the MongoDB Cloud user.
	RoleNames []string `json:"roleNames,omitempty"`
	// Unique 24-hexadecimal character string that identifies the team.
	TeamId *string `json:"teamId,omitempty"`
}

// NewApiTeamRoleView instantiates a new ApiTeamRoleView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTeamRoleView() *ApiTeamRoleView {
	this := ApiTeamRoleView{}
	return &this
}

// NewApiTeamRoleViewWithDefaults instantiates a new ApiTeamRoleView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTeamRoleViewWithDefaults() *ApiTeamRoleView {
	this := ApiTeamRoleView{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ApiTeamRoleView) GetLinks() []Link {
	if o == nil || o.Links == nil {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTeamRoleView) GetLinksOk() ([]Link, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ApiTeamRoleView) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *ApiTeamRoleView) SetLinks(v []Link) {
	o.Links = v
}

// GetRoleNames returns the RoleNames field value if set, zero value otherwise.
func (o *ApiTeamRoleView) GetRoleNames() []string {
	if o == nil || o.RoleNames == nil {
		var ret []string
		return ret
	}
	return o.RoleNames
}

// GetRoleNamesOk returns a tuple with the RoleNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTeamRoleView) GetRoleNamesOk() ([]string, bool) {
	if o == nil || o.RoleNames == nil {
		return nil, false
	}
	return o.RoleNames, true
}

// HasRoleNames returns a boolean if a field has been set.
func (o *ApiTeamRoleView) HasRoleNames() bool {
	if o != nil && o.RoleNames != nil {
		return true
	}

	return false
}

// SetRoleNames gets a reference to the given []string and assigns it to the RoleNames field.
func (o *ApiTeamRoleView) SetRoleNames(v []string) {
	o.RoleNames = v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *ApiTeamRoleView) GetTeamId() string {
	if o == nil || o.TeamId == nil {
		var ret string
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTeamRoleView) GetTeamIdOk() (*string, bool) {
	if o == nil || o.TeamId == nil {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *ApiTeamRoleView) HasTeamId() bool {
	if o != nil && o.TeamId != nil {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given string and assigns it to the TeamId field.
func (o *ApiTeamRoleView) SetTeamId(v string) {
	o.TeamId = &v
}

func (o ApiTeamRoleView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.RoleNames != nil {
		toSerialize["roleNames"] = o.RoleNames
	}
	if o.TeamId != nil {
		toSerialize["teamId"] = o.TeamId
	}
	return json.Marshal(toSerialize)
}

type NullableApiTeamRoleView struct {
	value *ApiTeamRoleView
	isSet bool
}

func (v NullableApiTeamRoleView) Get() *ApiTeamRoleView {
	return v.value
}

func (v *NullableApiTeamRoleView) Set(val *ApiTeamRoleView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTeamRoleView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTeamRoleView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTeamRoleView(val *ApiTeamRoleView) *NullableApiTeamRoleView {
	return &NullableApiTeamRoleView{value: val, isSet: true}
}

func (v NullableApiTeamRoleView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTeamRoleView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


