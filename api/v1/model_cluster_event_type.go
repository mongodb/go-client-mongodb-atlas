/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ClusterEventType Incident that triggered this alert.
type ClusterEventType string

// List of ClusterEventType
const (
	CLUSTEREVENTTYPE_CLUSTER_MONGOS_IS_PRESENT ClusterEventType = "CLUSTER_MONGOS_IS_PRESENT"
	CLUSTEREVENTTYPE_CLUSTER_MONGOS_IS_MISSING ClusterEventType = "CLUSTER_MONGOS_IS_MISSING"
	CLUSTEREVENTTYPE_SHARD_ADDED ClusterEventType = "SHARD_ADDED"
	CLUSTEREVENTTYPE_SHARD_REMOVED ClusterEventType = "SHARD_REMOVED"
)

// All allowed values of ClusterEventType enum
var AllowedClusterEventTypeEnumValues = []ClusterEventType{
	"CLUSTER_MONGOS_IS_PRESENT",
	"CLUSTER_MONGOS_IS_MISSING",
	"SHARD_ADDED",
	"SHARD_REMOVED",
}

func (v *ClusterEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterEventType(value)
	for _, existing := range AllowedClusterEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterEventType", value)
}

// NewClusterEventTypeFromValue returns a pointer to a valid ClusterEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterEventTypeFromValue(v string) (*ClusterEventType, error) {
	ev := ClusterEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterEventType: valid values are %v", v, AllowedClusterEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterEventType) IsValid() bool {
	for _, existing := range AllowedClusterEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterEventType value
func (v ClusterEventType) Ptr() *ClusterEventType {
	return &v
}

type NullableClusterEventType struct {
	value *ClusterEventType
	isSet bool
}

func (v NullableClusterEventType) Get() *ClusterEventType {
	return v.value
}

func (v *NullableClusterEventType) Set(val *ClusterEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterEventType(val *ClusterEventType) *NullableClusterEventType {
	return &NullableClusterEventType{value: val, isSet: true}
}

func (v NullableClusterEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

