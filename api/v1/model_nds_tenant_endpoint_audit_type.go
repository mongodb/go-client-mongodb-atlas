/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// NDSTenantEndpointAuditType Unique identifier of event type.
type NDSTenantEndpointAuditType string

// List of NDSTenantEndpointAuditType
const (
	NDSTENANTENDPOINTAUDITTYPE_CREATED NDSTenantEndpointAuditType = "TENANT_ENDPOINT_CREATED"
	NDSTENANTENDPOINTAUDITTYPE_RESERVED NDSTenantEndpointAuditType = "TENANT_ENDPOINT_RESERVED"
	NDSTENANTENDPOINTAUDITTYPE_RESERVATION_FAILED NDSTenantEndpointAuditType = "TENANT_ENDPOINT_RESERVATION_FAILED"
	NDSTENANTENDPOINTAUDITTYPE_UPDATED NDSTenantEndpointAuditType = "TENANT_ENDPOINT_UPDATED"
	NDSTENANTENDPOINTAUDITTYPE_INITIATING NDSTenantEndpointAuditType = "TENANT_ENDPOINT_INITIATING"
	NDSTENANTENDPOINTAUDITTYPE_AVAILABLE NDSTenantEndpointAuditType = "TENANT_ENDPOINT_AVAILABLE"
	NDSTENANTENDPOINTAUDITTYPE_FAILED NDSTenantEndpointAuditType = "TENANT_ENDPOINT_FAILED"
	NDSTENANTENDPOINTAUDITTYPE_DELETING NDSTenantEndpointAuditType = "TENANT_ENDPOINT_DELETING"
	NDSTENANTENDPOINTAUDITTYPE_DELETED NDSTenantEndpointAuditType = "TENANT_ENDPOINT_DELETED"
	NDSTENANTENDPOINTAUDITTYPE_EXPIRED NDSTenantEndpointAuditType = "TENANT_ENDPOINT_EXPIRED"
)

// All allowed values of NDSTenantEndpointAuditType enum
var AllowedNDSTenantEndpointAuditTypeEnumValues = []NDSTenantEndpointAuditType{
	"TENANT_ENDPOINT_CREATED",
	"TENANT_ENDPOINT_RESERVED",
	"TENANT_ENDPOINT_RESERVATION_FAILED",
	"TENANT_ENDPOINT_UPDATED",
	"TENANT_ENDPOINT_INITIATING",
	"TENANT_ENDPOINT_AVAILABLE",
	"TENANT_ENDPOINT_FAILED",
	"TENANT_ENDPOINT_DELETING",
	"TENANT_ENDPOINT_DELETED",
	"TENANT_ENDPOINT_EXPIRED",
}

func (v *NDSTenantEndpointAuditType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NDSTenantEndpointAuditType(value)
	for _, existing := range AllowedNDSTenantEndpointAuditTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NDSTenantEndpointAuditType", value)
}

// NewNDSTenantEndpointAuditTypeFromValue returns a pointer to a valid NDSTenantEndpointAuditType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNDSTenantEndpointAuditTypeFromValue(v string) (*NDSTenantEndpointAuditType, error) {
	ev := NDSTenantEndpointAuditType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NDSTenantEndpointAuditType: valid values are %v", v, AllowedNDSTenantEndpointAuditTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NDSTenantEndpointAuditType) IsValid() bool {
	for _, existing := range AllowedNDSTenantEndpointAuditTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NDSTenantEndpointAuditType value
func (v NDSTenantEndpointAuditType) Ptr() *NDSTenantEndpointAuditType {
	return &v
}

type NullableNDSTenantEndpointAuditType struct {
	value *NDSTenantEndpointAuditType
	isSet bool
}

func (v NullableNDSTenantEndpointAuditType) Get() *NDSTenantEndpointAuditType {
	return v.value
}

func (v *NullableNDSTenantEndpointAuditType) Set(val *NDSTenantEndpointAuditType) {
	v.value = val
	v.isSet = true
}

func (v NullableNDSTenantEndpointAuditType) IsSet() bool {
	return v.isSet
}

func (v *NullableNDSTenantEndpointAuditType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNDSTenantEndpointAuditType(val *NDSTenantEndpointAuditType) *NullableNDSTenantEndpointAuditType {
	return &NullableNDSTenantEndpointAuditType{value: val, isSet: true}
}

func (v NullableNDSTenantEndpointAuditType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNDSTenantEndpointAuditType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

