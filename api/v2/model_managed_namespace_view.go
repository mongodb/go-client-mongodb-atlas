/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// ManagedNamespaceView struct for ManagedNamespaceView
type ManagedNamespaceView struct {
	// Human-readable label of the collection to manage for this Global Cluster.
	Collection *string `json:"collection,omitempty"`
	// Database parameter used to divide the *collection* into shards. Global clusters require a compound shard key. This compound shard key combines the location parameter and the user-selected custom key.
	CustomShardKey *string `json:"customShardKey,omitempty"`
	// Human-readable label of the database to manage for this Global Cluster.
	Db *string `json:"db,omitempty"`
	// Flag that indicates whether someone hashed the custom shard key. If this parameter returns `false`, this cluster uses ranged sharding.
	IsCustomShardKeyHashed *bool `json:"isCustomShardKeyHashed,omitempty"`
	// Flag that indicates whether the underlying index enforces unique values.
	IsShardKeyUnique *bool `json:"isShardKeyUnique,omitempty"`
	// Minimum number of chunks to create initially when sharding an empty collection with a hashed shard key.
	NumInitialChunks *int64 `json:"numInitialChunks,omitempty"`
	// Flag that indicates whether MongoDB Cloud should create and distribute initial chunks for an empty or non-existing collection. MongoDB Cloud distributes data based on the defined zones and zone ranges for the collection.
	PresplitHashedZones *bool `json:"presplitHashedZones,omitempty"`
}

// NewManagedNamespaceView instantiates a new ManagedNamespaceView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedNamespaceView() *ManagedNamespaceView {
	this := ManagedNamespaceView{}
	var isCustomShardKeyHashed bool = false
	this.IsCustomShardKeyHashed = &isCustomShardKeyHashed
	var isShardKeyUnique bool = false
	this.IsShardKeyUnique = &isShardKeyUnique
	var presplitHashedZones bool = false
	this.PresplitHashedZones = &presplitHashedZones
	return &this
}

// NewManagedNamespaceViewWithDefaults instantiates a new ManagedNamespaceView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedNamespaceViewWithDefaults() *ManagedNamespaceView {
	this := ManagedNamespaceView{}
	var isCustomShardKeyHashed bool = false
	this.IsCustomShardKeyHashed = &isCustomShardKeyHashed
	var isShardKeyUnique bool = false
	this.IsShardKeyUnique = &isShardKeyUnique
	var presplitHashedZones bool = false
	this.PresplitHashedZones = &presplitHashedZones
	return &this
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *ManagedNamespaceView) GetCollection() string {
	if o == nil || o.Collection == nil {
		var ret string
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedNamespaceView) GetCollectionOk() (*string, bool) {
	if o == nil || o.Collection == nil {
		return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *ManagedNamespaceView) HasCollection() bool {
	if o != nil && o.Collection != nil {
		return true
	}

	return false
}

// SetCollection gets a reference to the given string and assigns it to the Collection field.
func (o *ManagedNamespaceView) SetCollection(v string) {
	o.Collection = &v
}

// GetCustomShardKey returns the CustomShardKey field value if set, zero value otherwise.
func (o *ManagedNamespaceView) GetCustomShardKey() string {
	if o == nil || o.CustomShardKey == nil {
		var ret string
		return ret
	}
	return *o.CustomShardKey
}

// GetCustomShardKeyOk returns a tuple with the CustomShardKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedNamespaceView) GetCustomShardKeyOk() (*string, bool) {
	if o == nil || o.CustomShardKey == nil {
		return nil, false
	}
	return o.CustomShardKey, true
}

// HasCustomShardKey returns a boolean if a field has been set.
func (o *ManagedNamespaceView) HasCustomShardKey() bool {
	if o != nil && o.CustomShardKey != nil {
		return true
	}

	return false
}

// SetCustomShardKey gets a reference to the given string and assigns it to the CustomShardKey field.
func (o *ManagedNamespaceView) SetCustomShardKey(v string) {
	o.CustomShardKey = &v
}

// GetDb returns the Db field value if set, zero value otherwise.
func (o *ManagedNamespaceView) GetDb() string {
	if o == nil || o.Db == nil {
		var ret string
		return ret
	}
	return *o.Db
}

// GetDbOk returns a tuple with the Db field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedNamespaceView) GetDbOk() (*string, bool) {
	if o == nil || o.Db == nil {
		return nil, false
	}
	return o.Db, true
}

// HasDb returns a boolean if a field has been set.
func (o *ManagedNamespaceView) HasDb() bool {
	if o != nil && o.Db != nil {
		return true
	}

	return false
}

// SetDb gets a reference to the given string and assigns it to the Db field.
func (o *ManagedNamespaceView) SetDb(v string) {
	o.Db = &v
}

// GetIsCustomShardKeyHashed returns the IsCustomShardKeyHashed field value if set, zero value otherwise.
func (o *ManagedNamespaceView) GetIsCustomShardKeyHashed() bool {
	if o == nil || o.IsCustomShardKeyHashed == nil {
		var ret bool
		return ret
	}
	return *o.IsCustomShardKeyHashed
}

// GetIsCustomShardKeyHashedOk returns a tuple with the IsCustomShardKeyHashed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedNamespaceView) GetIsCustomShardKeyHashedOk() (*bool, bool) {
	if o == nil || o.IsCustomShardKeyHashed == nil {
		return nil, false
	}
	return o.IsCustomShardKeyHashed, true
}

// HasIsCustomShardKeyHashed returns a boolean if a field has been set.
func (o *ManagedNamespaceView) HasIsCustomShardKeyHashed() bool {
	if o != nil && o.IsCustomShardKeyHashed != nil {
		return true
	}

	return false
}

// SetIsCustomShardKeyHashed gets a reference to the given bool and assigns it to the IsCustomShardKeyHashed field.
func (o *ManagedNamespaceView) SetIsCustomShardKeyHashed(v bool) {
	o.IsCustomShardKeyHashed = &v
}

// GetIsShardKeyUnique returns the IsShardKeyUnique field value if set, zero value otherwise.
func (o *ManagedNamespaceView) GetIsShardKeyUnique() bool {
	if o == nil || o.IsShardKeyUnique == nil {
		var ret bool
		return ret
	}
	return *o.IsShardKeyUnique
}

// GetIsShardKeyUniqueOk returns a tuple with the IsShardKeyUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedNamespaceView) GetIsShardKeyUniqueOk() (*bool, bool) {
	if o == nil || o.IsShardKeyUnique == nil {
		return nil, false
	}
	return o.IsShardKeyUnique, true
}

// HasIsShardKeyUnique returns a boolean if a field has been set.
func (o *ManagedNamespaceView) HasIsShardKeyUnique() bool {
	if o != nil && o.IsShardKeyUnique != nil {
		return true
	}

	return false
}

// SetIsShardKeyUnique gets a reference to the given bool and assigns it to the IsShardKeyUnique field.
func (o *ManagedNamespaceView) SetIsShardKeyUnique(v bool) {
	o.IsShardKeyUnique = &v
}

// GetNumInitialChunks returns the NumInitialChunks field value if set, zero value otherwise.
func (o *ManagedNamespaceView) GetNumInitialChunks() int64 {
	if o == nil || o.NumInitialChunks == nil {
		var ret int64
		return ret
	}
	return *o.NumInitialChunks
}

// GetNumInitialChunksOk returns a tuple with the NumInitialChunks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedNamespaceView) GetNumInitialChunksOk() (*int64, bool) {
	if o == nil || o.NumInitialChunks == nil {
		return nil, false
	}
	return o.NumInitialChunks, true
}

// HasNumInitialChunks returns a boolean if a field has been set.
func (o *ManagedNamespaceView) HasNumInitialChunks() bool {
	if o != nil && o.NumInitialChunks != nil {
		return true
	}

	return false
}

// SetNumInitialChunks gets a reference to the given int64 and assigns it to the NumInitialChunks field.
func (o *ManagedNamespaceView) SetNumInitialChunks(v int64) {
	o.NumInitialChunks = &v
}

// GetPresplitHashedZones returns the PresplitHashedZones field value if set, zero value otherwise.
func (o *ManagedNamespaceView) GetPresplitHashedZones() bool {
	if o == nil || o.PresplitHashedZones == nil {
		var ret bool
		return ret
	}
	return *o.PresplitHashedZones
}

// GetPresplitHashedZonesOk returns a tuple with the PresplitHashedZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedNamespaceView) GetPresplitHashedZonesOk() (*bool, bool) {
	if o == nil || o.PresplitHashedZones == nil {
		return nil, false
	}
	return o.PresplitHashedZones, true
}

// HasPresplitHashedZones returns a boolean if a field has been set.
func (o *ManagedNamespaceView) HasPresplitHashedZones() bool {
	if o != nil && o.PresplitHashedZones != nil {
		return true
	}

	return false
}

// SetPresplitHashedZones gets a reference to the given bool and assigns it to the PresplitHashedZones field.
func (o *ManagedNamespaceView) SetPresplitHashedZones(v bool) {
	o.PresplitHashedZones = &v
}

func (o ManagedNamespaceView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Collection != nil {
		toSerialize["collection"] = o.Collection
	}
	if o.CustomShardKey != nil {
		toSerialize["customShardKey"] = o.CustomShardKey
	}
	if o.Db != nil {
		toSerialize["db"] = o.Db
	}
	if o.IsCustomShardKeyHashed != nil {
		toSerialize["isCustomShardKeyHashed"] = o.IsCustomShardKeyHashed
	}
	if o.IsShardKeyUnique != nil {
		toSerialize["isShardKeyUnique"] = o.IsShardKeyUnique
	}
	if o.NumInitialChunks != nil {
		toSerialize["numInitialChunks"] = o.NumInitialChunks
	}
	if o.PresplitHashedZones != nil {
		toSerialize["presplitHashedZones"] = o.PresplitHashedZones
	}
	return json.Marshal(toSerialize)
}

type NullableManagedNamespaceView struct {
	value *ManagedNamespaceView
	isSet bool
}

func (v NullableManagedNamespaceView) Get() *ManagedNamespaceView {
	return v.value
}

func (v *NullableManagedNamespaceView) Set(val *ManagedNamespaceView) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedNamespaceView) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedNamespaceView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedNamespaceView(val *ManagedNamespaceView) *NullableManagedNamespaceView {
	return &NullableManagedNamespaceView{value: val, isSet: true}
}

func (v NullableManagedNamespaceView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedNamespaceView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


