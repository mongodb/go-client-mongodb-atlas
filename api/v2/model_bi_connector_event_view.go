/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"time"
)

// BiConnectorEventView Bi connector event indicates when bi connector is up or down.
type BiConnectorEventView struct {
	// Date and time when this event occurred. This parameter expresses its value in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener noreferrer\">ISO 8601</a> timestamp format in UTC.
	Created time.Time `json:"created"`
	EventTypeName BiConnectorEventType `json:"eventTypeName"`
	// Unique 24-hexadecimal digit string that identifies the project in which the event occurred. The **eventId** identifies the specific event.
	GroupId *string `json:"groupId,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the event.
	Id string `json:"id"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links"`
	// Unique 24-hexadecimal digit string that identifies the organization to which these events apply.
	OrgId *string `json:"orgId,omitempty"`
	// IANA port on which the MongoDB process listens for requests.
	Port *int32 `json:"port,omitempty"`
	Raw *Raw `json:"raw,omitempty"`
}

// NewBiConnectorEventView instantiates a new BiConnectorEventView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBiConnectorEventView() *BiConnectorEventView {
	this := BiConnectorEventView{}
	return &this
}

// NewBiConnectorEventViewWithDefaults instantiates a new BiConnectorEventView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBiConnectorEventViewWithDefaults() *BiConnectorEventView {
	this := BiConnectorEventView{}
	return &this
}

// GetCreated returns the Created field value
func (o *BiConnectorEventView) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *BiConnectorEventView) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *BiConnectorEventView) SetCreated(v time.Time) {
	o.Created = v
}

// GetEventTypeName returns the EventTypeName field value
func (o *BiConnectorEventView) GetEventTypeName() BiConnectorEventType {
	if o == nil {
		var ret BiConnectorEventType
		return ret
	}

	return o.EventTypeName
}

// GetEventTypeNameOk returns a tuple with the EventTypeName field value
// and a boolean to check if the value has been set.
func (o *BiConnectorEventView) GetEventTypeNameOk() (*BiConnectorEventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventTypeName, true
}

// SetEventTypeName sets field value
func (o *BiConnectorEventView) SetEventTypeName(v BiConnectorEventType) {
	o.EventTypeName = v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *BiConnectorEventView) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiConnectorEventView) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *BiConnectorEventView) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *BiConnectorEventView) SetGroupId(v string) {
	o.GroupId = &v
}

// GetId returns the Id field value
func (o *BiConnectorEventView) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BiConnectorEventView) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BiConnectorEventView) SetId(v string) {
	o.Id = v
}

// GetLinks returns the Links field value
func (o *BiConnectorEventView) GetLinks() []Link {
	if o == nil {
		var ret []Link
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *BiConnectorEventView) GetLinksOk() ([]Link, bool) {
	if o == nil {
		return nil, false
	}
	return o.Links, true
}

// SetLinks sets field value
func (o *BiConnectorEventView) SetLinks(v []Link) {
	o.Links = v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *BiConnectorEventView) GetOrgId() string {
	if o == nil || o.OrgId == nil {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiConnectorEventView) GetOrgIdOk() (*string, bool) {
	if o == nil || o.OrgId == nil {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *BiConnectorEventView) HasOrgId() bool {
	if o != nil && o.OrgId != nil {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *BiConnectorEventView) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *BiConnectorEventView) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiConnectorEventView) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *BiConnectorEventView) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *BiConnectorEventView) SetPort(v int32) {
	o.Port = &v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *BiConnectorEventView) GetRaw() Raw {
	if o == nil || o.Raw == nil {
		var ret Raw
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BiConnectorEventView) GetRawOk() (*Raw, bool) {
	if o == nil || o.Raw == nil {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *BiConnectorEventView) HasRaw() bool {
	if o != nil && o.Raw != nil {
		return true
	}

	return false
}

// SetRaw gets a reference to the given Raw and assigns it to the Raw field.
func (o *BiConnectorEventView) SetRaw(v Raw) {
	o.Raw = &v
}

func (o BiConnectorEventView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["eventTypeName"] = o.EventTypeName
	}
	if o.GroupId != nil {
		toSerialize["groupId"] = o.GroupId
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["links"] = o.Links
	}
	if o.OrgId != nil {
		toSerialize["orgId"] = o.OrgId
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Raw != nil {
		toSerialize["raw"] = o.Raw
	}
	return json.Marshal(toSerialize)
}

type NullableBiConnectorEventView struct {
	value *BiConnectorEventView
	isSet bool
}

func (v NullableBiConnectorEventView) Get() *BiConnectorEventView {
	return v.value
}

func (v *NullableBiConnectorEventView) Set(val *BiConnectorEventView) {
	v.value = val
	v.isSet = true
}

func (v NullableBiConnectorEventView) IsSet() bool {
	return v.isSet
}

func (v *NullableBiConnectorEventView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBiConnectorEventView(val *BiConnectorEventView) *NullableBiConnectorEventView {
	return &NullableBiConnectorEventView{value: val, isSet: true}
}

func (v NullableBiConnectorEventView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBiConnectorEventView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


