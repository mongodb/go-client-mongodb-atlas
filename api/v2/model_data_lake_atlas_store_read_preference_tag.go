/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// DataLakeAtlasStoreReadPreferenceTag List that contains [tag sets](https://docs.mongodb.com/manual/core/read-preference-tags/) or tag specification documents. If specified, Atlas Data Lake routes read requests to replica set member or members that are associated with the specified tags.
type DataLakeAtlasStoreReadPreferenceTag struct {
	// Human-readable label of the tag.
	Name *string `json:"name,omitempty"`
	// Value of the tag.
	Value *string `json:"value,omitempty"`
}

// NewDataLakeAtlasStoreReadPreferenceTag instantiates a new DataLakeAtlasStoreReadPreferenceTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLakeAtlasStoreReadPreferenceTag() *DataLakeAtlasStoreReadPreferenceTag {
	this := DataLakeAtlasStoreReadPreferenceTag{}
	return &this
}

// NewDataLakeAtlasStoreReadPreferenceTagWithDefaults instantiates a new DataLakeAtlasStoreReadPreferenceTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLakeAtlasStoreReadPreferenceTagWithDefaults() *DataLakeAtlasStoreReadPreferenceTag {
	this := DataLakeAtlasStoreReadPreferenceTag{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataLakeAtlasStoreReadPreferenceTag) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStoreReadPreferenceTag) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataLakeAtlasStoreReadPreferenceTag) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataLakeAtlasStoreReadPreferenceTag) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DataLakeAtlasStoreReadPreferenceTag) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStoreReadPreferenceTag) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DataLakeAtlasStoreReadPreferenceTag) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DataLakeAtlasStoreReadPreferenceTag) SetValue(v string) {
	o.Value = &v
}

func (o DataLakeAtlasStoreReadPreferenceTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableDataLakeAtlasStoreReadPreferenceTag struct {
	value *DataLakeAtlasStoreReadPreferenceTag
	isSet bool
}

func (v NullableDataLakeAtlasStoreReadPreferenceTag) Get() *DataLakeAtlasStoreReadPreferenceTag {
	return v.value
}

func (v *NullableDataLakeAtlasStoreReadPreferenceTag) Set(val *DataLakeAtlasStoreReadPreferenceTag) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLakeAtlasStoreReadPreferenceTag) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLakeAtlasStoreReadPreferenceTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLakeAtlasStoreReadPreferenceTag(val *DataLakeAtlasStoreReadPreferenceTag) *NullableDataLakeAtlasStoreReadPreferenceTag {
	return &NullableDataLakeAtlasStoreReadPreferenceTag{value: val, isSet: true}
}

func (v NullableDataLakeAtlasStoreReadPreferenceTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLakeAtlasStoreReadPreferenceTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


