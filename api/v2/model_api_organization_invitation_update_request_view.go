/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// ApiOrganizationInvitationUpdateRequestView struct for ApiOrganizationInvitationUpdateRequestView
type ApiOrganizationInvitationUpdateRequestView struct {
	// One or more organization or project level roles to assign to the MongoDB Cloud user.
	Roles []string `json:"roles,omitempty"`
	// List of teams to which you want to invite the desired MongoDB Cloud user.
	TeamIds []string `json:"teamIds,omitempty"`
}

// NewApiOrganizationInvitationUpdateRequestView instantiates a new ApiOrganizationInvitationUpdateRequestView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiOrganizationInvitationUpdateRequestView() *ApiOrganizationInvitationUpdateRequestView {
	this := ApiOrganizationInvitationUpdateRequestView{}
	return &this
}

// NewApiOrganizationInvitationUpdateRequestViewWithDefaults instantiates a new ApiOrganizationInvitationUpdateRequestView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiOrganizationInvitationUpdateRequestViewWithDefaults() *ApiOrganizationInvitationUpdateRequestView {
	this := ApiOrganizationInvitationUpdateRequestView{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *ApiOrganizationInvitationUpdateRequestView) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOrganizationInvitationUpdateRequestView) GetRolesOk() ([]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *ApiOrganizationInvitationUpdateRequestView) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *ApiOrganizationInvitationUpdateRequestView) SetRoles(v []string) {
	o.Roles = v
}

// GetTeamIds returns the TeamIds field value if set, zero value otherwise.
func (o *ApiOrganizationInvitationUpdateRequestView) GetTeamIds() []string {
	if o == nil || o.TeamIds == nil {
		var ret []string
		return ret
	}
	return o.TeamIds
}

// GetTeamIdsOk returns a tuple with the TeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOrganizationInvitationUpdateRequestView) GetTeamIdsOk() ([]string, bool) {
	if o == nil || o.TeamIds == nil {
		return nil, false
	}
	return o.TeamIds, true
}

// HasTeamIds returns a boolean if a field has been set.
func (o *ApiOrganizationInvitationUpdateRequestView) HasTeamIds() bool {
	if o != nil && o.TeamIds != nil {
		return true
	}

	return false
}

// SetTeamIds gets a reference to the given []string and assigns it to the TeamIds field.
func (o *ApiOrganizationInvitationUpdateRequestView) SetTeamIds(v []string) {
	o.TeamIds = v
}

func (o ApiOrganizationInvitationUpdateRequestView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.TeamIds != nil {
		toSerialize["teamIds"] = o.TeamIds
	}
	return json.Marshal(toSerialize)
}

type NullableApiOrganizationInvitationUpdateRequestView struct {
	value *ApiOrganizationInvitationUpdateRequestView
	isSet bool
}

func (v NullableApiOrganizationInvitationUpdateRequestView) Get() *ApiOrganizationInvitationUpdateRequestView {
	return v.value
}

func (v *NullableApiOrganizationInvitationUpdateRequestView) Set(val *ApiOrganizationInvitationUpdateRequestView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiOrganizationInvitationUpdateRequestView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiOrganizationInvitationUpdateRequestView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiOrganizationInvitationUpdateRequestView(val *ApiOrganizationInvitationUpdateRequestView) *NullableApiOrganizationInvitationUpdateRequestView {
	return &NullableApiOrganizationInvitationUpdateRequestView{value: val, isSet: true}
}

func (v NullableApiOrganizationInvitationUpdateRequestView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiOrganizationInvitationUpdateRequestView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


