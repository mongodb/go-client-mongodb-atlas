/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"time"
)

// X509CertificateView struct for X509CertificateView
type X509CertificateView struct {
	// Latest date that the certificate is valid.
	NotAfter *time.Time `json:"notAfter,omitempty"`
	// Earliest date that the certificate is valid.
	NotBefore *time.Time `json:"notBefore,omitempty"`
}

// NewX509CertificateView instantiates a new X509CertificateView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewX509CertificateView() *X509CertificateView {
	this := X509CertificateView{}
	return &this
}

// NewX509CertificateViewWithDefaults instantiates a new X509CertificateView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewX509CertificateViewWithDefaults() *X509CertificateView {
	this := X509CertificateView{}
	return &this
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *X509CertificateView) GetNotAfter() time.Time {
	if o == nil || o.NotAfter == nil {
		var ret time.Time
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *X509CertificateView) GetNotAfterOk() (*time.Time, bool) {
	if o == nil || o.NotAfter == nil {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *X509CertificateView) HasNotAfter() bool {
	if o != nil && o.NotAfter != nil {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given time.Time and assigns it to the NotAfter field.
func (o *X509CertificateView) SetNotAfter(v time.Time) {
	o.NotAfter = &v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *X509CertificateView) GetNotBefore() time.Time {
	if o == nil || o.NotBefore == nil {
		var ret time.Time
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *X509CertificateView) GetNotBeforeOk() (*time.Time, bool) {
	if o == nil || o.NotBefore == nil {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *X509CertificateView) HasNotBefore() bool {
	if o != nil && o.NotBefore != nil {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given time.Time and assigns it to the NotBefore field.
func (o *X509CertificateView) SetNotBefore(v time.Time) {
	o.NotBefore = &v
}

func (o X509CertificateView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NotAfter != nil {
		toSerialize["notAfter"] = o.NotAfter
	}
	if o.NotBefore != nil {
		toSerialize["notBefore"] = o.NotBefore
	}
	return json.Marshal(toSerialize)
}

type NullableX509CertificateView struct {
	value *X509CertificateView
	isSet bool
}

func (v NullableX509CertificateView) Get() *X509CertificateView {
	return v.value
}

func (v *NullableX509CertificateView) Set(val *X509CertificateView) {
	v.value = val
	v.isSet = true
}

func (v NullableX509CertificateView) IsSet() bool {
	return v.isSet
}

func (v *NullableX509CertificateView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableX509CertificateView(val *X509CertificateView) *NullableX509CertificateView {
	return &NullableX509CertificateView{value: val, isSet: true}
}

func (v NullableX509CertificateView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableX509CertificateView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


