/*
API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
	"fmt"
)

// AppServiceMetricThreshold - Threshold for the metric that, when exceeded, triggers an alert. The metric threshold pertains to event types which reflects changes of measurements and metrics in the app services.
type AppServiceMetricThreshold struct {
	DataMetricThreshold *DataMetricThreshold
	RawMetricThreshold *RawMetricThreshold
	TimeMetricThreshold *TimeMetricThreshold
}

// DataMetricThresholdAsAppServiceMetricThreshold is a convenience function that returns DataMetricThreshold wrapped in AppServiceMetricThreshold
func DataMetricThresholdAsAppServiceMetricThreshold(v *DataMetricThreshold) AppServiceMetricThreshold {
	return AppServiceMetricThreshold{
		DataMetricThreshold: v,
	}
}

// RawMetricThresholdAsAppServiceMetricThreshold is a convenience function that returns RawMetricThreshold wrapped in AppServiceMetricThreshold
func RawMetricThresholdAsAppServiceMetricThreshold(v *RawMetricThreshold) AppServiceMetricThreshold {
	return AppServiceMetricThreshold{
		RawMetricThreshold: v,
	}
}

// TimeMetricThresholdAsAppServiceMetricThreshold is a convenience function that returns TimeMetricThreshold wrapped in AppServiceMetricThreshold
func TimeMetricThresholdAsAppServiceMetricThreshold(v *TimeMetricThreshold) AppServiceMetricThreshold {
	return AppServiceMetricThreshold{
		TimeMetricThreshold: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AppServiceMetricThreshold) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'DataMetricThreshold'
	if jsonDict["metricName"] == "DataMetricThreshold" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_AUTH_LOGIN_FAIL'
	if jsonDict["metricName"] == "REALM_AUTH_LOGIN_FAIL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_ENDPOINTS_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_ENDPOINTS_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_ENDPOINTS_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_ENDPOINTS_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_ENDPOINTS_FAILED_REQUESTS'
	if jsonDict["metricName"] == "REALM_ENDPOINTS_FAILED_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_ENDPOINTS_RESPONSE_MS'
	if jsonDict["metricName"] == "REALM_ENDPOINTS_RESPONSE_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_GQL_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_GQL_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_GQL_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_GQL_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_GQL_FAILED_REQUESTS'
	if jsonDict["metricName"] == "REALM_GQL_FAILED_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_GQL_RESPONSE_MS'
	if jsonDict["metricName"] == "REALM_GQL_RESPONSE_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_OVERALL_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_OVERALL_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_OVERALL_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_OVERALL_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_OVERALL_FAILED_REQUESTS'
	if jsonDict["metricName"] == "REALM_OVERALL_FAILED_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDKFNS_FAILED_REQUESTS'
	if jsonDict["metricName"] == "REALM_SDKFNS_FAILED_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_FNS_RESPONSE_MS'
	if jsonDict["metricName"] == "REALM_SDK_FNS_RESPONSE_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_FUNCTIONS_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_SDK_FUNCTIONS_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_FUNCTIONS_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_SDK_FUNCTIONS_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_MQL_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_SDK_MQL_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_MQL_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_SDK_MQL_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SDK_MQL_RESPONSE_MS'
	if jsonDict["metricName"] == "REALM_SDK_MQL_RESPONSE_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_CLIENT_BOOTSTRAP_MS'
	if jsonDict["metricName"] == "REALM_SYNC_CLIENT_BOOTSTRAP_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_CLIENT_CHANGESETS_INVALID'
	if jsonDict["metricName"] == "REALM_SYNC_CLIENT_CHANGESETS_INVALID" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_CLIENT_UPLOADS_FAILED'
	if jsonDict["metricName"] == "REALM_SYNC_CLIENT_UPLOADS_FAILED" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_CLIENT_UPLOADS_INVALID'
	if jsonDict["metricName"] == "REALM_SYNC_CLIENT_UPLOADS_INVALID" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_CURRENT_OPLOG_LAG_MS_SUM'
	if jsonDict["metricName"] == "REALM_SYNC_CURRENT_OPLOG_LAG_MS_SUM" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_SYNC_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_FAILED_REQUESTS'
	if jsonDict["metricName"] == "REALM_SYNC_FAILED_REQUESTS" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_NUM_UNSYNCABLE_DOCS_PERCENT'
	if jsonDict["metricName"] == "REALM_SYNC_NUM_UNSYNCABLE_DOCS_PERCENT" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_SYNC_SESSIONS_ENDED'
	if jsonDict["metricName"] == "REALM_SYNC_SESSIONS_ENDED" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_TRIGGERS_COMPUTE_MS'
	if jsonDict["metricName"] == "REALM_TRIGGERS_COMPUTE_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_TRIGGERS_CURRENT_OPLOG_LAG_MS_SUM'
	if jsonDict["metricName"] == "REALM_TRIGGERS_CURRENT_OPLOG_LAG_MS_SUM" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_TRIGGERS_EGRESS_BYTES'
	if jsonDict["metricName"] == "REALM_TRIGGERS_EGRESS_BYTES" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_TRIGGERS_FAILED_REQUESTS'
	if jsonDict["metricName"] == "REALM_TRIGGERS_FAILED_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'REALM_TRIGGERS_RESPONSE_MS'
	if jsonDict["metricName"] == "REALM_TRIGGERS_RESPONSE_MS" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RawMetricThreshold'
	if jsonDict["metricName"] == "RawMetricThreshold" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TimeMetricThreshold'
	if jsonDict["metricName"] == "TimeMetricThreshold" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal AppServiceMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AppServiceMetricThreshold) MarshalJSON() ([]byte, error) {
	if src.DataMetricThreshold != nil {
		return json.Marshal(&src.DataMetricThreshold)
	}

	if src.RawMetricThreshold != nil {
		return json.Marshal(&src.RawMetricThreshold)
	}

	if src.TimeMetricThreshold != nil {
		return json.Marshal(&src.TimeMetricThreshold)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AppServiceMetricThreshold) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataMetricThreshold != nil {
		return obj.DataMetricThreshold
	}

	if obj.RawMetricThreshold != nil {
		return obj.RawMetricThreshold
	}

	if obj.TimeMetricThreshold != nil {
		return obj.TimeMetricThreshold
	}

	// all schemas are nil
	return nil
}

type NullableAppServiceMetricThreshold struct {
	value *AppServiceMetricThreshold
	isSet bool
}

func (v NullableAppServiceMetricThreshold) Get() *AppServiceMetricThreshold {
	return v.value
}

func (v *NullableAppServiceMetricThreshold) Set(val *AppServiceMetricThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableAppServiceMetricThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableAppServiceMetricThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppServiceMetricThreshold(val *AppServiceMetricThreshold) *NullableAppServiceMetricThreshold {
	return &NullableAppServiceMetricThreshold{value: val, isSet: true}
}

func (v NullableAppServiceMetricThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppServiceMetricThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


