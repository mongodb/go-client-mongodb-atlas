/*
API version: 2.0~61723fd7f1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
	"fmt"
)

// ContainerPeer - struct for ContainerPeer
type ContainerPeer struct {
	AWSPeerVpc *AWSPeerVpc
	AzurePeerNetwork *AzurePeerNetwork
	GCPPeerVpc *GCPPeerVpc
}

// AWSPeerVpcAsContainerPeer is a convenience function that returns AWSPeerVpc wrapped in ContainerPeer
func AWSPeerVpcAsContainerPeer(v *AWSPeerVpc) ContainerPeer {
	return ContainerPeer{
		AWSPeerVpc: v,
	}
}

// AzurePeerNetworkAsContainerPeer is a convenience function that returns AzurePeerNetwork wrapped in ContainerPeer
func AzurePeerNetworkAsContainerPeer(v *AzurePeerNetwork) ContainerPeer {
	return ContainerPeer{
		AzurePeerNetwork: v,
	}
}

// GCPPeerVpcAsContainerPeer is a convenience function that returns GCPPeerVpc wrapped in ContainerPeer
func GCPPeerVpcAsContainerPeer(v *GCPPeerVpc) ContainerPeer {
	return ContainerPeer{
		GCPPeerVpc: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContainerPeer) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'AWS'
	if jsonDict["providerName"] == "AWS" {
		// try to unmarshal JSON data into AWSPeerVpc
		err = json.Unmarshal(data, &dst.AWSPeerVpc)
		if err == nil {
			return nil // data stored in dst.AWSPeerVpc, return on the first match
		} else {
			dst.AWSPeerVpc = nil
			return fmt.Errorf("failed to unmarshal ContainerPeer as AWSPeerVpc: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AWSPeerVpc'
	if jsonDict["providerName"] == "AWSPeerVpc" {
		// try to unmarshal JSON data into AWSPeerVpc
		err = json.Unmarshal(data, &dst.AWSPeerVpc)
		if err == nil {
			return nil // data stored in dst.AWSPeerVpc, return on the first match
		} else {
			dst.AWSPeerVpc = nil
			return fmt.Errorf("failed to unmarshal ContainerPeer as AWSPeerVpc: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AZURE'
	if jsonDict["providerName"] == "AZURE" {
		// try to unmarshal JSON data into AzurePeerNetwork
		err = json.Unmarshal(data, &dst.AzurePeerNetwork)
		if err == nil {
			return nil // data stored in dst.AzurePeerNetwork, return on the first match
		} else {
			dst.AzurePeerNetwork = nil
			return fmt.Errorf("failed to unmarshal ContainerPeer as AzurePeerNetwork: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzurePeerNetwork'
	if jsonDict["providerName"] == "AzurePeerNetwork" {
		// try to unmarshal JSON data into AzurePeerNetwork
		err = json.Unmarshal(data, &dst.AzurePeerNetwork)
		if err == nil {
			return nil // data stored in dst.AzurePeerNetwork, return on the first match
		} else {
			dst.AzurePeerNetwork = nil
			return fmt.Errorf("failed to unmarshal ContainerPeer as AzurePeerNetwork: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCP'
	if jsonDict["providerName"] == "GCP" {
		// try to unmarshal JSON data into GCPPeerVpc
		err = json.Unmarshal(data, &dst.GCPPeerVpc)
		if err == nil {
			return nil // data stored in dst.GCPPeerVpc, return on the first match
		} else {
			dst.GCPPeerVpc = nil
			return fmt.Errorf("failed to unmarshal ContainerPeer as GCPPeerVpc: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCPPeerVpc'
	if jsonDict["providerName"] == "GCPPeerVpc" {
		// try to unmarshal JSON data into GCPPeerVpc
		err = json.Unmarshal(data, &dst.GCPPeerVpc)
		if err == nil {
			return nil // data stored in dst.GCPPeerVpc, return on the first match
		} else {
			dst.GCPPeerVpc = nil
			return fmt.Errorf("failed to unmarshal ContainerPeer as GCPPeerVpc: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContainerPeer) MarshalJSON() ([]byte, error) {
	if src.AWSPeerVpc != nil {
		return json.Marshal(&src.AWSPeerVpc)
	}

	if src.AzurePeerNetwork != nil {
		return json.Marshal(&src.AzurePeerNetwork)
	}

	if src.GCPPeerVpc != nil {
		return json.Marshal(&src.GCPPeerVpc)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContainerPeer) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AWSPeerVpc != nil {
		return obj.AWSPeerVpc
	}

	if obj.AzurePeerNetwork != nil {
		return obj.AzurePeerNetwork
	}

	if obj.GCPPeerVpc != nil {
		return obj.GCPPeerVpc
	}

	// all schemas are nil
	return nil
}

type NullableContainerPeer struct {
	value *ContainerPeer
	isSet bool
}

func (v NullableContainerPeer) Get() *ContainerPeer {
	return v.value
}

func (v *NullableContainerPeer) Set(val *ContainerPeer) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerPeer) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerPeer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerPeer(val *ContainerPeer) *NullableContainerPeer {
	return &NullableContainerPeer{value: val, isSet: true}
}

func (v NullableContainerPeer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerPeer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


