/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
	"time"
)

// checks if the Invoice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invoice{}

// Invoice struct for Invoice
type Invoice struct {
	// Sum of services that the specified organization consumed in the period covered in this invoice. This parameter expresses its value in cents (100ths of one US Dollar) and calculates its value as **subtotalCents** + **salesTaxCents** - **startingBalanceCents**.
	AmountBilledCents *int64 `json:"amountBilledCents,omitempty"`
	// Sum that the specified organization paid toward this invoice. This parameter expresses its value in cents (100ths of one US Dollar).
	AmountPaidCents *int64 `json:"amountPaidCents,omitempty"`
	// Date and time when MongoDB Cloud created this invoice. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	Created *time.Time `json:"created,omitempty"`
	// Sum that MongoDB credited the specified organization toward this invoice. This parameter expresses its value in cents (100ths of one US Dollar).
	CreditsCents *int64 `json:"creditsCents,omitempty"`
	// Date and time when MongoDB Cloud finished the billing period that this invoice covers. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	EndDate *time.Time `json:"endDate,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the project associated to this invoice. This identifying string doesn't appear on all invoices.
	GroupId *string `json:"groupId,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the invoice submitted to the specified organization. Charges typically post the next day.
	Id *string `json:"id,omitempty"`
	// List that contains individual services included in this invoice.
	LineItems []LineItem `json:"lineItems,omitempty"`
	// List that contains the invoices for organizations linked to the paying organization.
	LinkedInvoices []Invoice `json:"linkedInvoices,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the organization charged for services consumed from MongoDB Cloud.
	OrgId *string `json:"orgId,omitempty"`
	// List that contains funds transferred to MongoDB to cover the specified service noted in this invoice.
	Payments []Payment `json:"payments,omitempty"`
	// List that contains payments that MongoDB returned to the organization for this invoice.
	Refunds []Refund `json:"refunds,omitempty"`
	// Sum of sales tax applied to this invoice. This parameter expresses its value in cents (100ths of one US Dollar).
	SalesTaxCents *int64 `json:"salesTaxCents,omitempty"`
	// Date and time when MongoDB Cloud began the billing period that this invoice covers. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	StartDate *time.Time `json:"startDate,omitempty"`
	// Sum that the specified organization owed to MongoDB when MongoDB issued this invoice. This parameter expresses its value in US Dollars.
	StartingBalanceCents *int64 `json:"startingBalanceCents,omitempty"`
	// Phase of payment processing in which this invoice exists when you made this request. Accepted phases include:  | Phase Value | Reason | |---|---| | CLOSED | MongoDB finalized all charges in the billing cycle but has yet to charge the customer. | | FAILED | MongoDB attempted to charge the provided credit card but charge for that amount failed. | | FORGIVEN | Customer initiated payment which MongoDB later forgave. | | FREE | All charges totalled zero so the customer won't be charged. | | INVOICED | MongoDB handled these charges using elastic invoicing. | | PAID | MongoDB succeeded in charging the provided credit card. | | PENDING | Invoice includes charges for the current billing cycle. | | PREPAID | Customer has a pre-paid plan so they won't be charged. | 
	StatusName *string `json:"statusName,omitempty"`
	// Sum of all positive invoice line items contained in this invoice. This parameter expresses its value in cents (100ths of one US Dollar).
	SubtotalCents *int64 `json:"subtotalCents,omitempty"`
	// Date and time when MongoDB Cloud last updated the value of this payment. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	Updated *time.Time `json:"updated,omitempty"`
}

// NewInvoice instantiates a new Invoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoice() *Invoice {
	this := Invoice{}
	return &this
}

// NewInvoiceWithDefaults instantiates a new Invoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceWithDefaults() *Invoice {
	this := Invoice{}
	return &this
}

// GetAmountBilledCents returns the AmountBilledCents field value if set, zero value otherwise.
func (o *Invoice) GetAmountBilledCents() int64 {
	if o == nil || IsNil(o.AmountBilledCents) {
		var ret int64
		return ret
	}
	return *o.AmountBilledCents
}

// GetAmountBilledCentsOk returns a tuple with the AmountBilledCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAmountBilledCentsOk() (*int64, bool) {
	if o == nil || IsNil(o.AmountBilledCents) {
		return nil, false
	}
	return o.AmountBilledCents, true
}

// HasAmountBilledCents returns a boolean if a field has been set.
func (o *Invoice) HasAmountBilledCents() bool {
	if o != nil && !IsNil(o.AmountBilledCents) {
		return true
	}

	return false
}

// SetAmountBilledCents gets a reference to the given int64 and assigns it to the AmountBilledCents field.
func (o *Invoice) SetAmountBilledCents(v int64) {
	o.AmountBilledCents = &v
}

// GetAmountPaidCents returns the AmountPaidCents field value if set, zero value otherwise.
func (o *Invoice) GetAmountPaidCents() int64 {
	if o == nil || IsNil(o.AmountPaidCents) {
		var ret int64
		return ret
	}
	return *o.AmountPaidCents
}

// GetAmountPaidCentsOk returns a tuple with the AmountPaidCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetAmountPaidCentsOk() (*int64, bool) {
	if o == nil || IsNil(o.AmountPaidCents) {
		return nil, false
	}
	return o.AmountPaidCents, true
}

// HasAmountPaidCents returns a boolean if a field has been set.
func (o *Invoice) HasAmountPaidCents() bool {
	if o != nil && !IsNil(o.AmountPaidCents) {
		return true
	}

	return false
}

// SetAmountPaidCents gets a reference to the given int64 and assigns it to the AmountPaidCents field.
func (o *Invoice) SetAmountPaidCents(v int64) {
	o.AmountPaidCents = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Invoice) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Invoice) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Invoice) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreditsCents returns the CreditsCents field value if set, zero value otherwise.
func (o *Invoice) GetCreditsCents() int64 {
	if o == nil || IsNil(o.CreditsCents) {
		var ret int64
		return ret
	}
	return *o.CreditsCents
}

// GetCreditsCentsOk returns a tuple with the CreditsCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetCreditsCentsOk() (*int64, bool) {
	if o == nil || IsNil(o.CreditsCents) {
		return nil, false
	}
	return o.CreditsCents, true
}

// HasCreditsCents returns a boolean if a field has been set.
func (o *Invoice) HasCreditsCents() bool {
	if o != nil && !IsNil(o.CreditsCents) {
		return true
	}

	return false
}

// SetCreditsCents gets a reference to the given int64 and assigns it to the CreditsCents field.
func (o *Invoice) SetCreditsCents(v int64) {
	o.CreditsCents = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Invoice) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Invoice) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *Invoice) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *Invoice) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *Invoice) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *Invoice) SetGroupId(v string) {
	o.GroupId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Invoice) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Invoice) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Invoice) SetId(v string) {
	o.Id = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *Invoice) GetLineItems() []LineItem {
	if o == nil || IsNil(o.LineItems) {
		var ret []LineItem
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetLineItemsOk() ([]LineItem, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *Invoice) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []LineItem and assigns it to the LineItems field.
func (o *Invoice) SetLineItems(v []LineItem) {
	o.LineItems = v
}

// GetLinkedInvoices returns the LinkedInvoices field value if set, zero value otherwise.
func (o *Invoice) GetLinkedInvoices() []Invoice {
	if o == nil || IsNil(o.LinkedInvoices) {
		var ret []Invoice
		return ret
	}
	return o.LinkedInvoices
}

// GetLinkedInvoicesOk returns a tuple with the LinkedInvoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetLinkedInvoicesOk() ([]Invoice, bool) {
	if o == nil || IsNil(o.LinkedInvoices) {
		return nil, false
	}
	return o.LinkedInvoices, true
}

// HasLinkedInvoices returns a boolean if a field has been set.
func (o *Invoice) HasLinkedInvoices() bool {
	if o != nil && !IsNil(o.LinkedInvoices) {
		return true
	}

	return false
}

// SetLinkedInvoices gets a reference to the given []Invoice and assigns it to the LinkedInvoices field.
func (o *Invoice) SetLinkedInvoices(v []Invoice) {
	o.LinkedInvoices = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Invoice) GetLinks() []Link {
	if o == nil || IsNil(o.Links) {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetLinksOk() ([]Link, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Invoice) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *Invoice) SetLinks(v []Link) {
	o.Links = v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *Invoice) GetOrgId() string {
	if o == nil || IsNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetOrgIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *Invoice) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *Invoice) SetOrgId(v string) {
	o.OrgId = &v
}

// GetPayments returns the Payments field value if set, zero value otherwise.
func (o *Invoice) GetPayments() []Payment {
	if o == nil || IsNil(o.Payments) {
		var ret []Payment
		return ret
	}
	return o.Payments
}

// GetPaymentsOk returns a tuple with the Payments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetPaymentsOk() ([]Payment, bool) {
	if o == nil || IsNil(o.Payments) {
		return nil, false
	}
	return o.Payments, true
}

// HasPayments returns a boolean if a field has been set.
func (o *Invoice) HasPayments() bool {
	if o != nil && !IsNil(o.Payments) {
		return true
	}

	return false
}

// SetPayments gets a reference to the given []Payment and assigns it to the Payments field.
func (o *Invoice) SetPayments(v []Payment) {
	o.Payments = v
}

// GetRefunds returns the Refunds field value if set, zero value otherwise.
func (o *Invoice) GetRefunds() []Refund {
	if o == nil || IsNil(o.Refunds) {
		var ret []Refund
		return ret
	}
	return o.Refunds
}

// GetRefundsOk returns a tuple with the Refunds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetRefundsOk() ([]Refund, bool) {
	if o == nil || IsNil(o.Refunds) {
		return nil, false
	}
	return o.Refunds, true
}

// HasRefunds returns a boolean if a field has been set.
func (o *Invoice) HasRefunds() bool {
	if o != nil && !IsNil(o.Refunds) {
		return true
	}

	return false
}

// SetRefunds gets a reference to the given []Refund and assigns it to the Refunds field.
func (o *Invoice) SetRefunds(v []Refund) {
	o.Refunds = v
}

// GetSalesTaxCents returns the SalesTaxCents field value if set, zero value otherwise.
func (o *Invoice) GetSalesTaxCents() int64 {
	if o == nil || IsNil(o.SalesTaxCents) {
		var ret int64
		return ret
	}
	return *o.SalesTaxCents
}

// GetSalesTaxCentsOk returns a tuple with the SalesTaxCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetSalesTaxCentsOk() (*int64, bool) {
	if o == nil || IsNil(o.SalesTaxCents) {
		return nil, false
	}
	return o.SalesTaxCents, true
}

// HasSalesTaxCents returns a boolean if a field has been set.
func (o *Invoice) HasSalesTaxCents() bool {
	if o != nil && !IsNil(o.SalesTaxCents) {
		return true
	}

	return false
}

// SetSalesTaxCents gets a reference to the given int64 and assigns it to the SalesTaxCents field.
func (o *Invoice) SetSalesTaxCents(v int64) {
	o.SalesTaxCents = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Invoice) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Invoice) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Invoice) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetStartingBalanceCents returns the StartingBalanceCents field value if set, zero value otherwise.
func (o *Invoice) GetStartingBalanceCents() int64 {
	if o == nil || IsNil(o.StartingBalanceCents) {
		var ret int64
		return ret
	}
	return *o.StartingBalanceCents
}

// GetStartingBalanceCentsOk returns a tuple with the StartingBalanceCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetStartingBalanceCentsOk() (*int64, bool) {
	if o == nil || IsNil(o.StartingBalanceCents) {
		return nil, false
	}
	return o.StartingBalanceCents, true
}

// HasStartingBalanceCents returns a boolean if a field has been set.
func (o *Invoice) HasStartingBalanceCents() bool {
	if o != nil && !IsNil(o.StartingBalanceCents) {
		return true
	}

	return false
}

// SetStartingBalanceCents gets a reference to the given int64 and assigns it to the StartingBalanceCents field.
func (o *Invoice) SetStartingBalanceCents(v int64) {
	o.StartingBalanceCents = &v
}

// GetStatusName returns the StatusName field value if set, zero value otherwise.
func (o *Invoice) GetStatusName() string {
	if o == nil || IsNil(o.StatusName) {
		var ret string
		return ret
	}
	return *o.StatusName
}

// GetStatusNameOk returns a tuple with the StatusName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetStatusNameOk() (*string, bool) {
	if o == nil || IsNil(o.StatusName) {
		return nil, false
	}
	return o.StatusName, true
}

// HasStatusName returns a boolean if a field has been set.
func (o *Invoice) HasStatusName() bool {
	if o != nil && !IsNil(o.StatusName) {
		return true
	}

	return false
}

// SetStatusName gets a reference to the given string and assigns it to the StatusName field.
func (o *Invoice) SetStatusName(v string) {
	o.StatusName = &v
}

// GetSubtotalCents returns the SubtotalCents field value if set, zero value otherwise.
func (o *Invoice) GetSubtotalCents() int64 {
	if o == nil || IsNil(o.SubtotalCents) {
		var ret int64
		return ret
	}
	return *o.SubtotalCents
}

// GetSubtotalCentsOk returns a tuple with the SubtotalCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetSubtotalCentsOk() (*int64, bool) {
	if o == nil || IsNil(o.SubtotalCents) {
		return nil, false
	}
	return o.SubtotalCents, true
}

// HasSubtotalCents returns a boolean if a field has been set.
func (o *Invoice) HasSubtotalCents() bool {
	if o != nil && !IsNil(o.SubtotalCents) {
		return true
	}

	return false
}

// SetSubtotalCents gets a reference to the given int64 and assigns it to the SubtotalCents field.
func (o *Invoice) SetSubtotalCents(v int64) {
	o.SubtotalCents = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Invoice) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invoice) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Invoice) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *Invoice) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o Invoice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invoice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: amountBilledCents is readOnly
	// skip: amountPaidCents is readOnly
	// skip: created is readOnly
	// skip: creditsCents is readOnly
	// skip: endDate is readOnly
	// skip: groupId is readOnly
	// skip: id is readOnly
	// skip: lineItems is readOnly
	// skip: linkedInvoices is readOnly
	// skip: links is readOnly
	// skip: orgId is readOnly
	// skip: payments is readOnly
	// skip: refunds is readOnly
	// skip: salesTaxCents is readOnly
	// skip: startDate is readOnly
	// skip: startingBalanceCents is readOnly
	if !IsNil(o.StatusName) {
		toSerialize["statusName"] = o.StatusName
	}
	// skip: subtotalCents is readOnly
	// skip: updated is readOnly
	return toSerialize, nil
}

type NullableInvoice struct {
	value *Invoice
	isSet bool
}

func (v NullableInvoice) Get() *Invoice {
	return v.value
}

func (v *NullableInvoice) Set(val *Invoice) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoice) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoice(val *Invoice) *NullableInvoice {
	return &NullableInvoice{value: val, isSet: true}
}

func (v NullableInvoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


