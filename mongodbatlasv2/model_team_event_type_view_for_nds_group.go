/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package latest

import (
	"encoding/json"
	"fmt"
)

// TeamEventTypeViewForNdsGroup Unique identifier of event type.
type TeamEventTypeViewForNdsGroup string

// List of TeamEventTypeViewForNdsGroup
const (
	TEAMEVENTTYPEVIEWFORNDSGROUP_ADDED_TO_GROUP TeamEventTypeViewForNdsGroup = "TEAM_ADDED_TO_GROUP"
	TEAMEVENTTYPEVIEWFORNDSGROUP_REMOVED_FROM_GROUP TeamEventTypeViewForNdsGroup = "TEAM_REMOVED_FROM_GROUP"
	TEAMEVENTTYPEVIEWFORNDSGROUP_ROLES_MODIFIED TeamEventTypeViewForNdsGroup = "TEAM_ROLES_MODIFIED"
)

// All allowed values of TeamEventTypeViewForNdsGroup enum
var AllowedTeamEventTypeViewForNdsGroupEnumValues = []TeamEventTypeViewForNdsGroup{
	"TEAM_ADDED_TO_GROUP",
	"TEAM_REMOVED_FROM_GROUP",
	"TEAM_ROLES_MODIFIED",
}

func (v *TeamEventTypeViewForNdsGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TeamEventTypeViewForNdsGroup(value)
	for _, existing := range AllowedTeamEventTypeViewForNdsGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TeamEventTypeViewForNdsGroup", value)
}

// NewTeamEventTypeViewForNdsGroupFromValue returns a pointer to a valid TeamEventTypeViewForNdsGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTeamEventTypeViewForNdsGroupFromValue(v string) (*TeamEventTypeViewForNdsGroup, error) {
	ev := TeamEventTypeViewForNdsGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TeamEventTypeViewForNdsGroup: valid values are %v", v, AllowedTeamEventTypeViewForNdsGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TeamEventTypeViewForNdsGroup) IsValid() bool {
	for _, existing := range AllowedTeamEventTypeViewForNdsGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TeamEventTypeViewForNdsGroup value
func (v TeamEventTypeViewForNdsGroup) Ptr() *TeamEventTypeViewForNdsGroup {
	return &v
}


