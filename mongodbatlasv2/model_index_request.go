/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas.   The Atlas Administration API authenticates using HTTP Digest Authentication. Provide a programmatic API public key and corresponding private key as the username and password when constructing the HTTP request. For example, with [curl](https://en.wikipedia.org/wiki/CURL): `curl --user \"{PUBLIC-KEY}:{PRIVATE-KEY}\" --digest`   To learn more, see [Get Started with the Atlas Administration API](https://www.mongodb.com/docs/atlas/configure-api-access/). For support, see [MongoDB Support](https://www.mongodb.com/support/get-started)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
)

// checks if the IndexRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexRequest{}

// IndexRequest struct for IndexRequest
type IndexRequest struct {
	Collation *Collation `json:"collation,omitempty"`
	// Human-readable label of the collection for which MongoDB Cloud creates an index.
	Collection string `json:"collection"`
	// Human-readable label of the database that holds the collection on which MongoDB Cloud creates an index.
	Db string `json:"db"`
	// List that contains one or more objects that describe the parameters that you want to index.
	Keys []map[string]string `json:"keys,omitempty"`
	Options *IndexOptions `json:"options,omitempty"`
}

// NewIndexRequest instantiates a new IndexRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexRequest(collection string, db string) *IndexRequest {
	this := IndexRequest{}
	this.Collection = collection
	this.Db = db
	return &this
}

// NewIndexRequestWithDefaults instantiates a new IndexRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexRequestWithDefaults() *IndexRequest {
	this := IndexRequest{}
	return &this
}

// GetCollation returns the Collation field value if set, zero value otherwise.
func (o *IndexRequest) GetCollation() Collation {
	if o == nil || IsNil(o.Collation) {
		var ret Collation
		return ret
	}
	return *o.Collation
}

// GetCollationOk returns a tuple with the Collation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexRequest) GetCollationOk() (*Collation, bool) {
	if o == nil || IsNil(o.Collation) {
		return nil, false
	}
	return o.Collation, true
}

// HasCollation returns a boolean if a field has been set.
func (o *IndexRequest) HasCollation() bool {
	if o != nil && !IsNil(o.Collation) {
		return true
	}

	return false
}

// SetCollation gets a reference to the given Collation and assigns it to the Collation field.
func (o *IndexRequest) SetCollation(v Collation) {
	o.Collation = &v
}

// GetCollection returns the Collection field value
func (o *IndexRequest) GetCollection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value
// and a boolean to check if the value has been set.
func (o *IndexRequest) GetCollectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Collection, true
}

// SetCollection sets field value
func (o *IndexRequest) SetCollection(v string) {
	o.Collection = v
}

// GetDb returns the Db field value
func (o *IndexRequest) GetDb() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Db
}

// GetDbOk returns a tuple with the Db field value
// and a boolean to check if the value has been set.
func (o *IndexRequest) GetDbOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Db, true
}

// SetDb sets field value
func (o *IndexRequest) SetDb(v string) {
	o.Db = v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *IndexRequest) GetKeys() []map[string]string {
	if o == nil || IsNil(o.Keys) {
		var ret []map[string]string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexRequest) GetKeysOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *IndexRequest) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []map[string]string and assigns it to the Keys field.
func (o *IndexRequest) SetKeys(v []map[string]string) {
	o.Keys = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *IndexRequest) GetOptions() IndexOptions {
	if o == nil || IsNil(o.Options) {
		var ret IndexOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexRequest) GetOptionsOk() (*IndexOptions, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *IndexRequest) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given IndexOptions and assigns it to the Options field.
func (o *IndexRequest) SetOptions(v IndexOptions) {
	o.Options = &v
}

func (o IndexRequest) MarshalJSONWithoutReadOnly() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}
func (o IndexRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Collation) {
		toSerialize["collation"] = o.Collation
	}
	toSerialize["collection"] = o.Collection
	toSerialize["db"] = o.Db
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableIndexRequest struct {
	value *IndexRequest
	isSet bool
}

func (v NullableIndexRequest) Get() *IndexRequest {
	return v.value
}

func (v *NullableIndexRequest) Set(val *IndexRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexRequest(val *IndexRequest) *NullableIndexRequest {
	return &NullableIndexRequest{value: val, isSet: true}
}

func (v NullableIndexRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


