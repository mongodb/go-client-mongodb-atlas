/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
)

// checks if the DataLakeAtlasStoreReadPreference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataLakeAtlasStoreReadPreference{}

// DataLakeAtlasStoreReadPreference MongoDB Cloud cluster read preference, which describes how to route read requests to the cluster.
type DataLakeAtlasStoreReadPreference struct {
	// Maximum replication lag, or **staleness**, for reads from secondaries.
	MaxStalenessSeconds *int32 `json:"maxStalenessSeconds,omitempty"`
	// [Read preference mode](https://docs.mongodb.com/manual/core/read-preference/#read-preference-modes) that specifies to which replica set member to route the read requests.
	Mode *string `json:"mode,omitempty"`
	// List that contains [tag sets](https://docs.mongodb.com/manual/core/read-preference-tags/) or tag specification documents. If specified, Atlas Data Lake routes read requests to replica set member or members that are associated with the specified tags.
	TagSets [][]DataLakeAtlasStoreReadPreferenceTag `json:"tagSets,omitempty"`
}

// NewDataLakeAtlasStoreReadPreference instantiates a new DataLakeAtlasStoreReadPreference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLakeAtlasStoreReadPreference() *DataLakeAtlasStoreReadPreference {
	this := DataLakeAtlasStoreReadPreference{}
	return &this
}

// NewDataLakeAtlasStoreReadPreferenceWithDefaults instantiates a new DataLakeAtlasStoreReadPreference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLakeAtlasStoreReadPreferenceWithDefaults() *DataLakeAtlasStoreReadPreference {
	this := DataLakeAtlasStoreReadPreference{}
	return &this
}

// GetMaxStalenessSeconds returns the MaxStalenessSeconds field value if set, zero value otherwise.
func (o *DataLakeAtlasStoreReadPreference) GetMaxStalenessSeconds() int32 {
	if o == nil || IsNil(o.MaxStalenessSeconds) {
		var ret int32
		return ret
	}
	return *o.MaxStalenessSeconds
}

// GetMaxStalenessSecondsOk returns a tuple with the MaxStalenessSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStoreReadPreference) GetMaxStalenessSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxStalenessSeconds) {
		return nil, false
	}
	return o.MaxStalenessSeconds, true
}

// HasMaxStalenessSeconds returns a boolean if a field has been set.
func (o *DataLakeAtlasStoreReadPreference) HasMaxStalenessSeconds() bool {
	if o != nil && !IsNil(o.MaxStalenessSeconds) {
		return true
	}

	return false
}

// SetMaxStalenessSeconds gets a reference to the given int32 and assigns it to the MaxStalenessSeconds field.
func (o *DataLakeAtlasStoreReadPreference) SetMaxStalenessSeconds(v int32) {
	o.MaxStalenessSeconds = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *DataLakeAtlasStoreReadPreference) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStoreReadPreference) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *DataLakeAtlasStoreReadPreference) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *DataLakeAtlasStoreReadPreference) SetMode(v string) {
	o.Mode = &v
}

// GetTagSets returns the TagSets field value if set, zero value otherwise.
func (o *DataLakeAtlasStoreReadPreference) GetTagSets() [][]DataLakeAtlasStoreReadPreferenceTag {
	if o == nil || IsNil(o.TagSets) {
		var ret [][]DataLakeAtlasStoreReadPreferenceTag
		return ret
	}
	return o.TagSets
}

// GetTagSetsOk returns a tuple with the TagSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStoreReadPreference) GetTagSetsOk() ([][]DataLakeAtlasStoreReadPreferenceTag, bool) {
	if o == nil || IsNil(o.TagSets) {
		return nil, false
	}
	return o.TagSets, true
}

// HasTagSets returns a boolean if a field has been set.
func (o *DataLakeAtlasStoreReadPreference) HasTagSets() bool {
	if o != nil && !IsNil(o.TagSets) {
		return true
	}

	return false
}

// SetTagSets gets a reference to the given [][]DataLakeAtlasStoreReadPreferenceTag and assigns it to the TagSets field.
func (o *DataLakeAtlasStoreReadPreference) SetTagSets(v [][]DataLakeAtlasStoreReadPreferenceTag) {
	o.TagSets = v
}

func (o DataLakeAtlasStoreReadPreference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataLakeAtlasStoreReadPreference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxStalenessSeconds) {
		toSerialize["maxStalenessSeconds"] = o.MaxStalenessSeconds
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.TagSets) {
		toSerialize["tagSets"] = o.TagSets
	}
	return toSerialize, nil
}

type NullableDataLakeAtlasStoreReadPreference struct {
	value *DataLakeAtlasStoreReadPreference
	isSet bool
}

func (v NullableDataLakeAtlasStoreReadPreference) Get() *DataLakeAtlasStoreReadPreference {
	return v.value
}

func (v *NullableDataLakeAtlasStoreReadPreference) Set(val *DataLakeAtlasStoreReadPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLakeAtlasStoreReadPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLakeAtlasStoreReadPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLakeAtlasStoreReadPreference(val *DataLakeAtlasStoreReadPreference) *NullableDataLakeAtlasStoreReadPreference {
	return &NullableDataLakeAtlasStoreReadPreference{value: val, isSet: true}
}

func (v NullableDataLakeAtlasStoreReadPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLakeAtlasStoreReadPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


