/*
API version: 2.0~61723fd7f1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
	"fmt"
)

// HostMetricThreshold - Threshold for the metric that, when exceeded, triggers an alert. The metric threshold pertains to event types which reflects changes of measurements and metrics about mongod host.
type HostMetricThreshold struct {
	DataMetricThreshold *DataMetricThreshold
	NumberMetricThreshold *NumberMetricThreshold
	RawMetricThreshold *RawMetricThreshold
	TimeMetricThreshold *TimeMetricThreshold
}

// DataMetricThresholdAsHostMetricThreshold is a convenience function that returns DataMetricThreshold wrapped in HostMetricThreshold
func DataMetricThresholdAsHostMetricThreshold(v *DataMetricThreshold) HostMetricThreshold {
	return HostMetricThreshold{
		DataMetricThreshold: v,
	}
}

// NumberMetricThresholdAsHostMetricThreshold is a convenience function that returns NumberMetricThreshold wrapped in HostMetricThreshold
func NumberMetricThresholdAsHostMetricThreshold(v *NumberMetricThreshold) HostMetricThreshold {
	return HostMetricThreshold{
		NumberMetricThreshold: v,
	}
}

// RawMetricThresholdAsHostMetricThreshold is a convenience function that returns RawMetricThreshold wrapped in HostMetricThreshold
func RawMetricThresholdAsHostMetricThreshold(v *RawMetricThreshold) HostMetricThreshold {
	return HostMetricThreshold{
		RawMetricThreshold: v,
	}
}

// TimeMetricThresholdAsHostMetricThreshold is a convenience function that returns TimeMetricThreshold wrapped in HostMetricThreshold
func TimeMetricThresholdAsHostMetricThreshold(v *TimeMetricThreshold) HostMetricThreshold {
	return HostMetricThreshold{
		TimeMetricThreshold: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *HostMetricThreshold) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'ASSERT_MSG'
	if jsonDict["metricName"] == "ASSERT_MSG" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ASSERT_REGULAR'
	if jsonDict["metricName"] == "ASSERT_REGULAR" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ASSERT_USER'
	if jsonDict["metricName"] == "ASSERT_USER" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ASSERT_WARNING'
	if jsonDict["metricName"] == "ASSERT_WARNING" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AVG_COMMAND_EXECUTION_TIME'
	if jsonDict["metricName"] == "AVG_COMMAND_EXECUTION_TIME" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AVG_READ_EXECUTION_TIME'
	if jsonDict["metricName"] == "AVG_READ_EXECUTION_TIME" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AVG_WRITE_EXECUTION_TIME'
	if jsonDict["metricName"] == "AVG_WRITE_EXECUTION_TIME" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'BACKGROUND_FLUSH_AVG'
	if jsonDict["metricName"] == "BACKGROUND_FLUSH_AVG" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CACHE_BYTES_READ_INTO'
	if jsonDict["metricName"] == "CACHE_BYTES_READ_INTO" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CACHE_BYTES_WRITTEN_FROM'
	if jsonDict["metricName"] == "CACHE_BYTES_WRITTEN_FROM" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CACHE_USAGE_DIRTY'
	if jsonDict["metricName"] == "CACHE_USAGE_DIRTY" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CACHE_USAGE_USED'
	if jsonDict["metricName"] == "CACHE_USAGE_USED" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'COMPUTED_MEMORY'
	if jsonDict["metricName"] == "COMPUTED_MEMORY" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CONNECTIONS'
	if jsonDict["metricName"] == "CONNECTIONS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CONNECTIONS_MAX'
	if jsonDict["metricName"] == "CONNECTIONS_MAX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CONNECTIONS_PERCENT'
	if jsonDict["metricName"] == "CONNECTIONS_PERCENT" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CURSORS_TOTAL_CLIENT_CURSORS_SIZE'
	if jsonDict["metricName"] == "CURSORS_TOTAL_CLIENT_CURSORS_SIZE" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CURSORS_TOTAL_OPEN'
	if jsonDict["metricName"] == "CURSORS_TOTAL_OPEN" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'CURSORS_TOTAL_TIMED_OUT'
	if jsonDict["metricName"] == "CURSORS_TOTAL_TIMED_OUT" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DB_DATA_SIZE_TOTAL'
	if jsonDict["metricName"] == "DB_DATA_SIZE_TOTAL" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DB_DATA_SIZE_TOTAL_WO_SYSTEM'
	if jsonDict["metricName"] == "DB_DATA_SIZE_TOTAL_WO_SYSTEM" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DB_INDEX_SIZE_TOTAL'
	if jsonDict["metricName"] == "DB_INDEX_SIZE_TOTAL" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DB_STORAGE_TOTAL'
	if jsonDict["metricName"] == "DB_STORAGE_TOTAL" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_QUEUE_DEPTH_DATA'
	if jsonDict["metricName"] == "DISK_PARTITION_QUEUE_DEPTH_DATA" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_QUEUE_DEPTH_INDEX'
	if jsonDict["metricName"] == "DISK_PARTITION_QUEUE_DEPTH_INDEX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_QUEUE_DEPTH_JOURNAL'
	if jsonDict["metricName"] == "DISK_PARTITION_QUEUE_DEPTH_JOURNAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_READ_IOPS_DATA'
	if jsonDict["metricName"] == "DISK_PARTITION_READ_IOPS_DATA" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_READ_IOPS_INDEX'
	if jsonDict["metricName"] == "DISK_PARTITION_READ_IOPS_INDEX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_READ_IOPS_JOURNAL'
	if jsonDict["metricName"] == "DISK_PARTITION_READ_IOPS_JOURNAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_READ_LATENCY_DATA'
	if jsonDict["metricName"] == "DISK_PARTITION_READ_LATENCY_DATA" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_READ_LATENCY_INDEX'
	if jsonDict["metricName"] == "DISK_PARTITION_READ_LATENCY_INDEX" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_READ_LATENCY_JOURNAL'
	if jsonDict["metricName"] == "DISK_PARTITION_READ_LATENCY_JOURNAL" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_SPACE_USED_DATA'
	if jsonDict["metricName"] == "DISK_PARTITION_SPACE_USED_DATA" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_SPACE_USED_INDEX'
	if jsonDict["metricName"] == "DISK_PARTITION_SPACE_USED_INDEX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_SPACE_USED_JOURNAL'
	if jsonDict["metricName"] == "DISK_PARTITION_SPACE_USED_JOURNAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_UTILIZATION_DATA'
	if jsonDict["metricName"] == "DISK_PARTITION_UTILIZATION_DATA" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_UTILIZATION_INDEX'
	if jsonDict["metricName"] == "DISK_PARTITION_UTILIZATION_INDEX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_UTILIZATION_JOURNAL'
	if jsonDict["metricName"] == "DISK_PARTITION_UTILIZATION_JOURNAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_WRITE_IOPS_DATA'
	if jsonDict["metricName"] == "DISK_PARTITION_WRITE_IOPS_DATA" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_WRITE_IOPS_INDEX'
	if jsonDict["metricName"] == "DISK_PARTITION_WRITE_IOPS_INDEX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_WRITE_IOPS_JOURNAL'
	if jsonDict["metricName"] == "DISK_PARTITION_WRITE_IOPS_JOURNAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_WRITE_LATENCY_DATA'
	if jsonDict["metricName"] == "DISK_PARTITION_WRITE_LATENCY_DATA" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_WRITE_LATENCY_INDEX'
	if jsonDict["metricName"] == "DISK_PARTITION_WRITE_LATENCY_INDEX" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DISK_PARTITION_WRITE_LATENCY_JOURNAL'
	if jsonDict["metricName"] == "DISK_PARTITION_WRITE_LATENCY_JOURNAL" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DOCUMENT_DELETED'
	if jsonDict["metricName"] == "DOCUMENT_DELETED" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DOCUMENT_INSERTED'
	if jsonDict["metricName"] == "DOCUMENT_INSERTED" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DOCUMENT_RETURNED'
	if jsonDict["metricName"] == "DOCUMENT_RETURNED" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DOCUMENT_UPDATED'
	if jsonDict["metricName"] == "DOCUMENT_UPDATED" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DataMetricThreshold'
	if jsonDict["metricName"] == "DataMetricThreshold" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EXTRA_INFO_PAGE_FAULTS'
	if jsonDict["metricName"] == "EXTRA_INFO_PAGE_FAULTS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FTS_DISK_UTILIZATION'
	if jsonDict["metricName"] == "FTS_DISK_UTILIZATION" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FTS_JVM_CURRENT_MEMORY'
	if jsonDict["metricName"] == "FTS_JVM_CURRENT_MEMORY" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FTS_JVM_MAX_MEMORY'
	if jsonDict["metricName"] == "FTS_JVM_MAX_MEMORY" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FTS_MEMORY_MAPPED'
	if jsonDict["metricName"] == "FTS_MEMORY_MAPPED" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FTS_MEMORY_RESIDENT'
	if jsonDict["metricName"] == "FTS_MEMORY_RESIDENT" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FTS_MEMORY_VIRTUAL'
	if jsonDict["metricName"] == "FTS_MEMORY_VIRTUAL" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FTS_PROCESS_CPU_KERNEL'
	if jsonDict["metricName"] == "FTS_PROCESS_CPU_KERNEL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FTS_PROCESS_CPU_USER'
	if jsonDict["metricName"] == "FTS_PROCESS_CPU_USER" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GLOBAL_ACCESSES_NOT_IN_MEMORY'
	if jsonDict["metricName"] == "GLOBAL_ACCESSES_NOT_IN_MEMORY" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GLOBAL_LOCK_CURRENT_QUEUE_READERS'
	if jsonDict["metricName"] == "GLOBAL_LOCK_CURRENT_QUEUE_READERS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GLOBAL_LOCK_CURRENT_QUEUE_TOTAL'
	if jsonDict["metricName"] == "GLOBAL_LOCK_CURRENT_QUEUE_TOTAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GLOBAL_LOCK_CURRENT_QUEUE_WRITERS'
	if jsonDict["metricName"] == "GLOBAL_LOCK_CURRENT_QUEUE_WRITERS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GLOBAL_LOCK_PERCENTAGE'
	if jsonDict["metricName"] == "GLOBAL_LOCK_PERCENTAGE" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GLOBAL_PAGE_FAULT_EXCEPTIONS_THROWN'
	if jsonDict["metricName"] == "GLOBAL_PAGE_FAULT_EXCEPTIONS_THROWN" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'INDEX_COUNTERS_BTREE_ACCESSES'
	if jsonDict["metricName"] == "INDEX_COUNTERS_BTREE_ACCESSES" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'INDEX_COUNTERS_BTREE_HITS'
	if jsonDict["metricName"] == "INDEX_COUNTERS_BTREE_HITS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'INDEX_COUNTERS_BTREE_MISSES'
	if jsonDict["metricName"] == "INDEX_COUNTERS_BTREE_MISSES" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'INDEX_COUNTERS_BTREE_MISS_RATIO'
	if jsonDict["metricName"] == "INDEX_COUNTERS_BTREE_MISS_RATIO" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'JOURNALING_COMMITS_IN_WRITE_LOCK'
	if jsonDict["metricName"] == "JOURNALING_COMMITS_IN_WRITE_LOCK" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'JOURNALING_MB'
	if jsonDict["metricName"] == "JOURNALING_MB" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'JOURNALING_WRITE_DATA_FILES_MB'
	if jsonDict["metricName"] == "JOURNALING_WRITE_DATA_FILES_MB" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'LOGICAL_SIZE'
	if jsonDict["metricName"] == "LOGICAL_SIZE" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_QUEUE_DEPTH_DATA'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_QUEUE_DEPTH_DATA" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_QUEUE_DEPTH_INDEX'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_QUEUE_DEPTH_INDEX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_QUEUE_DEPTH_JOURNAL'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_QUEUE_DEPTH_JOURNAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_READ_IOPS_DATA'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_READ_IOPS_DATA" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_READ_IOPS_INDEX'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_READ_IOPS_INDEX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_READ_IOPS_JOURNAL'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_READ_IOPS_JOURNAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_READ_LATENCY_DATA'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_READ_LATENCY_DATA" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_READ_LATENCY_INDEX'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_READ_LATENCY_INDEX" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_READ_LATENCY_JOURNAL'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_READ_LATENCY_JOURNAL" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_SPACE_USED_DATA'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_SPACE_USED_DATA" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_SPACE_USED_INDEX'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_SPACE_USED_INDEX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_SPACE_USED_JOURNAL'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_SPACE_USED_JOURNAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_UTILIZATION_DATA'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_UTILIZATION_DATA" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_UTILIZATION_INDEX'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_UTILIZATION_INDEX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_UTILIZATION_JOURNAL'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_UTILIZATION_JOURNAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_WRITE_IOPS_DATA'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_WRITE_IOPS_DATA" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_WRITE_IOPS_INDEX'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_WRITE_IOPS_INDEX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_WRITE_IOPS_JOURNAL'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_WRITE_IOPS_JOURNAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_WRITE_LATENCY_DATA'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_WRITE_LATENCY_DATA" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_WRITE_LATENCY_INDEX'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_WRITE_LATENCY_INDEX" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_DISK_PARTITION_WRITE_LATENCY_JOURNAL'
	if jsonDict["metricName"] == "MAX_DISK_PARTITION_WRITE_LATENCY_JOURNAL" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_NORMALIZED_SYSTEM_CPU_STEAL'
	if jsonDict["metricName"] == "MAX_NORMALIZED_SYSTEM_CPU_STEAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_NORMALIZED_SYSTEM_CPU_USER'
	if jsonDict["metricName"] == "MAX_NORMALIZED_SYSTEM_CPU_USER" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_SWAP_USAGE_FREE'
	if jsonDict["metricName"] == "MAX_SWAP_USAGE_FREE" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_SWAP_USAGE_USED'
	if jsonDict["metricName"] == "MAX_SWAP_USAGE_USED" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_SYSTEM_MEMORY_AVAILABLE'
	if jsonDict["metricName"] == "MAX_SYSTEM_MEMORY_AVAILABLE" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_SYSTEM_MEMORY_PERCENT_USED'
	if jsonDict["metricName"] == "MAX_SYSTEM_MEMORY_PERCENT_USED" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_SYSTEM_MEMORY_USED'
	if jsonDict["metricName"] == "MAX_SYSTEM_MEMORY_USED" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_SYSTEM_NETWORK_IN'
	if jsonDict["metricName"] == "MAX_SYSTEM_NETWORK_IN" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MAX_SYSTEM_NETWORK_OUT'
	if jsonDict["metricName"] == "MAX_SYSTEM_NETWORK_OUT" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MEMORY_MAPPED'
	if jsonDict["metricName"] == "MEMORY_MAPPED" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MEMORY_RESIDENT'
	if jsonDict["metricName"] == "MEMORY_RESIDENT" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MEMORY_VIRTUAL'
	if jsonDict["metricName"] == "MEMORY_VIRTUAL" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MUNIN_CPU_IOWAIT'
	if jsonDict["metricName"] == "MUNIN_CPU_IOWAIT" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MUNIN_CPU_IRQ'
	if jsonDict["metricName"] == "MUNIN_CPU_IRQ" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MUNIN_CPU_NICE'
	if jsonDict["metricName"] == "MUNIN_CPU_NICE" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MUNIN_CPU_SOFTIRQ'
	if jsonDict["metricName"] == "MUNIN_CPU_SOFTIRQ" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MUNIN_CPU_STEAL'
	if jsonDict["metricName"] == "MUNIN_CPU_STEAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MUNIN_CPU_SYSTEM'
	if jsonDict["metricName"] == "MUNIN_CPU_SYSTEM" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MUNIN_CPU_USER'
	if jsonDict["metricName"] == "MUNIN_CPU_USER" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NETWORK_BYTES_IN'
	if jsonDict["metricName"] == "NETWORK_BYTES_IN" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NETWORK_BYTES_OUT'
	if jsonDict["metricName"] == "NETWORK_BYTES_OUT" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NETWORK_NUM_REQUESTS'
	if jsonDict["metricName"] == "NETWORK_NUM_REQUESTS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NORMALIZED_FTS_PROCESS_CPU_KERNEL'
	if jsonDict["metricName"] == "NORMALIZED_FTS_PROCESS_CPU_KERNEL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NORMALIZED_FTS_PROCESS_CPU_USER'
	if jsonDict["metricName"] == "NORMALIZED_FTS_PROCESS_CPU_USER" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NORMALIZED_SYSTEM_CPU_STEAL'
	if jsonDict["metricName"] == "NORMALIZED_SYSTEM_CPU_STEAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NORMALIZED_SYSTEM_CPU_USER'
	if jsonDict["metricName"] == "NORMALIZED_SYSTEM_CPU_USER" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'NumberMetricThreshold'
	if jsonDict["metricName"] == "NumberMetricThreshold" {
		// try to unmarshal JSON data into NumberMetricThreshold
		err = json.Unmarshal(data, &dst.NumberMetricThreshold)
		if err == nil {
			return nil // data stored in dst.NumberMetricThreshold, return on the first match
		} else {
			dst.NumberMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as NumberMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPCOUNTER_CMD'
	if jsonDict["metricName"] == "OPCOUNTER_CMD" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPCOUNTER_DELETE'
	if jsonDict["metricName"] == "OPCOUNTER_DELETE" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPCOUNTER_GETMORE'
	if jsonDict["metricName"] == "OPCOUNTER_GETMORE" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPCOUNTER_INSERT'
	if jsonDict["metricName"] == "OPCOUNTER_INSERT" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPCOUNTER_QUERY'
	if jsonDict["metricName"] == "OPCOUNTER_QUERY" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPCOUNTER_REPL_CMD'
	if jsonDict["metricName"] == "OPCOUNTER_REPL_CMD" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPCOUNTER_REPL_DELETE'
	if jsonDict["metricName"] == "OPCOUNTER_REPL_DELETE" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPCOUNTER_REPL_INSERT'
	if jsonDict["metricName"] == "OPCOUNTER_REPL_INSERT" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPCOUNTER_REPL_UPDATE'
	if jsonDict["metricName"] == "OPCOUNTER_REPL_UPDATE" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPCOUNTER_UPDATE'
	if jsonDict["metricName"] == "OPCOUNTER_UPDATE" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPERATIONS_SCAN_AND_ORDER'
	if jsonDict["metricName"] == "OPERATIONS_SCAN_AND_ORDER" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPLOG_MASTER_LAG_TIME_DIFF'
	if jsonDict["metricName"] == "OPLOG_MASTER_LAG_TIME_DIFF" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPLOG_MASTER_TIME'
	if jsonDict["metricName"] == "OPLOG_MASTER_TIME" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPLOG_MASTER_TIME_ESTIMATED_TTL'
	if jsonDict["metricName"] == "OPLOG_MASTER_TIME_ESTIMATED_TTL" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPLOG_RATE_GB_PER_HOUR'
	if jsonDict["metricName"] == "OPLOG_RATE_GB_PER_HOUR" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPLOG_REPLICATION_LAG_TIME'
	if jsonDict["metricName"] == "OPLOG_REPLICATION_LAG_TIME" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'OPLOG_SLAVE_LAG_MASTER_TIME'
	if jsonDict["metricName"] == "OPLOG_SLAVE_LAG_MASTER_TIME" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'QUERY_EXECUTOR_SCANNED'
	if jsonDict["metricName"] == "QUERY_EXECUTOR_SCANNED" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'QUERY_EXECUTOR_SCANNED_OBJECTS'
	if jsonDict["metricName"] == "QUERY_EXECUTOR_SCANNED_OBJECTS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'QUERY_TARGETING_SCANNED_OBJECTS_PER_RETURNED'
	if jsonDict["metricName"] == "QUERY_TARGETING_SCANNED_OBJECTS_PER_RETURNED" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'QUERY_TARGETING_SCANNED_PER_RETURNED'
	if jsonDict["metricName"] == "QUERY_TARGETING_SCANNED_PER_RETURNED" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RESTARTS_IN_LAST_HOUR'
	if jsonDict["metricName"] == "RESTARTS_IN_LAST_HOUR" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RawMetricThreshold'
	if jsonDict["metricName"] == "RawMetricThreshold" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SEARCH_INDEX_SIZE'
	if jsonDict["metricName"] == "SEARCH_INDEX_SIZE" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SEARCH_MAX_NUMBER_OF_LUCENE_DOCS'
	if jsonDict["metricName"] == "SEARCH_MAX_NUMBER_OF_LUCENE_DOCS" {
		// try to unmarshal JSON data into NumberMetricThreshold
		err = json.Unmarshal(data, &dst.NumberMetricThreshold)
		if err == nil {
			return nil // data stored in dst.NumberMetricThreshold, return on the first match
		} else {
			dst.NumberMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as NumberMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SEARCH_NUMBER_OF_FIELDS_IN_INDEX'
	if jsonDict["metricName"] == "SEARCH_NUMBER_OF_FIELDS_IN_INDEX" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SEARCH_NUMBER_OF_QUERIES_ERROR'
	if jsonDict["metricName"] == "SEARCH_NUMBER_OF_QUERIES_ERROR" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SEARCH_NUMBER_OF_QUERIES_SUCCESS'
	if jsonDict["metricName"] == "SEARCH_NUMBER_OF_QUERIES_SUCCESS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SEARCH_NUMBER_OF_QUERIES_TOTAL'
	if jsonDict["metricName"] == "SEARCH_NUMBER_OF_QUERIES_TOTAL" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SEARCH_OPCOUNTER_DELETE'
	if jsonDict["metricName"] == "SEARCH_OPCOUNTER_DELETE" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SEARCH_OPCOUNTER_GETMORE'
	if jsonDict["metricName"] == "SEARCH_OPCOUNTER_GETMORE" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SEARCH_OPCOUNTER_INSERT'
	if jsonDict["metricName"] == "SEARCH_OPCOUNTER_INSERT" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SEARCH_OPCOUNTER_UPDATE'
	if jsonDict["metricName"] == "SEARCH_OPCOUNTER_UPDATE" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SEARCH_REPLICATION_LAG'
	if jsonDict["metricName"] == "SEARCH_REPLICATION_LAG" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SWAP_USAGE_FREE'
	if jsonDict["metricName"] == "SWAP_USAGE_FREE" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SWAP_USAGE_USED'
	if jsonDict["metricName"] == "SWAP_USAGE_USED" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SYSTEM_MEMORY_AVAILABLE'
	if jsonDict["metricName"] == "SYSTEM_MEMORY_AVAILABLE" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SYSTEM_MEMORY_PERCENT_USED'
	if jsonDict["metricName"] == "SYSTEM_MEMORY_PERCENT_USED" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SYSTEM_MEMORY_USED'
	if jsonDict["metricName"] == "SYSTEM_MEMORY_USED" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SYSTEM_NETWORK_IN'
	if jsonDict["metricName"] == "SYSTEM_NETWORK_IN" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'SYSTEM_NETWORK_OUT'
	if jsonDict["metricName"] == "SYSTEM_NETWORK_OUT" {
		// try to unmarshal JSON data into DataMetricThreshold
		err = json.Unmarshal(data, &dst.DataMetricThreshold)
		if err == nil {
			return nil // data stored in dst.DataMetricThreshold, return on the first match
		} else {
			dst.DataMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as DataMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TICKETS_AVAILABLE_READS'
	if jsonDict["metricName"] == "TICKETS_AVAILABLE_READS" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TICKETS_AVAILABLE_WRITES'
	if jsonDict["metricName"] == "TICKETS_AVAILABLE_WRITES" {
		// try to unmarshal JSON data into RawMetricThreshold
		err = json.Unmarshal(data, &dst.RawMetricThreshold)
		if err == nil {
			return nil // data stored in dst.RawMetricThreshold, return on the first match
		} else {
			dst.RawMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as RawMetricThreshold: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TimeMetricThreshold'
	if jsonDict["metricName"] == "TimeMetricThreshold" {
		// try to unmarshal JSON data into TimeMetricThreshold
		err = json.Unmarshal(data, &dst.TimeMetricThreshold)
		if err == nil {
			return nil // data stored in dst.TimeMetricThreshold, return on the first match
		} else {
			dst.TimeMetricThreshold = nil
			return fmt.Errorf("failed to unmarshal HostMetricThreshold as TimeMetricThreshold: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HostMetricThreshold) MarshalJSON() ([]byte, error) {
	if src.DataMetricThreshold != nil {
		return json.Marshal(&src.DataMetricThreshold)
	}

	if src.NumberMetricThreshold != nil {
		return json.Marshal(&src.NumberMetricThreshold)
	}

	if src.RawMetricThreshold != nil {
		return json.Marshal(&src.RawMetricThreshold)
	}

	if src.TimeMetricThreshold != nil {
		return json.Marshal(&src.TimeMetricThreshold)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HostMetricThreshold) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataMetricThreshold != nil {
		return obj.DataMetricThreshold
	}

	if obj.NumberMetricThreshold != nil {
		return obj.NumberMetricThreshold
	}

	if obj.RawMetricThreshold != nil {
		return obj.RawMetricThreshold
	}

	if obj.TimeMetricThreshold != nil {
		return obj.TimeMetricThreshold
	}

	// all schemas are nil
	return nil
}

type NullableHostMetricThreshold struct {
	value *HostMetricThreshold
	isSet bool
}

func (v NullableHostMetricThreshold) Get() *HostMetricThreshold {
	return v.value
}

func (v *NullableHostMetricThreshold) Set(val *HostMetricThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableHostMetricThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableHostMetricThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostMetricThreshold(val *HostMetricThreshold) *NullableHostMetricThreshold {
	return &NullableHostMetricThreshold{value: val, isSet: true}
}

func (v NullableHostMetricThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostMetricThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


