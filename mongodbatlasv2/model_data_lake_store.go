/*
API version: 2.0~61723fd7f1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
	"fmt"
)

// DataLakeStore - Group of settings that define where the data is stored.
type DataLakeStore struct {
	DataLakeAtlasStore *DataLakeAtlasStore
	DataLakeHTTPStore *DataLakeHTTPStore
	DataLakeOnlineArchiveStore *DataLakeOnlineArchiveStore
	DataLakeS3Store *DataLakeS3Store
}

// DataLakeAtlasStoreAsDataLakeStore is a convenience function that returns DataLakeAtlasStore wrapped in DataLakeStore
func DataLakeAtlasStoreAsDataLakeStore(v *DataLakeAtlasStore) DataLakeStore {
	return DataLakeStore{
		DataLakeAtlasStore: v,
	}
}

// DataLakeHTTPStoreAsDataLakeStore is a convenience function that returns DataLakeHTTPStore wrapped in DataLakeStore
func DataLakeHTTPStoreAsDataLakeStore(v *DataLakeHTTPStore) DataLakeStore {
	return DataLakeStore{
		DataLakeHTTPStore: v,
	}
}

// DataLakeOnlineArchiveStoreAsDataLakeStore is a convenience function that returns DataLakeOnlineArchiveStore wrapped in DataLakeStore
func DataLakeOnlineArchiveStoreAsDataLakeStore(v *DataLakeOnlineArchiveStore) DataLakeStore {
	return DataLakeStore{
		DataLakeOnlineArchiveStore: v,
	}
}

// DataLakeS3StoreAsDataLakeStore is a convenience function that returns DataLakeS3Store wrapped in DataLakeStore
func DataLakeS3StoreAsDataLakeStore(v *DataLakeS3Store) DataLakeStore {
	return DataLakeStore{
		DataLakeS3Store: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DataLakeStore) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'DataLakeAtlasStore'
	if jsonDict["provider"] == "DataLakeAtlasStore" {
		// try to unmarshal JSON data into DataLakeAtlasStore
		err = json.Unmarshal(data, &dst.DataLakeAtlasStore)
		if err == nil {
			return nil // data stored in dst.DataLakeAtlasStore, return on the first match
		} else {
			dst.DataLakeAtlasStore = nil
			return fmt.Errorf("failed to unmarshal DataLakeStore as DataLakeAtlasStore: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DataLakeHTTPStore'
	if jsonDict["provider"] == "DataLakeHTTPStore" {
		// try to unmarshal JSON data into DataLakeHTTPStore
		err = json.Unmarshal(data, &dst.DataLakeHTTPStore)
		if err == nil {
			return nil // data stored in dst.DataLakeHTTPStore, return on the first match
		} else {
			dst.DataLakeHTTPStore = nil
			return fmt.Errorf("failed to unmarshal DataLakeStore as DataLakeHTTPStore: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DataLakeOnlineArchiveStore'
	if jsonDict["provider"] == "DataLakeOnlineArchiveStore" {
		// try to unmarshal JSON data into DataLakeOnlineArchiveStore
		err = json.Unmarshal(data, &dst.DataLakeOnlineArchiveStore)
		if err == nil {
			return nil // data stored in dst.DataLakeOnlineArchiveStore, return on the first match
		} else {
			dst.DataLakeOnlineArchiveStore = nil
			return fmt.Errorf("failed to unmarshal DataLakeStore as DataLakeOnlineArchiveStore: %s", err.Error())
		}
	}

	// check if the discriminator value is 'DataLakeS3Store'
	if jsonDict["provider"] == "DataLakeS3Store" {
		// try to unmarshal JSON data into DataLakeS3Store
		err = json.Unmarshal(data, &dst.DataLakeS3Store)
		if err == nil {
			return nil // data stored in dst.DataLakeS3Store, return on the first match
		} else {
			dst.DataLakeS3Store = nil
			return fmt.Errorf("failed to unmarshal DataLakeStore as DataLakeS3Store: %s", err.Error())
		}
	}

	// check if the discriminator value is 'atlas'
	if jsonDict["provider"] == "atlas" {
		// try to unmarshal JSON data into DataLakeAtlasStore
		err = json.Unmarshal(data, &dst.DataLakeAtlasStore)
		if err == nil {
			return nil // data stored in dst.DataLakeAtlasStore, return on the first match
		} else {
			dst.DataLakeAtlasStore = nil
			return fmt.Errorf("failed to unmarshal DataLakeStore as DataLakeAtlasStore: %s", err.Error())
		}
	}

	// check if the discriminator value is 'http'
	if jsonDict["provider"] == "http" {
		// try to unmarshal JSON data into DataLakeHTTPStore
		err = json.Unmarshal(data, &dst.DataLakeHTTPStore)
		if err == nil {
			return nil // data stored in dst.DataLakeHTTPStore, return on the first match
		} else {
			dst.DataLakeHTTPStore = nil
			return fmt.Errorf("failed to unmarshal DataLakeStore as DataLakeHTTPStore: %s", err.Error())
		}
	}

	// check if the discriminator value is 'online_archive'
	if jsonDict["provider"] == "online_archive" {
		// try to unmarshal JSON data into DataLakeOnlineArchiveStore
		err = json.Unmarshal(data, &dst.DataLakeOnlineArchiveStore)
		if err == nil {
			return nil // data stored in dst.DataLakeOnlineArchiveStore, return on the first match
		} else {
			dst.DataLakeOnlineArchiveStore = nil
			return fmt.Errorf("failed to unmarshal DataLakeStore as DataLakeOnlineArchiveStore: %s", err.Error())
		}
	}

	// check if the discriminator value is 's3'
	if jsonDict["provider"] == "s3" {
		// try to unmarshal JSON data into DataLakeS3Store
		err = json.Unmarshal(data, &dst.DataLakeS3Store)
		if err == nil {
			return nil // data stored in dst.DataLakeS3Store, return on the first match
		} else {
			dst.DataLakeS3Store = nil
			return fmt.Errorf("failed to unmarshal DataLakeStore as DataLakeS3Store: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DataLakeStore) MarshalJSON() ([]byte, error) {
	if src.DataLakeAtlasStore != nil {
		return json.Marshal(&src.DataLakeAtlasStore)
	}

	if src.DataLakeHTTPStore != nil {
		return json.Marshal(&src.DataLakeHTTPStore)
	}

	if src.DataLakeOnlineArchiveStore != nil {
		return json.Marshal(&src.DataLakeOnlineArchiveStore)
	}

	if src.DataLakeS3Store != nil {
		return json.Marshal(&src.DataLakeS3Store)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DataLakeStore) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataLakeAtlasStore != nil {
		return obj.DataLakeAtlasStore
	}

	if obj.DataLakeHTTPStore != nil {
		return obj.DataLakeHTTPStore
	}

	if obj.DataLakeOnlineArchiveStore != nil {
		return obj.DataLakeOnlineArchiveStore
	}

	if obj.DataLakeS3Store != nil {
		return obj.DataLakeS3Store
	}

	// all schemas are nil
	return nil
}

type NullableDataLakeStore struct {
	value *DataLakeStore
	isSet bool
}

func (v NullableDataLakeStore) Get() *DataLakeStore {
	return v.value
}

func (v *NullableDataLakeStore) Set(val *DataLakeStore) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLakeStore) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLakeStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLakeStore(val *DataLakeStore) *NullableDataLakeStore {
	return &NullableDataLakeStore{value: val, isSet: true}
}

func (v NullableDataLakeStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLakeStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


