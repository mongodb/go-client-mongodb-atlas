/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas.   The Atlas Administration API authenticates using HTTP Digest Authentication. Provide a programmatic API public key and corresponding private key as the username and password when constructing the HTTP request. For example, with [curl](https://en.wikipedia.org/wiki/CURL): `curl --user \"{PUBLIC-KEY}:{PRIVATE-KEY}\" --digest`   To learn more, see [Get Started with the Atlas Administration API](https://www.mongodb.com/docs/atlas/configure-api-access/). For support, see [MongoDB Support](https://www.mongodb.com/support/get-started)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
	"fmt"
)

// TimeMetricUnits Element used to express the quantity. This can be an element of time, storage capacity, and the like.
type TimeMetricUnits string

// List of TimeMetricUnits
const (
	TIMEMETRICUNITS_NANOSECONDS TimeMetricUnits = "NANOSECONDS"
	TIMEMETRICUNITS_MILLISECONDS TimeMetricUnits = "MILLISECONDS"
	TIMEMETRICUNITS_MILLION_MINUTES TimeMetricUnits = "MILLION_MINUTES"
	TIMEMETRICUNITS_SECONDS TimeMetricUnits = "SECONDS"
	TIMEMETRICUNITS_MINUTES TimeMetricUnits = "MINUTES"
	TIMEMETRICUNITS_HOURS TimeMetricUnits = "HOURS"
	TIMEMETRICUNITS_DAYS TimeMetricUnits = "DAYS"
)

// All allowed values of TimeMetricUnits enum
var AllowedTimeMetricUnitsEnumValues = []TimeMetricUnits{
	"NANOSECONDS",
	"MILLISECONDS",
	"MILLION_MINUTES",
	"SECONDS",
	"MINUTES",
	"HOURS",
	"DAYS",
}

func (v *TimeMetricUnits) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeMetricUnits(value)
	for _, existing := range AllowedTimeMetricUnitsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeMetricUnits", value)
}

// NewTimeMetricUnitsFromValue returns a pointer to a valid TimeMetricUnits
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeMetricUnitsFromValue(v string) (*TimeMetricUnits, error) {
	ev := TimeMetricUnits(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeMetricUnits: valid values are %v", v, AllowedTimeMetricUnitsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeMetricUnits) IsValid() bool {
	for _, existing := range AllowedTimeMetricUnitsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeMetricUnits value
func (v TimeMetricUnits) Ptr() *TimeMetricUnits {
	return &v
}


