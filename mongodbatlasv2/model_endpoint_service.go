/*
API version: 2.0~c3d717f799
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
	"fmt"
)

// EndpointService - struct for EndpointService
type EndpointService struct {
	AWSPrivateLinkConnection *AWSPrivateLinkConnection
	AzurePrivateLinkConnection *AzurePrivateLinkConnection
	GCPEndpointService *GCPEndpointService
}

// AWSPrivateLinkConnectionAsEndpointService is a convenience function that returns AWSPrivateLinkConnection wrapped in EndpointService
func AWSPrivateLinkConnectionAsEndpointService(v *AWSPrivateLinkConnection) EndpointService {
	return EndpointService{
		AWSPrivateLinkConnection: v,
	}
}

// AzurePrivateLinkConnectionAsEndpointService is a convenience function that returns AzurePrivateLinkConnection wrapped in EndpointService
func AzurePrivateLinkConnectionAsEndpointService(v *AzurePrivateLinkConnection) EndpointService {
	return EndpointService{
		AzurePrivateLinkConnection: v,
	}
}

// GCPEndpointServiceAsEndpointService is a convenience function that returns GCPEndpointService wrapped in EndpointService
func GCPEndpointServiceAsEndpointService(v *GCPEndpointService) EndpointService {
	return EndpointService{
		GCPEndpointService: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EndpointService) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'AWS'
	if jsonDict["cloudProvider"] == "AWS" {
		// try to unmarshal JSON data into AWSPrivateLinkConnection
		err = json.Unmarshal(data, &dst.AWSPrivateLinkConnection)
		if err == nil {
			return nil // data stored in dst.AWSPrivateLinkConnection, return on the first match
		} else {
			dst.AWSPrivateLinkConnection = nil
			return fmt.Errorf("failed to unmarshal EndpointService as AWSPrivateLinkConnection: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AWSPrivateLinkConnection'
	if jsonDict["cloudProvider"] == "AWSPrivateLinkConnection" {
		// try to unmarshal JSON data into AWSPrivateLinkConnection
		err = json.Unmarshal(data, &dst.AWSPrivateLinkConnection)
		if err == nil {
			return nil // data stored in dst.AWSPrivateLinkConnection, return on the first match
		} else {
			dst.AWSPrivateLinkConnection = nil
			return fmt.Errorf("failed to unmarshal EndpointService as AWSPrivateLinkConnection: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AZURE'
	if jsonDict["cloudProvider"] == "AZURE" {
		// try to unmarshal JSON data into AzurePrivateLinkConnection
		err = json.Unmarshal(data, &dst.AzurePrivateLinkConnection)
		if err == nil {
			return nil // data stored in dst.AzurePrivateLinkConnection, return on the first match
		} else {
			dst.AzurePrivateLinkConnection = nil
			return fmt.Errorf("failed to unmarshal EndpointService as AzurePrivateLinkConnection: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzurePrivateLinkConnection'
	if jsonDict["cloudProvider"] == "AzurePrivateLinkConnection" {
		// try to unmarshal JSON data into AzurePrivateLinkConnection
		err = json.Unmarshal(data, &dst.AzurePrivateLinkConnection)
		if err == nil {
			return nil // data stored in dst.AzurePrivateLinkConnection, return on the first match
		} else {
			dst.AzurePrivateLinkConnection = nil
			return fmt.Errorf("failed to unmarshal EndpointService as AzurePrivateLinkConnection: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCP'
	if jsonDict["cloudProvider"] == "GCP" {
		// try to unmarshal JSON data into GCPEndpointService
		err = json.Unmarshal(data, &dst.GCPEndpointService)
		if err == nil {
			return nil // data stored in dst.GCPEndpointService, return on the first match
		} else {
			dst.GCPEndpointService = nil
			return fmt.Errorf("failed to unmarshal EndpointService as GCPEndpointService: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCPEndpointService'
	if jsonDict["cloudProvider"] == "GCPEndpointService" {
		// try to unmarshal JSON data into GCPEndpointService
		err = json.Unmarshal(data, &dst.GCPEndpointService)
		if err == nil {
			return nil // data stored in dst.GCPEndpointService, return on the first match
		} else {
			dst.GCPEndpointService = nil
			return fmt.Errorf("failed to unmarshal EndpointService as GCPEndpointService: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EndpointService) MarshalJSON() ([]byte, error) {
	if src.AWSPrivateLinkConnection != nil {
		return json.Marshal(&src.AWSPrivateLinkConnection)
	}

	if src.AzurePrivateLinkConnection != nil {
		return json.Marshal(&src.AzurePrivateLinkConnection)
	}

	if src.GCPEndpointService != nil {
		return json.Marshal(&src.GCPEndpointService)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EndpointService) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AWSPrivateLinkConnection != nil {
		return obj.AWSPrivateLinkConnection
	}

	if obj.AzurePrivateLinkConnection != nil {
		return obj.AzurePrivateLinkConnection
	}

	if obj.GCPEndpointService != nil {
		return obj.GCPEndpointService
	}

	// all schemas are nil
	return nil
}

type NullableEndpointService struct {
	value *EndpointService
	isSet bool
}

func (v NullableEndpointService) Get() *EndpointService {
	return v.value
}

func (v *NullableEndpointService) Set(val *EndpointService) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointService) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointService(val *EndpointService) *NullableEndpointService {
	return &NullableEndpointService{value: val, isSet: true}
}

func (v NullableEndpointService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


