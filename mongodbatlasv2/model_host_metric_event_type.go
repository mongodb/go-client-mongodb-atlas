/*
API version: 2.0~61723fd7f1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
	"fmt"
)

// HostMetricEventType Unique identifier of event type.
type HostMetricEventType string

// List of HostMetricEventType
const (
	HOSTMETRICEVENTTYPE_INSIDE_METRIC_THRESHOLD HostMetricEventType = "INSIDE_METRIC_THRESHOLD"
	HOSTMETRICEVENTTYPE_OUTSIDE_METRIC_THRESHOLD HostMetricEventType = "OUTSIDE_METRIC_THRESHOLD"
)

// All allowed values of HostMetricEventType enum
var AllowedHostMetricEventTypeEnumValues = []HostMetricEventType{
	"INSIDE_METRIC_THRESHOLD",
	"OUTSIDE_METRIC_THRESHOLD",
}

func (v *HostMetricEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HostMetricEventType(value)
	for _, existing := range AllowedHostMetricEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HostMetricEventType", value)
}

// NewHostMetricEventTypeFromValue returns a pointer to a valid HostMetricEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostMetricEventTypeFromValue(v string) (*HostMetricEventType, error) {
	ev := HostMetricEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HostMetricEventType: valid values are %v", v, AllowedHostMetricEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostMetricEventType) IsValid() bool {
	for _, existing := range AllowedHostMetricEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HostMetricEventType value
func (v HostMetricEventType) Ptr() *HostMetricEventType {
	return &v
}


