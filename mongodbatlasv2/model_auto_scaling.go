/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas.   The Atlas Administration API authenticates using HTTP Digest Authentication. Provide a programmatic API public key and corresponding private key as the username and password when constructing the HTTP request. For example, with [curl](https://en.wikipedia.org/wiki/CURL): `curl --user \"{PUBLIC-KEY}:{PRIVATE-KEY}\" --digest`   To learn more, see [Get Started with the Atlas Administration API](https://www.mongodb.com/docs/atlas/configure-api-access/). For support, see [MongoDB Support](https://www.mongodb.com/support/get-started)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
)

// checks if the AutoScaling type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutoScaling{}

// AutoScaling Range of instance sizes to which your cluster can scale.
type AutoScaling struct {
	Compute *ComputeAutoScaling `json:"compute,omitempty"`
	// Flag that indicates whether someone enabled disk auto-scaling for this cluster.
	DiskGBEnabled *bool `json:"diskGBEnabled,omitempty"`
}

// NewAutoScaling instantiates a new AutoScaling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoScaling() *AutoScaling {
	this := AutoScaling{}
	return &this
}

// NewAutoScalingWithDefaults instantiates a new AutoScaling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoScalingWithDefaults() *AutoScaling {
	this := AutoScaling{}
	return &this
}

// GetCompute returns the Compute field value if set, zero value otherwise.
func (o *AutoScaling) GetCompute() ComputeAutoScaling {
	if o == nil || IsNil(o.Compute) {
		var ret ComputeAutoScaling
		return ret
	}
	return *o.Compute
}

// GetComputeOk returns a tuple with the Compute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoScaling) GetComputeOk() (*ComputeAutoScaling, bool) {
	if o == nil || IsNil(o.Compute) {
		return nil, false
	}
	return o.Compute, true
}

// HasCompute returns a boolean if a field has been set.
func (o *AutoScaling) HasCompute() bool {
	if o != nil && !IsNil(o.Compute) {
		return true
	}

	return false
}

// SetCompute gets a reference to the given ComputeAutoScaling and assigns it to the Compute field.
func (o *AutoScaling) SetCompute(v ComputeAutoScaling) {
	o.Compute = &v
}

// GetDiskGBEnabled returns the DiskGBEnabled field value if set, zero value otherwise.
func (o *AutoScaling) GetDiskGBEnabled() bool {
	if o == nil || IsNil(o.DiskGBEnabled) {
		var ret bool
		return ret
	}
	return *o.DiskGBEnabled
}

// GetDiskGBEnabledOk returns a tuple with the DiskGBEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoScaling) GetDiskGBEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DiskGBEnabled) {
		return nil, false
	}
	return o.DiskGBEnabled, true
}

// HasDiskGBEnabled returns a boolean if a field has been set.
func (o *AutoScaling) HasDiskGBEnabled() bool {
	if o != nil && !IsNil(o.DiskGBEnabled) {
		return true
	}

	return false
}

// SetDiskGBEnabled gets a reference to the given bool and assigns it to the DiskGBEnabled field.
func (o *AutoScaling) SetDiskGBEnabled(v bool) {
	o.DiskGBEnabled = &v
}

func (o AutoScaling) MarshalJSONWithoutReadOnly() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}
func (o AutoScaling) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Compute) {
		toSerialize["compute"] = o.Compute
	}
	if !IsNil(o.DiskGBEnabled) {
		toSerialize["diskGBEnabled"] = o.DiskGBEnabled
	}
	return toSerialize, nil
}

type NullableAutoScaling struct {
	value *AutoScaling
	isSet bool
}

func (v NullableAutoScaling) Get() *AutoScaling {
	return v.value
}

func (v *NullableAutoScaling) Set(val *AutoScaling) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoScaling) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoScaling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoScaling(val *AutoScaling) *NullableAutoScaling {
	return &NullableAutoScaling{value: val, isSet: true}
}

func (v NullableAutoScaling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoScaling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


