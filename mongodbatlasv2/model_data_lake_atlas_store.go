/*
API version: 2.0~61723fd7f1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
)

// checks if the DataLakeAtlasStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataLakeAtlasStore{}

// DataLakeAtlasStore struct for DataLakeAtlasStore
type DataLakeAtlasStore struct {
	// Human-readable label of the MongoDB Cloud cluster on which the store is based.
	ClusterName *string `json:"clusterName,omitempty"`
	// Unique 24-hexadecimal digit string that identifies the project.
	ProjectId *string `json:"projectId,omitempty"`
	ReadPreference *DataLakeAtlasStoreReadPreference `json:"readPreference,omitempty"`
	// Human-readable label that identifies the data store. The **databases.[n].collections.[n].dataSources.[n].storeName** field references this values as part of the mapping configuration. To use MongoDB Cloud as a data store, the data lake requires a serverless instance or an `M10` or higher cluster.
	Name *string `json:"name,omitempty"`
	Provider string `json:"provider"`
}

// NewDataLakeAtlasStore instantiates a new DataLakeAtlasStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLakeAtlasStore(provider string) *DataLakeAtlasStore {
	this := DataLakeAtlasStore{}
	this.Provider = provider
	return &this
}

// NewDataLakeAtlasStoreWithDefaults instantiates a new DataLakeAtlasStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLakeAtlasStoreWithDefaults() *DataLakeAtlasStore {
	this := DataLakeAtlasStore{}
	return &this
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *DataLakeAtlasStore) GetClusterName() string {
	if o == nil || IsNil(o.ClusterName) {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStore) GetClusterNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterName) {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *DataLakeAtlasStore) HasClusterName() bool {
	if o != nil && !IsNil(o.ClusterName) {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *DataLakeAtlasStore) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *DataLakeAtlasStore) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStore) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *DataLakeAtlasStore) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *DataLakeAtlasStore) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetReadPreference returns the ReadPreference field value if set, zero value otherwise.
func (o *DataLakeAtlasStore) GetReadPreference() DataLakeAtlasStoreReadPreference {
	if o == nil || IsNil(o.ReadPreference) {
		var ret DataLakeAtlasStoreReadPreference
		return ret
	}
	return *o.ReadPreference
}

// GetReadPreferenceOk returns a tuple with the ReadPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStore) GetReadPreferenceOk() (*DataLakeAtlasStoreReadPreference, bool) {
	if o == nil || IsNil(o.ReadPreference) {
		return nil, false
	}
	return o.ReadPreference, true
}

// HasReadPreference returns a boolean if a field has been set.
func (o *DataLakeAtlasStore) HasReadPreference() bool {
	if o != nil && !IsNil(o.ReadPreference) {
		return true
	}

	return false
}

// SetReadPreference gets a reference to the given DataLakeAtlasStoreReadPreference and assigns it to the ReadPreference field.
func (o *DataLakeAtlasStore) SetReadPreference(v DataLakeAtlasStoreReadPreference) {
	o.ReadPreference = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataLakeAtlasStore) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStore) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataLakeAtlasStore) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataLakeAtlasStore) SetName(v string) {
	o.Name = &v
}

// GetProvider returns the Provider field value
func (o *DataLakeAtlasStore) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *DataLakeAtlasStore) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *DataLakeAtlasStore) SetProvider(v string) {
	o.Provider = v
}

func (o DataLakeAtlasStore) MarshalJSONWithoutReadOnly() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}
func (o DataLakeAtlasStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterName) {
		toSerialize["clusterName"] = o.ClusterName
	}
	if !IsNil(o.ReadPreference) {
		toSerialize["readPreference"] = o.ReadPreference
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["provider"] = o.Provider
	return toSerialize, nil
}

type NullableDataLakeAtlasStore struct {
	value *DataLakeAtlasStore
	isSet bool
}

func (v NullableDataLakeAtlasStore) Get() *DataLakeAtlasStore {
	return v.value
}

func (v *NullableDataLakeAtlasStore) Set(val *DataLakeAtlasStore) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLakeAtlasStore) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLakeAtlasStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLakeAtlasStore(val *DataLakeAtlasStore) *NullableDataLakeAtlasStore {
	return &NullableDataLakeAtlasStore{value: val, isSet: true}
}

func (v NullableDataLakeAtlasStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLakeAtlasStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


