/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
	"fmt"
)

// ClusterProviderSettings - Group of cloud provider settings that configure the provisioned MongoDB hosts.
type ClusterProviderSettings struct {
	AWSProviderSettings *AWSProviderSettings
	AzureProviderSettings *AzureProviderSettings
	FreeProviderSettings *FreeProviderSettings
	GCPProviderSettings *GCPProviderSettings
}

// AWSProviderSettingsAsClusterProviderSettings is a convenience function that returns AWSProviderSettings wrapped in ClusterProviderSettings
func AWSProviderSettingsAsClusterProviderSettings(v *AWSProviderSettings) ClusterProviderSettings {
	return ClusterProviderSettings{
		AWSProviderSettings: v,
	}
}

// AzureProviderSettingsAsClusterProviderSettings is a convenience function that returns AzureProviderSettings wrapped in ClusterProviderSettings
func AzureProviderSettingsAsClusterProviderSettings(v *AzureProviderSettings) ClusterProviderSettings {
	return ClusterProviderSettings{
		AzureProviderSettings: v,
	}
}

// FreeProviderSettingsAsClusterProviderSettings is a convenience function that returns FreeProviderSettings wrapped in ClusterProviderSettings
func FreeProviderSettingsAsClusterProviderSettings(v *FreeProviderSettings) ClusterProviderSettings {
	return ClusterProviderSettings{
		FreeProviderSettings: v,
	}
}

// GCPProviderSettingsAsClusterProviderSettings is a convenience function that returns GCPProviderSettings wrapped in ClusterProviderSettings
func GCPProviderSettingsAsClusterProviderSettings(v *GCPProviderSettings) ClusterProviderSettings {
	return ClusterProviderSettings{
		GCPProviderSettings: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ClusterProviderSettings) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'AWS'
	if jsonDict["providerName"] == "AWS" {
		// try to unmarshal JSON data into AWSProviderSettings
		err = json.Unmarshal(data, &dst.AWSProviderSettings)
		if err == nil {
			return nil // data stored in dst.AWSProviderSettings, return on the first match
		} else {
			dst.AWSProviderSettings = nil
			return fmt.Errorf("failed to unmarshal ClusterProviderSettings as AWSProviderSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AWSProviderSettings'
	if jsonDict["providerName"] == "AWSProviderSettings" {
		// try to unmarshal JSON data into AWSProviderSettings
		err = json.Unmarshal(data, &dst.AWSProviderSettings)
		if err == nil {
			return nil // data stored in dst.AWSProviderSettings, return on the first match
		} else {
			dst.AWSProviderSettings = nil
			return fmt.Errorf("failed to unmarshal ClusterProviderSettings as AWSProviderSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AZURE'
	if jsonDict["providerName"] == "AZURE" {
		// try to unmarshal JSON data into AzureProviderSettings
		err = json.Unmarshal(data, &dst.AzureProviderSettings)
		if err == nil {
			return nil // data stored in dst.AzureProviderSettings, return on the first match
		} else {
			dst.AzureProviderSettings = nil
			return fmt.Errorf("failed to unmarshal ClusterProviderSettings as AzureProviderSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzureProviderSettings'
	if jsonDict["providerName"] == "AzureProviderSettings" {
		// try to unmarshal JSON data into AzureProviderSettings
		err = json.Unmarshal(data, &dst.AzureProviderSettings)
		if err == nil {
			return nil // data stored in dst.AzureProviderSettings, return on the first match
		} else {
			dst.AzureProviderSettings = nil
			return fmt.Errorf("failed to unmarshal ClusterProviderSettings as AzureProviderSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'FreeProviderSettings'
	if jsonDict["providerName"] == "FreeProviderSettings" {
		// try to unmarshal JSON data into FreeProviderSettings
		err = json.Unmarshal(data, &dst.FreeProviderSettings)
		if err == nil {
			return nil // data stored in dst.FreeProviderSettings, return on the first match
		} else {
			dst.FreeProviderSettings = nil
			return fmt.Errorf("failed to unmarshal ClusterProviderSettings as FreeProviderSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCP'
	if jsonDict["providerName"] == "GCP" {
		// try to unmarshal JSON data into GCPProviderSettings
		err = json.Unmarshal(data, &dst.GCPProviderSettings)
		if err == nil {
			return nil // data stored in dst.GCPProviderSettings, return on the first match
		} else {
			dst.GCPProviderSettings = nil
			return fmt.Errorf("failed to unmarshal ClusterProviderSettings as GCPProviderSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GCPProviderSettings'
	if jsonDict["providerName"] == "GCPProviderSettings" {
		// try to unmarshal JSON data into GCPProviderSettings
		err = json.Unmarshal(data, &dst.GCPProviderSettings)
		if err == nil {
			return nil // data stored in dst.GCPProviderSettings, return on the first match
		} else {
			dst.GCPProviderSettings = nil
			return fmt.Errorf("failed to unmarshal ClusterProviderSettings as GCPProviderSettings: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TENANT'
	if jsonDict["providerName"] == "TENANT" {
		// try to unmarshal JSON data into FreeProviderSettings
		err = json.Unmarshal(data, &dst.FreeProviderSettings)
		if err == nil {
			return nil // data stored in dst.FreeProviderSettings, return on the first match
		} else {
			dst.FreeProviderSettings = nil
			return fmt.Errorf("failed to unmarshal ClusterProviderSettings as FreeProviderSettings: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ClusterProviderSettings) MarshalJSON() ([]byte, error) {
	if src.AWSProviderSettings != nil {
		return json.Marshal(&src.AWSProviderSettings)
	}

	if src.AzureProviderSettings != nil {
		return json.Marshal(&src.AzureProviderSettings)
	}

	if src.FreeProviderSettings != nil {
		return json.Marshal(&src.FreeProviderSettings)
	}

	if src.GCPProviderSettings != nil {
		return json.Marshal(&src.GCPProviderSettings)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ClusterProviderSettings) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AWSProviderSettings != nil {
		return obj.AWSProviderSettings
	}

	if obj.AzureProviderSettings != nil {
		return obj.AzureProviderSettings
	}

	if obj.FreeProviderSettings != nil {
		return obj.FreeProviderSettings
	}

	if obj.GCPProviderSettings != nil {
		return obj.GCPProviderSettings
	}

	// all schemas are nil
	return nil
}

type NullableClusterProviderSettings struct {
	value *ClusterProviderSettings
	isSet bool
}

func (v NullableClusterProviderSettings) Get() *ClusterProviderSettings {
	return v.value
}

func (v *NullableClusterProviderSettings) Set(val *ClusterProviderSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterProviderSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterProviderSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterProviderSettings(val *ClusterProviderSettings) *NullableClusterProviderSettings {
	return &NullableClusterProviderSettings{value: val, isSet: true}
}

func (v NullableClusterProviderSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterProviderSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


