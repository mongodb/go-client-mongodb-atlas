/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package latest

import (
	"encoding/json"
)

// checks if the MongoDBAccessLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MongoDBAccessLogs{}

// MongoDBAccessLogs Authentication attempt, one per object, made against the cluster.
type MongoDBAccessLogs struct {
	// Flag that indicates whether the response should return successful authentication attempts only.
	AuthResult *bool `json:"authResult,omitempty"`
	// Database against which someone attempted to authenticate.
	AuthSource *string `json:"authSource,omitempty"`
	// Reason that the authentication failed. Null if authentication succeeded.
	FailureReason *string `json:"failureReason,omitempty"`
	// Unique 24-hexadecimal character string that identifies the project.
	GroupId *string `json:"groupId,omitempty"`
	// Human-readable label that identifies the hostname of the target node that received the authentication attempt.
	Hostname *string `json:"hostname,omitempty"`
	// Internet Protocol address that attempted to authenticate with the database.
	IpAddress *string `json:"ipAddress,omitempty"`
	// Text of the host log concerning the authentication attempt.
	LogLine *string `json:"logLine,omitempty"`
	// Date and time when someone made this authentication attempt. MongoDB Cloud represents this timestamp in ISO 8601 format in UTC.
	Timestamp *string `json:"timestamp,omitempty"`
	// Username used to authenticate against the database.
	Username *string `json:"username,omitempty"`
}

// NewMongoDBAccessLogs instantiates a new MongoDBAccessLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongoDBAccessLogs() *MongoDBAccessLogs {
	this := MongoDBAccessLogs{}
	return &this
}

// NewMongoDBAccessLogsWithDefaults instantiates a new MongoDBAccessLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongoDBAccessLogsWithDefaults() *MongoDBAccessLogs {
	this := MongoDBAccessLogs{}
	return &this
}

// GetAuthResult returns the AuthResult field value if set, zero value otherwise.
func (o *MongoDBAccessLogs) GetAuthResult() bool {
	if o == nil || IsNil(o.AuthResult) {
		var ret bool
		return ret
	}
	return *o.AuthResult
}

// GetAuthResultOk returns a tuple with the AuthResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBAccessLogs) GetAuthResultOk() (*bool, bool) {
	if o == nil || IsNil(o.AuthResult) {
		return nil, false
	}
	return o.AuthResult, true
}

// HasAuthResult returns a boolean if a field has been set.
func (o *MongoDBAccessLogs) HasAuthResult() bool {
	if o != nil && !IsNil(o.AuthResult) {
		return true
	}

	return false
}

// SetAuthResult gets a reference to the given bool and assigns it to the AuthResult field.
func (o *MongoDBAccessLogs) SetAuthResult(v bool) {
	o.AuthResult = &v
}

// GetAuthSource returns the AuthSource field value if set, zero value otherwise.
func (o *MongoDBAccessLogs) GetAuthSource() string {
	if o == nil || IsNil(o.AuthSource) {
		var ret string
		return ret
	}
	return *o.AuthSource
}

// GetAuthSourceOk returns a tuple with the AuthSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBAccessLogs) GetAuthSourceOk() (*string, bool) {
	if o == nil || IsNil(o.AuthSource) {
		return nil, false
	}
	return o.AuthSource, true
}

// HasAuthSource returns a boolean if a field has been set.
func (o *MongoDBAccessLogs) HasAuthSource() bool {
	if o != nil && !IsNil(o.AuthSource) {
		return true
	}

	return false
}

// SetAuthSource gets a reference to the given string and assigns it to the AuthSource field.
func (o *MongoDBAccessLogs) SetAuthSource(v string) {
	o.AuthSource = &v
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise.
func (o *MongoDBAccessLogs) GetFailureReason() string {
	if o == nil || IsNil(o.FailureReason) {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBAccessLogs) GetFailureReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailureReason) {
		return nil, false
	}
	return o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *MongoDBAccessLogs) HasFailureReason() bool {
	if o != nil && !IsNil(o.FailureReason) {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *MongoDBAccessLogs) SetFailureReason(v string) {
	o.FailureReason = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *MongoDBAccessLogs) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBAccessLogs) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *MongoDBAccessLogs) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *MongoDBAccessLogs) SetGroupId(v string) {
	o.GroupId = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *MongoDBAccessLogs) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBAccessLogs) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *MongoDBAccessLogs) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *MongoDBAccessLogs) SetHostname(v string) {
	o.Hostname = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *MongoDBAccessLogs) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBAccessLogs) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *MongoDBAccessLogs) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *MongoDBAccessLogs) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetLogLine returns the LogLine field value if set, zero value otherwise.
func (o *MongoDBAccessLogs) GetLogLine() string {
	if o == nil || IsNil(o.LogLine) {
		var ret string
		return ret
	}
	return *o.LogLine
}

// GetLogLineOk returns a tuple with the LogLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBAccessLogs) GetLogLineOk() (*string, bool) {
	if o == nil || IsNil(o.LogLine) {
		return nil, false
	}
	return o.LogLine, true
}

// HasLogLine returns a boolean if a field has been set.
func (o *MongoDBAccessLogs) HasLogLine() bool {
	if o != nil && !IsNil(o.LogLine) {
		return true
	}

	return false
}

// SetLogLine gets a reference to the given string and assigns it to the LogLine field.
func (o *MongoDBAccessLogs) SetLogLine(v string) {
	o.LogLine = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *MongoDBAccessLogs) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBAccessLogs) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *MongoDBAccessLogs) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *MongoDBAccessLogs) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *MongoDBAccessLogs) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBAccessLogs) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *MongoDBAccessLogs) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *MongoDBAccessLogs) SetUsername(v string) {
	o.Username = &v
}

func (o MongoDBAccessLogs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MongoDBAccessLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthResult) {
		toSerialize["authResult"] = o.AuthResult
	}
	// skip: authSource is readOnly
	// skip: failureReason is readOnly
	// skip: groupId is readOnly
	// skip: hostname is readOnly
	// skip: ipAddress is readOnly
	// skip: logLine is readOnly
	// skip: timestamp is readOnly
	// skip: username is readOnly
	return toSerialize, nil
}

type NullableMongoDBAccessLogs struct {
	value *MongoDBAccessLogs
	isSet bool
}

func (v NullableMongoDBAccessLogs) Get() *MongoDBAccessLogs {
	return v.value
}

func (v *NullableMongoDBAccessLogs) Set(val *MongoDBAccessLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableMongoDBAccessLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableMongoDBAccessLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongoDBAccessLogs(val *MongoDBAccessLogs) *NullableMongoDBAccessLogs {
	return &NullableMongoDBAccessLogs{value: val, isSet: true}
}

func (v NullableMongoDBAccessLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongoDBAccessLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


