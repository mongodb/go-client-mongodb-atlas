/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas.   The Atlas Administration API authenticates using HTTP Digest Authentication. Provide a programmatic API public key and corresponding private key as the username and password when constructing the HTTP request. For example, with [curl](https://en.wikipedia.org/wiki/CURL): `curl --user \"{PUBLIC-KEY}:{PRIVATE-KEY}\" --digest`   To learn more, see [Get Started with the Atlas Administration API](https://www.mongodb.com/docs/atlas/configure-api-access/). For support, see [MongoDB Support](https://www.mongodb.com/support/get-started)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
)

// checks if the NetPeerRequestBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetPeerRequestBase{}

// NetPeerRequestBase struct for NetPeerRequestBase
type NetPeerRequestBase struct {
	// Unique 24-hexadecimal digit string that identifies the MongoDB Cloud network container that contains the specified network peering connection.
	ContainerId string `json:"containerId"`
	// Cloud service provider that determines the needed settings to configure the network connection for a virtual private connection.
	ProviderName string `json:"providerName"`
}

// NewNetPeerRequestBase instantiates a new NetPeerRequestBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetPeerRequestBase(containerId string, providerName string) *NetPeerRequestBase {
	this := NetPeerRequestBase{}
	this.ContainerId = containerId
	this.ProviderName = providerName
	return &this
}

// NewNetPeerRequestBaseWithDefaults instantiates a new NetPeerRequestBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetPeerRequestBaseWithDefaults() *NetPeerRequestBase {
	this := NetPeerRequestBase{}
	return &this
}

// GetContainerId returns the ContainerId field value
func (o *NetPeerRequestBase) GetContainerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerId
}

// GetContainerIdOk returns a tuple with the ContainerId field value
// and a boolean to check if the value has been set.
func (o *NetPeerRequestBase) GetContainerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContainerId, true
}

// SetContainerId sets field value
func (o *NetPeerRequestBase) SetContainerId(v string) {
	o.ContainerId = v
}

// GetProviderName returns the ProviderName field value
func (o *NetPeerRequestBase) GetProviderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value
// and a boolean to check if the value has been set.
func (o *NetPeerRequestBase) GetProviderNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderName, true
}

// SetProviderName sets field value
func (o *NetPeerRequestBase) SetProviderName(v string) {
	o.ProviderName = v
}

func (o NetPeerRequestBase) MarshalJSONWithoutReadOnly() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}
func (o NetPeerRequestBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["containerId"] = o.ContainerId
	toSerialize["providerName"] = o.ProviderName
	return toSerialize, nil
}

type NullableNetPeerRequestBase struct {
	value *NetPeerRequestBase
	isSet bool
}

func (v NullableNetPeerRequestBase) Get() *NetPeerRequestBase {
	return v.value
}

func (v *NullableNetPeerRequestBase) Set(val *NetPeerRequestBase) {
	v.value = val
	v.isSet = true
}

func (v NullableNetPeerRequestBase) IsSet() bool {
	return v.isSet
}

func (v *NullableNetPeerRequestBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetPeerRequestBase(val *NetPeerRequestBase) *NullableNetPeerRequestBase {
	return &NullableNetPeerRequestBase{value: val, isSet: true}
}

func (v NullableNetPeerRequestBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetPeerRequestBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


