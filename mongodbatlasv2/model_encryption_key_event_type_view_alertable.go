/*
API version: 2.0~61723fd7f1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
	"fmt"
)

// EncryptionKeyEventTypeViewAlertable Event type that triggers an alert.
type EncryptionKeyEventTypeViewAlertable string

// List of EncryptionKeyEventTypeViewAlertable
const (
	ENCRYPTIONKEYEVENTTYPEVIEWALERTABLE_AWS_ENCRYPTION_KEY_NEEDS_ROTATION EncryptionKeyEventTypeViewAlertable = "AWS_ENCRYPTION_KEY_NEEDS_ROTATION"
	ENCRYPTIONKEYEVENTTYPEVIEWALERTABLE_AZURE_ENCRYPTION_KEY_NEEDS_ROTATION EncryptionKeyEventTypeViewAlertable = "AZURE_ENCRYPTION_KEY_NEEDS_ROTATION"
	ENCRYPTIONKEYEVENTTYPEVIEWALERTABLE_GCP_ENCRYPTION_KEY_NEEDS_ROTATION EncryptionKeyEventTypeViewAlertable = "GCP_ENCRYPTION_KEY_NEEDS_ROTATION"
)

// All allowed values of EncryptionKeyEventTypeViewAlertable enum
var AllowedEncryptionKeyEventTypeViewAlertableEnumValues = []EncryptionKeyEventTypeViewAlertable{
	"AWS_ENCRYPTION_KEY_NEEDS_ROTATION",
	"AZURE_ENCRYPTION_KEY_NEEDS_ROTATION",
	"GCP_ENCRYPTION_KEY_NEEDS_ROTATION",
}

func (v *EncryptionKeyEventTypeViewAlertable) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EncryptionKeyEventTypeViewAlertable(value)
	for _, existing := range AllowedEncryptionKeyEventTypeViewAlertableEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EncryptionKeyEventTypeViewAlertable", value)
}

// NewEncryptionKeyEventTypeViewAlertableFromValue returns a pointer to a valid EncryptionKeyEventTypeViewAlertable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEncryptionKeyEventTypeViewAlertableFromValue(v string) (*EncryptionKeyEventTypeViewAlertable, error) {
	ev := EncryptionKeyEventTypeViewAlertable(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EncryptionKeyEventTypeViewAlertable: valid values are %v", v, AllowedEncryptionKeyEventTypeViewAlertableEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EncryptionKeyEventTypeViewAlertable) IsValid() bool {
	for _, existing := range AllowedEncryptionKeyEventTypeViewAlertableEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EncryptionKeyEventTypeViewAlertable value
func (v EncryptionKeyEventTypeViewAlertable) Ptr() *EncryptionKeyEventTypeViewAlertable {
	return &v
}


