/*
API version: 2.0~c3d717f799
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
	"fmt"
)

// ResourceEventType Unique identifier of event type.
type ResourceEventType string

// List of ResourceEventType
const (
	RESOURCEEVENTTYPE_TAGS_MODIFIED ResourceEventType = "TAGS_MODIFIED"
)

// All allowed values of ResourceEventType enum
var AllowedResourceEventTypeEnumValues = []ResourceEventType{
	"TAGS_MODIFIED",
}

func (v *ResourceEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceEventType(value)
	for _, existing := range AllowedResourceEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceEventType", value)
}

// NewResourceEventTypeFromValue returns a pointer to a valid ResourceEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceEventTypeFromValue(v string) (*ResourceEventType, error) {
	ev := ResourceEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceEventType: valid values are %v", v, AllowedResourceEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceEventType) IsValid() bool {
	for _, existing := range AllowedResourceEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceEventType value
func (v ResourceEventType) Ptr() *ResourceEventType {
	return &v
}


