/*
API version: 2.0~c3d717f799
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mongodbatlasv2

import (
	"encoding/json"
)

// checks if the Tokenizerwhitespace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tokenizerwhitespace{}

// Tokenizerwhitespace Tokenizer that creates tokens based on occurrences of whitespace between words.
type Tokenizerwhitespace struct {
	// Maximum number of characters in a single token. Tokens greater than this length are split at this length into multiple tokens.
	MaxTokenLength *int32 `json:"maxTokenLength,omitempty"`
	// Human-readable label that identifies this tokenizer type.
	Type string `json:"type"`
}

// NewTokenizerwhitespace instantiates a new Tokenizerwhitespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizerwhitespace(type_ string) *Tokenizerwhitespace {
	this := Tokenizerwhitespace{}
	var maxTokenLength int32 = 255
	this.MaxTokenLength = &maxTokenLength
	this.Type = type_
	return &this
}

// NewTokenizerwhitespaceWithDefaults instantiates a new Tokenizerwhitespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizerwhitespaceWithDefaults() *Tokenizerwhitespace {
	this := Tokenizerwhitespace{}
	var maxTokenLength int32 = 255
	this.MaxTokenLength = &maxTokenLength
	return &this
}

// GetMaxTokenLength returns the MaxTokenLength field value if set, zero value otherwise.
func (o *Tokenizerwhitespace) GetMaxTokenLength() int32 {
	if o == nil || IsNil(o.MaxTokenLength) {
		var ret int32
		return ret
	}
	return *o.MaxTokenLength
}

// GetMaxTokenLengthOk returns a tuple with the MaxTokenLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tokenizerwhitespace) GetMaxTokenLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTokenLength) {
		return nil, false
	}
	return o.MaxTokenLength, true
}

// HasMaxTokenLength returns a boolean if a field has been set.
func (o *Tokenizerwhitespace) HasMaxTokenLength() bool {
	if o != nil && !IsNil(o.MaxTokenLength) {
		return true
	}

	return false
}

// SetMaxTokenLength gets a reference to the given int32 and assigns it to the MaxTokenLength field.
func (o *Tokenizerwhitespace) SetMaxTokenLength(v int32) {
	o.MaxTokenLength = &v
}

// GetType returns the Type field value
func (o *Tokenizerwhitespace) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Tokenizerwhitespace) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Tokenizerwhitespace) SetType(v string) {
	o.Type = v
}

func (o Tokenizerwhitespace) MarshalJSONWithoutReadOnly() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}
func (o Tokenizerwhitespace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxTokenLength) {
		toSerialize["maxTokenLength"] = o.MaxTokenLength
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableTokenizerwhitespace struct {
	value *Tokenizerwhitespace
	isSet bool
}

func (v NullableTokenizerwhitespace) Get() *Tokenizerwhitespace {
	return v.value
}

func (v *NullableTokenizerwhitespace) Set(val *Tokenizerwhitespace) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizerwhitespace) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizerwhitespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizerwhitespace(val *Tokenizerwhitespace) *NullableTokenizerwhitespace {
	return &NullableTokenizerwhitespace{value: val, isSet: true}
}

func (v NullableTokenizerwhitespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizerwhitespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


