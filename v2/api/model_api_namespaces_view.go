/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ApiNamespacesView struct for ApiNamespacesView
type ApiNamespacesView struct {
	// List that contains each combination of database, collection, and type on the specified host.
	Namespaces []ApiNamespaceObjView `json:"namespaces,omitempty"`
}

// NewApiNamespacesView instantiates a new ApiNamespacesView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiNamespacesView() *ApiNamespacesView {
	this := ApiNamespacesView{}
	return &this
}

// NewApiNamespacesViewWithDefaults instantiates a new ApiNamespacesView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiNamespacesViewWithDefaults() *ApiNamespacesView {
	this := ApiNamespacesView{}
	return &this
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *ApiNamespacesView) GetNamespaces() []ApiNamespaceObjView {
	if o == nil || o.Namespaces == nil {
		var ret []ApiNamespaceObjView
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiNamespacesView) GetNamespacesOk() ([]ApiNamespaceObjView, bool) {
	if o == nil || o.Namespaces == nil {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *ApiNamespacesView) HasNamespaces() bool {
	if o != nil && o.Namespaces != nil {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []ApiNamespaceObjView and assigns it to the Namespaces field.
func (o *ApiNamespacesView) SetNamespaces(v []ApiNamespaceObjView) {
	o.Namespaces = v
}

func (o ApiNamespacesView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespaces != nil {
		toSerialize["namespaces"] = o.Namespaces
	}
	return json.Marshal(toSerialize)
}

type NullableApiNamespacesView struct {
	value *ApiNamespacesView
	isSet bool
}

func (v NullableApiNamespacesView) Get() *ApiNamespacesView {
	return v.value
}

func (v *NullableApiNamespacesView) Set(val *ApiNamespacesView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiNamespacesView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiNamespacesView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiNamespacesView(val *ApiNamespacesView) *NullableApiNamespacesView {
	return &NullableApiNamespacesView{value: val, isSet: true}
}

func (v NullableApiNamespacesView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiNamespacesView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


