/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// TokenFiltersnowballStemming Filter that stems tokens using a Snowball-generated stemmer.
type TokenFiltersnowballStemming struct {
	// Snowball-generated stemmer to use.
	StemmerName string `json:"stemmerName"`
	// Human-readable label that identifies this token filter type.
	Type string `json:"type"`
}

// NewTokenFiltersnowballStemming instantiates a new TokenFiltersnowballStemming object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenFiltersnowballStemming() *TokenFiltersnowballStemming {
	this := TokenFiltersnowballStemming{}
	return &this
}

// NewTokenFiltersnowballStemmingWithDefaults instantiates a new TokenFiltersnowballStemming object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenFiltersnowballStemmingWithDefaults() *TokenFiltersnowballStemming {
	this := TokenFiltersnowballStemming{}
	return &this
}

// GetStemmerName returns the StemmerName field value
func (o *TokenFiltersnowballStemming) GetStemmerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StemmerName
}

// GetStemmerNameOk returns a tuple with the StemmerName field value
// and a boolean to check if the value has been set.
func (o *TokenFiltersnowballStemming) GetStemmerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StemmerName, true
}

// SetStemmerName sets field value
func (o *TokenFiltersnowballStemming) SetStemmerName(v string) {
	o.StemmerName = v
}

// GetType returns the Type field value
func (o *TokenFiltersnowballStemming) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TokenFiltersnowballStemming) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TokenFiltersnowballStemming) SetType(v string) {
	o.Type = v
}

func (o TokenFiltersnowballStemming) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["stemmerName"] = o.StemmerName
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTokenFiltersnowballStemming struct {
	value *TokenFiltersnowballStemming
	isSet bool
}

func (v NullableTokenFiltersnowballStemming) Get() *TokenFiltersnowballStemming {
	return v.value
}

func (v *NullableTokenFiltersnowballStemming) Set(val *TokenFiltersnowballStemming) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenFiltersnowballStemming) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenFiltersnowballStemming) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenFiltersnowballStemming(val *TokenFiltersnowballStemming) *NullableTokenFiltersnowballStemming {
	return &NullableTokenFiltersnowballStemming{value: val, isSet: true}
}

func (v NullableTokenFiltersnowballStemming) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenFiltersnowballStemming) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


