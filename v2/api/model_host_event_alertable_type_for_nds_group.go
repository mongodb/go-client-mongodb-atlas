/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// HostEventAlertableTypeForNdsGroup Incident that triggered this alert.
type HostEventAlertableTypeForNdsGroup string

// List of HostEventAlertableTypeForNdsGroup
const (
	HOSTEVENTALERTABLETYPEFORNDSGROUP_DOWN HostEventAlertableTypeForNdsGroup = "HOST_DOWN"
	HOSTEVENTALERTABLETYPEFORNDSGROUP_HAS_INDEX_SUGGESTIONS HostEventAlertableTypeForNdsGroup = "HOST_HAS_INDEX_SUGGESTIONS"
	HOSTEVENTALERTABLETYPEFORNDSGROUP_MONGOT_CRASHING_OOM HostEventAlertableTypeForNdsGroup = "HOST_MONGOT_CRASHING_OOM"
	HOSTEVENTALERTABLETYPEFORNDSGROUP_DISK_SPACE_INSUFFICIENT_FOR_SEARCH_INDEX_REBUILD HostEventAlertableTypeForNdsGroup = "HOST_DISK_SPACE_INSUFFICIENT_FOR_SEARCH_INDEX_REBUILD"
)

// All allowed values of HostEventAlertableTypeForNdsGroup enum
var AllowedHostEventAlertableTypeForNdsGroupEnumValues = []HostEventAlertableTypeForNdsGroup{
	"HOST_DOWN",
	"HOST_HAS_INDEX_SUGGESTIONS",
	"HOST_MONGOT_CRASHING_OOM",
	"HOST_DISK_SPACE_INSUFFICIENT_FOR_SEARCH_INDEX_REBUILD",
}

func (v *HostEventAlertableTypeForNdsGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HostEventAlertableTypeForNdsGroup(value)
	for _, existing := range AllowedHostEventAlertableTypeForNdsGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HostEventAlertableTypeForNdsGroup", value)
}

// NewHostEventAlertableTypeForNdsGroupFromValue returns a pointer to a valid HostEventAlertableTypeForNdsGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostEventAlertableTypeForNdsGroupFromValue(v string) (*HostEventAlertableTypeForNdsGroup, error) {
	ev := HostEventAlertableTypeForNdsGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HostEventAlertableTypeForNdsGroup: valid values are %v", v, AllowedHostEventAlertableTypeForNdsGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostEventAlertableTypeForNdsGroup) IsValid() bool {
	for _, existing := range AllowedHostEventAlertableTypeForNdsGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HostEventAlertableTypeForNdsGroup value
func (v HostEventAlertableTypeForNdsGroup) Ptr() *HostEventAlertableTypeForNdsGroup {
	return &v
}

type NullableHostEventAlertableTypeForNdsGroup struct {
	value *HostEventAlertableTypeForNdsGroup
	isSet bool
}

func (v NullableHostEventAlertableTypeForNdsGroup) Get() *HostEventAlertableTypeForNdsGroup {
	return v.value
}

func (v *NullableHostEventAlertableTypeForNdsGroup) Set(val *HostEventAlertableTypeForNdsGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableHostEventAlertableTypeForNdsGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableHostEventAlertableTypeForNdsGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostEventAlertableTypeForNdsGroup(val *HostEventAlertableTypeForNdsGroup) *NullableHostEventAlertableTypeForNdsGroup {
	return &NullableHostEventAlertableTypeForNdsGroup{value: val, isSet: true}
}

func (v NullableHostEventAlertableTypeForNdsGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostEventAlertableTypeForNdsGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

