/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ApiOpsGenieViewAllOf struct for ApiOpsGenieViewAllOf
type ApiOpsGenieViewAllOf struct {
	// Key that allows MongoDB Cloud to access your Opsgenie account.  **NOTE**: After you create a notification which requires an API or integration key, the key appears partially redacted when you:  * View or edit the alert through the Atlas UI.  * Query the alert for the notification through the Atlas Administration API.
	ApiKey *string `json:"apiKey,omitempty"`
	// Two-letter code that indicates which regional URL MongoDB uses to access the Opsgenie API.
	Region *string `json:"region,omitempty"`
}

// NewApiOpsGenieViewAllOf instantiates a new ApiOpsGenieViewAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiOpsGenieViewAllOf() *ApiOpsGenieViewAllOf {
	this := ApiOpsGenieViewAllOf{}
	var region string = "US"
	this.Region = &region
	return &this
}

// NewApiOpsGenieViewAllOfWithDefaults instantiates a new ApiOpsGenieViewAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiOpsGenieViewAllOfWithDefaults() *ApiOpsGenieViewAllOf {
	this := ApiOpsGenieViewAllOf{}
	var region string = "US"
	this.Region = &region
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *ApiOpsGenieViewAllOf) GetApiKey() string {
	if o == nil || o.ApiKey == nil {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOpsGenieViewAllOf) GetApiKeyOk() (*string, bool) {
	if o == nil || o.ApiKey == nil {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *ApiOpsGenieViewAllOf) HasApiKey() bool {
	if o != nil && o.ApiKey != nil {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *ApiOpsGenieViewAllOf) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ApiOpsGenieViewAllOf) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOpsGenieViewAllOf) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ApiOpsGenieViewAllOf) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *ApiOpsGenieViewAllOf) SetRegion(v string) {
	o.Region = &v
}

func (o ApiOpsGenieViewAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiKey != nil {
		toSerialize["apiKey"] = o.ApiKey
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	return json.Marshal(toSerialize)
}

type NullableApiOpsGenieViewAllOf struct {
	value *ApiOpsGenieViewAllOf
	isSet bool
}

func (v NullableApiOpsGenieViewAllOf) Get() *ApiOpsGenieViewAllOf {
	return v.value
}

func (v *NullableApiOpsGenieViewAllOf) Set(val *ApiOpsGenieViewAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableApiOpsGenieViewAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableApiOpsGenieViewAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiOpsGenieViewAllOf(val *ApiOpsGenieViewAllOf) *NullableApiOpsGenieViewAllOf {
	return &NullableApiOpsGenieViewAllOf{value: val, isSet: true}
}

func (v NullableApiOpsGenieViewAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiOpsGenieViewAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


