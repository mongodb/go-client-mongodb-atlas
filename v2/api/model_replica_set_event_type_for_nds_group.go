/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ReplicaSetEventTypeForNdsGroup Unique identifier of event type.
type ReplicaSetEventTypeForNdsGroup string

// List of ReplicaSetEventTypeForNdsGroup
const (
	REPLICASETEVENTTYPEFORNDSGROUP_PRIMARY_ELECTED ReplicaSetEventTypeForNdsGroup = "PRIMARY_ELECTED"
	REPLICASETEVENTTYPEFORNDSGROUP_REPLICATION_OPLOG_WINDOW_HEALTHY ReplicaSetEventTypeForNdsGroup = "REPLICATION_OPLOG_WINDOW_HEALTHY"
	REPLICASETEVENTTYPEFORNDSGROUP_REPLICATION_OPLOG_WINDOW_RUNNING_OUT ReplicaSetEventTypeForNdsGroup = "REPLICATION_OPLOG_WINDOW_RUNNING_OUT"
	REPLICASETEVENTTYPEFORNDSGROUP_ONE_PRIMARY ReplicaSetEventTypeForNdsGroup = "ONE_PRIMARY"
	REPLICASETEVENTTYPEFORNDSGROUP_NO_PRIMARY ReplicaSetEventTypeForNdsGroup = "NO_PRIMARY"
	REPLICASETEVENTTYPEFORNDSGROUP_TOO_MANY_ELECTIONS ReplicaSetEventTypeForNdsGroup = "TOO_MANY_ELECTIONS"
)

// All allowed values of ReplicaSetEventTypeForNdsGroup enum
var AllowedReplicaSetEventTypeForNdsGroupEnumValues = []ReplicaSetEventTypeForNdsGroup{
	"PRIMARY_ELECTED",
	"REPLICATION_OPLOG_WINDOW_HEALTHY",
	"REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
	"ONE_PRIMARY",
	"NO_PRIMARY",
	"TOO_MANY_ELECTIONS",
}

func (v *ReplicaSetEventTypeForNdsGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicaSetEventTypeForNdsGroup(value)
	for _, existing := range AllowedReplicaSetEventTypeForNdsGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicaSetEventTypeForNdsGroup", value)
}

// NewReplicaSetEventTypeForNdsGroupFromValue returns a pointer to a valid ReplicaSetEventTypeForNdsGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicaSetEventTypeForNdsGroupFromValue(v string) (*ReplicaSetEventTypeForNdsGroup, error) {
	ev := ReplicaSetEventTypeForNdsGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicaSetEventTypeForNdsGroup: valid values are %v", v, AllowedReplicaSetEventTypeForNdsGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicaSetEventTypeForNdsGroup) IsValid() bool {
	for _, existing := range AllowedReplicaSetEventTypeForNdsGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicaSetEventTypeForNdsGroup value
func (v ReplicaSetEventTypeForNdsGroup) Ptr() *ReplicaSetEventTypeForNdsGroup {
	return &v
}

type NullableReplicaSetEventTypeForNdsGroup struct {
	value *ReplicaSetEventTypeForNdsGroup
	isSet bool
}

func (v NullableReplicaSetEventTypeForNdsGroup) Get() *ReplicaSetEventTypeForNdsGroup {
	return v.value
}

func (v *NullableReplicaSetEventTypeForNdsGroup) Set(val *ReplicaSetEventTypeForNdsGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicaSetEventTypeForNdsGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicaSetEventTypeForNdsGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicaSetEventTypeForNdsGroup(val *ReplicaSetEventTypeForNdsGroup) *NullableReplicaSetEventTypeForNdsGroup {
	return &NullableReplicaSetEventTypeForNdsGroup{value: val, isSet: true}
}

func (v NullableReplicaSetEventTypeForNdsGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicaSetEventTypeForNdsGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

