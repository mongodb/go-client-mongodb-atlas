/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// MaintenanceWindowConfigAuditType Unique identifier of event type.
type MaintenanceWindowConfigAuditType string

// List of MaintenanceWindowConfigAuditType
const (
	MAINTENANCEWINDOWCONFIGAUDITTYPE_ADDED_AUDIT MaintenanceWindowConfigAuditType = "MAINTENANCE_WINDOW_ADDED_AUDIT"
	MAINTENANCEWINDOWCONFIGAUDITTYPE_DELETED_AUDIT MaintenanceWindowConfigAuditType = "MAINTENANCE_WINDOW_DELETED_AUDIT"
	MAINTENANCEWINDOWCONFIGAUDITTYPE_CHANGED_AUDIT MaintenanceWindowConfigAuditType = "MAINTENANCE_WINDOW_CHANGED_AUDIT"
)

// All allowed values of MaintenanceWindowConfigAuditType enum
var AllowedMaintenanceWindowConfigAuditTypeEnumValues = []MaintenanceWindowConfigAuditType{
	"MAINTENANCE_WINDOW_ADDED_AUDIT",
	"MAINTENANCE_WINDOW_DELETED_AUDIT",
	"MAINTENANCE_WINDOW_CHANGED_AUDIT",
}

func (v *MaintenanceWindowConfigAuditType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MaintenanceWindowConfigAuditType(value)
	for _, existing := range AllowedMaintenanceWindowConfigAuditTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MaintenanceWindowConfigAuditType", value)
}

// NewMaintenanceWindowConfigAuditTypeFromValue returns a pointer to a valid MaintenanceWindowConfigAuditType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMaintenanceWindowConfigAuditTypeFromValue(v string) (*MaintenanceWindowConfigAuditType, error) {
	ev := MaintenanceWindowConfigAuditType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MaintenanceWindowConfigAuditType: valid values are %v", v, AllowedMaintenanceWindowConfigAuditTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MaintenanceWindowConfigAuditType) IsValid() bool {
	for _, existing := range AllowedMaintenanceWindowConfigAuditTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MaintenanceWindowConfigAuditType value
func (v MaintenanceWindowConfigAuditType) Ptr() *MaintenanceWindowConfigAuditType {
	return &v
}

type NullableMaintenanceWindowConfigAuditType struct {
	value *MaintenanceWindowConfigAuditType
	isSet bool
}

func (v NullableMaintenanceWindowConfigAuditType) Get() *MaintenanceWindowConfigAuditType {
	return v.value
}

func (v *NullableMaintenanceWindowConfigAuditType) Set(val *MaintenanceWindowConfigAuditType) {
	v.value = val
	v.isSet = true
}

func (v NullableMaintenanceWindowConfigAuditType) IsSet() bool {
	return v.isSet
}

func (v *NullableMaintenanceWindowConfigAuditType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaintenanceWindowConfigAuditType(val *MaintenanceWindowConfigAuditType) *NullableMaintenanceWindowConfigAuditType {
	return &NullableMaintenanceWindowConfigAuditType{value: val, isSet: true}
}

func (v NullableMaintenanceWindowConfigAuditType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaintenanceWindowConfigAuditType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

