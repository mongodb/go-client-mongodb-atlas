/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ApiOrganizationView struct for ApiOrganizationView
type ApiOrganizationView struct {
	// Unique 24-hexadecimal digit string that identifies the organization.
	Id *string `json:"id,omitempty"`
	// Flag that indicates whether this organization has been deleted.
	IsDeleted *bool `json:"isDeleted,omitempty"`
	// List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.
	Links []Link `json:"links,omitempty"`
	// Human-readable label that identifies the organization.
	Name string `json:"name"`
}

// NewApiOrganizationView instantiates a new ApiOrganizationView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiOrganizationView() *ApiOrganizationView {
	this := ApiOrganizationView{}
	return &this
}

// NewApiOrganizationViewWithDefaults instantiates a new ApiOrganizationView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiOrganizationViewWithDefaults() *ApiOrganizationView {
	this := ApiOrganizationView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiOrganizationView) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOrganizationView) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiOrganizationView) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiOrganizationView) SetId(v string) {
	o.Id = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *ApiOrganizationView) GetIsDeleted() bool {
	if o == nil || o.IsDeleted == nil {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOrganizationView) GetIsDeletedOk() (*bool, bool) {
	if o == nil || o.IsDeleted == nil {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *ApiOrganizationView) HasIsDeleted() bool {
	if o != nil && o.IsDeleted != nil {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *ApiOrganizationView) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ApiOrganizationView) GetLinks() []Link {
	if o == nil || o.Links == nil {
		var ret []Link
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOrganizationView) GetLinksOk() ([]Link, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ApiOrganizationView) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []Link and assigns it to the Links field.
func (o *ApiOrganizationView) SetLinks(v []Link) {
	o.Links = v
}

// GetName returns the Name field value
func (o *ApiOrganizationView) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiOrganizationView) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiOrganizationView) SetName(v string) {
	o.Name = v
}

func (o ApiOrganizationView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsDeleted != nil {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableApiOrganizationView struct {
	value *ApiOrganizationView
	isSet bool
}

func (v NullableApiOrganizationView) Get() *ApiOrganizationView {
	return v.value
}

func (v *NullableApiOrganizationView) Set(val *ApiOrganizationView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiOrganizationView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiOrganizationView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiOrganizationView(val *ApiOrganizationView) *NullableApiOrganizationView {
	return &NullableApiOrganizationView{value: val, isSet: true}
}

func (v NullableApiOrganizationView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiOrganizationView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


