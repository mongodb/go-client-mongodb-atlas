/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// ApiAvailableRegionView List of regions that this cloud provider supports for this instance size.
type ApiAvailableRegionView struct {
	// Flag that indicates whether the cloud provider sets this region as its default. AWS defaults to US_EAST_1, GCP defaults to CENTRAL_US, and AZURE defaults to US_WEST_2.
	Default *bool `json:"default,omitempty"`
	// Human-readable label that identifies the supported region.
	Name *string `json:"name,omitempty"`
}

// NewApiAvailableRegionView instantiates a new ApiAvailableRegionView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiAvailableRegionView() *ApiAvailableRegionView {
	this := ApiAvailableRegionView{}
	return &this
}

// NewApiAvailableRegionViewWithDefaults instantiates a new ApiAvailableRegionView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiAvailableRegionViewWithDefaults() *ApiAvailableRegionView {
	this := ApiAvailableRegionView{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *ApiAvailableRegionView) GetDefault() bool {
	if o == nil || o.Default == nil {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAvailableRegionView) GetDefaultOk() (*bool, bool) {
	if o == nil || o.Default == nil {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *ApiAvailableRegionView) HasDefault() bool {
	if o != nil && o.Default != nil {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *ApiAvailableRegionView) SetDefault(v bool) {
	o.Default = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiAvailableRegionView) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiAvailableRegionView) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiAvailableRegionView) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiAvailableRegionView) SetName(v string) {
	o.Name = &v
}

func (o ApiAvailableRegionView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Default != nil {
		toSerialize["default"] = o.Default
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableApiAvailableRegionView struct {
	value *ApiAvailableRegionView
	isSet bool
}

func (v NullableApiAvailableRegionView) Get() *ApiAvailableRegionView {
	return v.value
}

func (v *NullableApiAvailableRegionView) Set(val *ApiAvailableRegionView) {
	v.value = val
	v.isSet = true
}

func (v NullableApiAvailableRegionView) IsSet() bool {
	return v.isSet
}

func (v *NullableApiAvailableRegionView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiAvailableRegionView(val *ApiAvailableRegionView) *NullableApiAvailableRegionView {
	return &NullableApiAvailableRegionView{value: val, isSet: true}
}

func (v NullableApiAvailableRegionView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiAvailableRegionView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


