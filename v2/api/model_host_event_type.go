/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// HostEventType Incident that triggered this alert.
type HostEventType string

// List of HostEventType
const (
	HOSTEVENTTYPE_ADD_HOST_AUDIT HostEventType = "ADD_HOST_AUDIT"
	HOSTEVENTTYPE_DELETE_HOST_AUDIT HostEventType = "DELETE_HOST_AUDIT"
	HOSTEVENTTYPE_UNDELETE_HOST_AUDIT HostEventType = "UNDELETE_HOST_AUDIT"
	HOSTEVENTTYPE_ADD_HOST_TO_REPLICA_SET_AUDIT HostEventType = "ADD_HOST_TO_REPLICA_SET_AUDIT"
	HOSTEVENTTYPE_REMOVE_HOST_FROM_REPLICA_SET_AUDIT HostEventType = "REMOVE_HOST_FROM_REPLICA_SET_AUDIT"
	HOSTEVENTTYPE_HIDE_HOST_AUDIT HostEventType = "HIDE_HOST_AUDIT"
	HOSTEVENTTYPE_HIDE_AND_DISABLE_HOST_AUDIT HostEventType = "HIDE_AND_DISABLE_HOST_AUDIT"
	HOSTEVENTTYPE_DISABLE_HOST_AUDIT HostEventType = "DISABLE_HOST_AUDIT"
	HOSTEVENTTYPE_PAUSE_HOST_AUDIT HostEventType = "PAUSE_HOST_AUDIT"
	HOSTEVENTTYPE_RESUME_HOST_AUDIT HostEventType = "RESUME_HOST_AUDIT"
	HOSTEVENTTYPE_DB_PROFILER_ENABLE_AUDIT HostEventType = "DB_PROFILER_ENABLE_AUDIT"
	HOSTEVENTTYPE_DB_PROFILER_DISABLE_AUDIT HostEventType = "DB_PROFILER_DISABLE_AUDIT"
	HOSTEVENTTYPE_HOST_IP_CHANGED_AUDIT HostEventType = "HOST_IP_CHANGED_AUDIT"
	HOSTEVENTTYPE_AUTO_CREATED_INDEX_AUDIT HostEventType = "AUTO_CREATED_INDEX_AUDIT"
	HOSTEVENTTYPE_SSH_KEY_NDS_HOST_ACCESS_REQUESTED HostEventType = "SSH_KEY_NDS_HOST_ACCESS_REQUESTED"
	HOSTEVENTTYPE_SSH_KEY_NDS_HOST_ACCESS_REFRESHED HostEventType = "SSH_KEY_NDS_HOST_ACCESS_REFRESHED"
	HOSTEVENTTYPE_SSH_KEY_NDS_HOST_ACCESS_ATTEMPT HostEventType = "SSH_KEY_NDS_HOST_ACCESS_ATTEMPT"
	HOSTEVENTTYPE_SSH_KEY_NDS_HOST_ACCESS_GRANTED HostEventType = "SSH_KEY_NDS_HOST_ACCESS_GRANTED"
	HOSTEVENTTYPE_NDS_HOST_LOGS_DOWNLOADED HostEventType = "NDS_HOST_LOGS_DOWNLOADED"
	HOSTEVENTTYPE_NDS_CLOUD_PROVIDER_CONSOLE_INFORMATION_DOWNLOADED HostEventType = "NDS_CLOUD_PROVIDER_CONSOLE_INFORMATION_DOWNLOADED"
	HOSTEVENTTYPE_ATTEMPT_KILLOP_AUDIT HostEventType = "ATTEMPT_KILLOP_AUDIT"
	HOSTEVENTTYPE_ATTEMPT_KILLSESSION_AUDIT HostEventType = "ATTEMPT_KILLSESSION_AUDIT"
	HOSTEVENTTYPE_HOST_UP HostEventType = "HOST_UP"
	HOSTEVENTTYPE_HOST_DOWN HostEventType = "HOST_DOWN"
	HOSTEVENTTYPE_HOST_ROLLBACK HostEventType = "HOST_ROLLBACK"
	HOSTEVENTTYPE_HOST_RECOVERED HostEventType = "HOST_RECOVERED"
	HOSTEVENTTYPE_HOST_RECOVERING HostEventType = "HOST_RECOVERING"
	HOSTEVENTTYPE_VERSION_CURRENT HostEventType = "VERSION_CURRENT"
	HOSTEVENTTYPE_VERSION_BEHIND HostEventType = "VERSION_BEHIND"
	HOSTEVENTTYPE_VALUE_NO_LONGER_ANOMALOUS HostEventType = "VALUE_NO_LONGER_ANOMALOUS"
	HOSTEVENTTYPE_ANOMALOUS_VALUE_DETECTED HostEventType = "ANOMALOUS_VALUE_DETECTED"
	HOSTEVENTTYPE_HOST_LOCKED_DOWN HostEventType = "HOST_LOCKED_DOWN"
	HOSTEVENTTYPE_HOST_EXPOSED HostEventType = "HOST_EXPOSED"
	HOSTEVENTTYPE_VERSION_CHANGED HostEventType = "VERSION_CHANGED"
	HOSTEVENTTYPE_HOST_SSL_CERTIFICATE_CURRENT HostEventType = "HOST_SSL_CERTIFICATE_CURRENT"
	HOSTEVENTTYPE_HOST_SSL_CERTIFICATE_STALE HostEventType = "HOST_SSL_CERTIFICATE_STALE"
	HOSTEVENTTYPE_HOST_HAS_INDEX_SUGGESTIONS_WITHDRAWN HostEventType = "HOST_HAS_INDEX_SUGGESTIONS_WITHDRAWN"
	HOSTEVENTTYPE_HOST_HAS_INDEX_SUGGESTIONS HostEventType = "HOST_HAS_INDEX_SUGGESTIONS"
	HOSTEVENTTYPE_HOST_SECURITY_CHECKUP_MET HostEventType = "HOST_SECURITY_CHECKUP_MET"
	HOSTEVENTTYPE_HOST_SECURITY_CHECKUP_NOT_MET HostEventType = "HOST_SECURITY_CHECKUP_NOT_MET"
	HOSTEVENTTYPE_HOST_MONGOT_RECOVERED_OOM HostEventType = "HOST_MONGOT_RECOVERED_OOM"
	HOSTEVENTTYPE_HOST_MONGOT_CRASHING_OOM HostEventType = "HOST_MONGOT_CRASHING_OOM"
	HOSTEVENTTYPE_HOST_MONGOT_RECOVERED_OOM_MTM HostEventType = "HOST_MONGOT_RECOVERED_OOM_MTM"
	HOSTEVENTTYPE_HOST_MONGOT_CRASHING_OOM_MTM HostEventType = "HOST_MONGOT_CRASHING_OOM_MTM"
	HOSTEVENTTYPE_HOST_DISK_SPACE_SUFFICIENT_FOR_SEARCH_INDEX_REBUILD HostEventType = "HOST_DISK_SPACE_SUFFICIENT_FOR_SEARCH_INDEX_REBUILD"
	HOSTEVENTTYPE_HOST_DISK_SPACE_INSUFFICIENT_FOR_SEARCH_INDEX_REBUILD HostEventType = "HOST_DISK_SPACE_INSUFFICIENT_FOR_SEARCH_INDEX_REBUILD"
	HOSTEVENTTYPE_NEW_HOST HostEventType = "NEW_HOST"
	HOSTEVENTTYPE_HOST_RESTARTED HostEventType = "HOST_RESTARTED"
	HOSTEVENTTYPE_HOST_UPGRADED HostEventType = "HOST_UPGRADED"
	HOSTEVENTTYPE_HOST_DOWNGRADED HostEventType = "HOST_DOWNGRADED"
	HOSTEVENTTYPE_HOST_NOW_PRIMARY HostEventType = "HOST_NOW_PRIMARY"
	HOSTEVENTTYPE_HOST_NOW_SECONDARY HostEventType = "HOST_NOW_SECONDARY"
	HOSTEVENTTYPE_HOST_NOW_STANDALONE HostEventType = "HOST_NOW_STANDALONE"
)

// All allowed values of HostEventType enum
var AllowedHostEventTypeEnumValues = []HostEventType{
	"ADD_HOST_AUDIT",
	"DELETE_HOST_AUDIT",
	"UNDELETE_HOST_AUDIT",
	"ADD_HOST_TO_REPLICA_SET_AUDIT",
	"REMOVE_HOST_FROM_REPLICA_SET_AUDIT",
	"HIDE_HOST_AUDIT",
	"HIDE_AND_DISABLE_HOST_AUDIT",
	"DISABLE_HOST_AUDIT",
	"PAUSE_HOST_AUDIT",
	"RESUME_HOST_AUDIT",
	"DB_PROFILER_ENABLE_AUDIT",
	"DB_PROFILER_DISABLE_AUDIT",
	"HOST_IP_CHANGED_AUDIT",
	"AUTO_CREATED_INDEX_AUDIT",
	"SSH_KEY_NDS_HOST_ACCESS_REQUESTED",
	"SSH_KEY_NDS_HOST_ACCESS_REFRESHED",
	"SSH_KEY_NDS_HOST_ACCESS_ATTEMPT",
	"SSH_KEY_NDS_HOST_ACCESS_GRANTED",
	"NDS_HOST_LOGS_DOWNLOADED",
	"NDS_CLOUD_PROVIDER_CONSOLE_INFORMATION_DOWNLOADED",
	"ATTEMPT_KILLOP_AUDIT",
	"ATTEMPT_KILLSESSION_AUDIT",
	"HOST_UP",
	"HOST_DOWN",
	"HOST_ROLLBACK",
	"HOST_RECOVERED",
	"HOST_RECOVERING",
	"VERSION_CURRENT",
	"VERSION_BEHIND",
	"VALUE_NO_LONGER_ANOMALOUS",
	"ANOMALOUS_VALUE_DETECTED",
	"HOST_LOCKED_DOWN",
	"HOST_EXPOSED",
	"VERSION_CHANGED",
	"HOST_SSL_CERTIFICATE_CURRENT",
	"HOST_SSL_CERTIFICATE_STALE",
	"HOST_HAS_INDEX_SUGGESTIONS_WITHDRAWN",
	"HOST_HAS_INDEX_SUGGESTIONS",
	"HOST_SECURITY_CHECKUP_MET",
	"HOST_SECURITY_CHECKUP_NOT_MET",
	"HOST_MONGOT_RECOVERED_OOM",
	"HOST_MONGOT_CRASHING_OOM",
	"HOST_MONGOT_RECOVERED_OOM_MTM",
	"HOST_MONGOT_CRASHING_OOM_MTM",
	"HOST_DISK_SPACE_SUFFICIENT_FOR_SEARCH_INDEX_REBUILD",
	"HOST_DISK_SPACE_INSUFFICIENT_FOR_SEARCH_INDEX_REBUILD",
	"NEW_HOST",
	"HOST_RESTARTED",
	"HOST_UPGRADED",
	"HOST_DOWNGRADED",
	"HOST_NOW_PRIMARY",
	"HOST_NOW_SECONDARY",
	"HOST_NOW_STANDALONE",
}

func (v *HostEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HostEventType(value)
	for _, existing := range AllowedHostEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HostEventType", value)
}

// NewHostEventTypeFromValue returns a pointer to a valid HostEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostEventTypeFromValue(v string) (*HostEventType, error) {
	ev := HostEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HostEventType: valid values are %v", v, AllowedHostEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostEventType) IsValid() bool {
	for _, existing := range AllowedHostEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HostEventType value
func (v HostEventType) Ptr() *HostEventType {
	return &v
}

type NullableHostEventType struct {
	value *HostEventType
	isSet bool
}

func (v NullableHostEventType) Get() *HostEventType {
	return v.value
}

func (v *NullableHostEventType) Set(val *HostEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableHostEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableHostEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostEventType(val *HostEventType) *NullableHostEventType {
	return &NullableHostEventType{value: val, isSet: true}
}

func (v NullableHostEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

