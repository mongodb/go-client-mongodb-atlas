/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// HostEventTypeForNdsGroup Unique identifier of event type.
type HostEventTypeForNdsGroup string

// List of HostEventTypeForNdsGroup
const (
	HOSTEVENTTYPEFORNDSGROUP_AUTO_CREATED_INDEX_AUDIT HostEventTypeForNdsGroup = "AUTO_CREATED_INDEX_AUDIT"
	HOSTEVENTTYPEFORNDSGROUP_ATTEMPT_KILLOP_AUDIT HostEventTypeForNdsGroup = "ATTEMPT_KILLOP_AUDIT"
	HOSTEVENTTYPEFORNDSGROUP_ATTEMPT_KILLSESSION_AUDIT HostEventTypeForNdsGroup = "ATTEMPT_KILLSESSION_AUDIT"
	HOSTEVENTTYPEFORNDSGROUP_HOST_UP HostEventTypeForNdsGroup = "HOST_UP"
	HOSTEVENTTYPEFORNDSGROUP_HOST_DOWN HostEventTypeForNdsGroup = "HOST_DOWN"
	HOSTEVENTTYPEFORNDSGROUP_HOST_HAS_INDEX_SUGGESTIONS HostEventTypeForNdsGroup = "HOST_HAS_INDEX_SUGGESTIONS"
	HOSTEVENTTYPEFORNDSGROUP_HOST_MONGOT_RECOVERED_OOM HostEventTypeForNdsGroup = "HOST_MONGOT_RECOVERED_OOM"
	HOSTEVENTTYPEFORNDSGROUP_HOST_MONGOT_CRASHING_OOM HostEventTypeForNdsGroup = "HOST_MONGOT_CRASHING_OOM"
	HOSTEVENTTYPEFORNDSGROUP_HOST_DISK_SPACE_SUFFICIENT_FOR_SEARCH_INDEX_REBUILD HostEventTypeForNdsGroup = "HOST_DISK_SPACE_SUFFICIENT_FOR_SEARCH_INDEX_REBUILD"
	HOSTEVENTTYPEFORNDSGROUP_HOST_DISK_SPACE_INSUFFICIENT_FOR_SEARCH_INDEX_REBUILD HostEventTypeForNdsGroup = "HOST_DISK_SPACE_INSUFFICIENT_FOR_SEARCH_INDEX_REBUILD"
)

// All allowed values of HostEventTypeForNdsGroup enum
var AllowedHostEventTypeForNdsGroupEnumValues = []HostEventTypeForNdsGroup{
	"AUTO_CREATED_INDEX_AUDIT",
	"ATTEMPT_KILLOP_AUDIT",
	"ATTEMPT_KILLSESSION_AUDIT",
	"HOST_UP",
	"HOST_DOWN",
	"HOST_HAS_INDEX_SUGGESTIONS",
	"HOST_MONGOT_RECOVERED_OOM",
	"HOST_MONGOT_CRASHING_OOM",
	"HOST_DISK_SPACE_SUFFICIENT_FOR_SEARCH_INDEX_REBUILD",
	"HOST_DISK_SPACE_INSUFFICIENT_FOR_SEARCH_INDEX_REBUILD",
}

func (v *HostEventTypeForNdsGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HostEventTypeForNdsGroup(value)
	for _, existing := range AllowedHostEventTypeForNdsGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HostEventTypeForNdsGroup", value)
}

// NewHostEventTypeForNdsGroupFromValue returns a pointer to a valid HostEventTypeForNdsGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHostEventTypeForNdsGroupFromValue(v string) (*HostEventTypeForNdsGroup, error) {
	ev := HostEventTypeForNdsGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HostEventTypeForNdsGroup: valid values are %v", v, AllowedHostEventTypeForNdsGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HostEventTypeForNdsGroup) IsValid() bool {
	for _, existing := range AllowedHostEventTypeForNdsGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HostEventTypeForNdsGroup value
func (v HostEventTypeForNdsGroup) Ptr() *HostEventTypeForNdsGroup {
	return &v
}

type NullableHostEventTypeForNdsGroup struct {
	value *HostEventTypeForNdsGroup
	isSet bool
}

func (v NullableHostEventTypeForNdsGroup) Get() *HostEventTypeForNdsGroup {
	return v.value
}

func (v *NullableHostEventTypeForNdsGroup) Set(val *HostEventTypeForNdsGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableHostEventTypeForNdsGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableHostEventTypeForNdsGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostEventTypeForNdsGroup(val *HostEventTypeForNdsGroup) *NullableHostEventTypeForNdsGroup {
	return &NullableHostEventTypeForNdsGroup{value: val, isSet: true}
}

func (v NullableHostEventTypeForNdsGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostEventTypeForNdsGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

