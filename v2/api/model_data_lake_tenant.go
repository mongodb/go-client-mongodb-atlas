/*
MongoDB Atlas Administration API

The MongoDB Atlas Administration API allows developers to manage all components in MongoDB Atlas. To learn more, review the [Administration API overview](https://www.mongodb.com/docs/atlas/api/atlas-admin-api/). This OpenAPI specification covers all of the collections with the exception of Alerts, Alert Configurations, and Events. Refer to the [legacy documentation](https://www.mongodb.com/docs/atlas/reference/api-resources/) for the specifications of these resources.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// DataLakeTenant struct for DataLakeTenant
type DataLakeTenant struct {
	CloudProviderConfig *DataLakeCloudProviderConfig `json:"cloudProviderConfig,omitempty"`
	DataProcessRegion *DataLakeDataProcessRegion `json:"dataProcessRegion,omitempty"`
	// Human-readable label that identifies the data lake.
	Name *string `json:"name,omitempty"`
	Storage *DataLakeStorage `json:"storage,omitempty"`
}

// NewDataLakeTenant instantiates a new DataLakeTenant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLakeTenant() *DataLakeTenant {
	this := DataLakeTenant{}
	return &this
}

// NewDataLakeTenantWithDefaults instantiates a new DataLakeTenant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLakeTenantWithDefaults() *DataLakeTenant {
	this := DataLakeTenant{}
	return &this
}

// GetCloudProviderConfig returns the CloudProviderConfig field value if set, zero value otherwise.
func (o *DataLakeTenant) GetCloudProviderConfig() DataLakeCloudProviderConfig {
	if o == nil || o.CloudProviderConfig == nil {
		var ret DataLakeCloudProviderConfig
		return ret
	}
	return *o.CloudProviderConfig
}

// GetCloudProviderConfigOk returns a tuple with the CloudProviderConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeTenant) GetCloudProviderConfigOk() (*DataLakeCloudProviderConfig, bool) {
	if o == nil || o.CloudProviderConfig == nil {
		return nil, false
	}
	return o.CloudProviderConfig, true
}

// HasCloudProviderConfig returns a boolean if a field has been set.
func (o *DataLakeTenant) HasCloudProviderConfig() bool {
	if o != nil && o.CloudProviderConfig != nil {
		return true
	}

	return false
}

// SetCloudProviderConfig gets a reference to the given DataLakeCloudProviderConfig and assigns it to the CloudProviderConfig field.
func (o *DataLakeTenant) SetCloudProviderConfig(v DataLakeCloudProviderConfig) {
	o.CloudProviderConfig = &v
}

// GetDataProcessRegion returns the DataProcessRegion field value if set, zero value otherwise.
func (o *DataLakeTenant) GetDataProcessRegion() DataLakeDataProcessRegion {
	if o == nil || o.DataProcessRegion == nil {
		var ret DataLakeDataProcessRegion
		return ret
	}
	return *o.DataProcessRegion
}

// GetDataProcessRegionOk returns a tuple with the DataProcessRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeTenant) GetDataProcessRegionOk() (*DataLakeDataProcessRegion, bool) {
	if o == nil || o.DataProcessRegion == nil {
		return nil, false
	}
	return o.DataProcessRegion, true
}

// HasDataProcessRegion returns a boolean if a field has been set.
func (o *DataLakeTenant) HasDataProcessRegion() bool {
	if o != nil && o.DataProcessRegion != nil {
		return true
	}

	return false
}

// SetDataProcessRegion gets a reference to the given DataLakeDataProcessRegion and assigns it to the DataProcessRegion field.
func (o *DataLakeTenant) SetDataProcessRegion(v DataLakeDataProcessRegion) {
	o.DataProcessRegion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataLakeTenant) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeTenant) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataLakeTenant) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataLakeTenant) SetName(v string) {
	o.Name = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *DataLakeTenant) GetStorage() DataLakeStorage {
	if o == nil || o.Storage == nil {
		var ret DataLakeStorage
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLakeTenant) GetStorageOk() (*DataLakeStorage, bool) {
	if o == nil || o.Storage == nil {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *DataLakeTenant) HasStorage() bool {
	if o != nil && o.Storage != nil {
		return true
	}

	return false
}

// SetStorage gets a reference to the given DataLakeStorage and assigns it to the Storage field.
func (o *DataLakeTenant) SetStorage(v DataLakeStorage) {
	o.Storage = &v
}

func (o DataLakeTenant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CloudProviderConfig != nil {
		toSerialize["cloudProviderConfig"] = o.CloudProviderConfig
	}
	if o.DataProcessRegion != nil {
		toSerialize["dataProcessRegion"] = o.DataProcessRegion
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Storage != nil {
		toSerialize["storage"] = o.Storage
	}
	return json.Marshal(toSerialize)
}

type NullableDataLakeTenant struct {
	value *DataLakeTenant
	isSet bool
}

func (v NullableDataLakeTenant) Get() *DataLakeTenant {
	return v.value
}

func (v *NullableDataLakeTenant) Set(val *DataLakeTenant) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLakeTenant) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLakeTenant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLakeTenant(val *DataLakeTenant) *NullableDataLakeTenant {
	return &NullableDataLakeTenant{value: val, isSet: true}
}

func (v NullableDataLakeTenant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLakeTenant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


